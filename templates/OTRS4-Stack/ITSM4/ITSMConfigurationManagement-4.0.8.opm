<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>ITSMConfigurationManagement</Name>
    <Version>4.0.8</Version>
    <Vendor>OTRS AG</Vendor>
    <URL>http://otrs.org/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <ChangeLog Date="2015-05-06 16:18:47" Version="4.0.8">Build for OTRS::ITSM 4 patch level 8.</ChangeLog>
    <ChangeLog Date="2015-03-25 20:59:16" Version="4.0.7">Build for OTRS::ITSM 4 patch level 7.</ChangeLog>
    <ChangeLog Date="2015-02-19 11:31:01" Version="4.0.6">Build for OTRS::ITSM 4 patch level 6.</ChangeLog>
    <ChangeLog Date="2015-01-14 19:45:58" Version="4.0.5">Build for OTRS::ITSM 4 patch level 5.</ChangeLog>
    <ChangeLog Date="2015-01-08 14:41:30" Version="4.0.4">Build for OTRS::ITSM 4 patch level 4.</ChangeLog>
    <ChangeLog Date="2014-12-11 16:42:50" Version="4.0.3">Build for OTRS::ITSM 4 patch level 3.</ChangeLog>
    <ChangeLog Date="2014-11-28 21:01:38" Version="4.0.2">Build for OTRS::ITSM 4 patch level 2.</ChangeLog>
    <ChangeLog Date="2014-11-20 17:24:57" Version="4.0.1">Build for OTRS::ITSM 4.</ChangeLog>
    <ChangeLog Date="2014-11-13 19:39:16" Version="3.3.96">Build for OTRS::ITSM 4 rc1.</ChangeLog>
    <ChangeLog Date="2014-10-31 12:24:32" Version="3.3.95">Build for OTRS::ITSM 4 beta5.</ChangeLog>
    <ChangeLog Date="2014-10-20 10:50:27" Version="3.3.94">Build for OTRS::ITSM 4 beta4.</ChangeLog>
    <ChangeLog Date="2014-10-02 17:48:00" Version="3.3.93">Build for OTRS::ITSM 4 beta3.</ChangeLog>
    <ChangeLog Date="2014-09-18 18:58:59" Version="3.3.92">Build for OTRS::ITSM 4 beta2.</ChangeLog>
    <ChangeLog Date="2014-09-04 01:42:01" Version="3.3.91">Build for OTRS::ITSM 4 beta1.</ChangeLog>
    <Description Lang="en">The OTRS::ITSM Configuration Management package.</Description>
    <Description Lang="de">Das OTRS::ITSM Configuration Management Paket.</Description>
    <Description Lang="es">El paquete OTRS::ITSM Configuration Management.</Description>
    <Framework>4.0.x</Framework>
    <IntroInstall Lang="en" Title="Install Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;WELCOME&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        You are about to install the OTRS package ITSMConfigurationManagement.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;REQUIRED OTRS PACKAGES&lt;/strong&gt;
        &lt;ul&gt;
        &lt;li&gt;ITSMCore 4.0.8&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroInstall>
    <IntroInstall Lang="de" Title="Installation Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;WILLKOMMEN&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Sie sind im Begriff das OTRS-Paket ITSMConfigurationManagement zu installieren.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;BENÖTIGTE OTRS-PAKETE&lt;/strong&gt;
        &lt;ul&gt;
        &lt;li&gt;ITSMCore 4.0.8&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroInstall>
    <IntroInstall Lang="es" Title="Install Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;BIENVENIDO&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Usted está punto de instalar el paquete ITSMConfigurationManagement de OTRS.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;PAQUETES OTRS REQUERIDOS&lt;/strong&gt;
        &lt;ul&gt;
        &lt;li&gt;ITSMCore 4.0.8&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroInstall>
    <IntroInstall Lang="en" Title="Installation Information" Type="post">

        &lt;br/&gt;
        &lt;strong&gt;NOTICE&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        In order to grant users access to the config item menu, you need to add them as member to the group 'itsm-configitem'.
        &lt;br/&gt;
        &lt;br/&gt;
        The menu items that were added by this package will be visible after you log-in to the system again.
        &lt;br/&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroInstall>
    <IntroInstall Lang="de" Title="Installation Information" Type="post">

        &lt;br/&gt;
        &lt;strong&gt;HINWEIS&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Um Benutzern Zugriff auf das ConfigItem-Menü zu gewähren, müssen diese Mitglied der neuen Gruppe 'itsm-configitem' sein.
        &lt;br/&gt;
        &lt;br/&gt;
        Die von diesem Paket hinzugefügten Menü-Punkte sind erst nach einem erneuten Anmeldevorgang im System sichtbar.
        &lt;br/&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroInstall>
    <IntroInstall Lang="es" Title="Installation Information" Type="post">

        &lt;br/&gt;
        &lt;strong&gt;ATENCIÓN&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Para permitirles a los usuarios el acceso al menú de los elementos de configuración, es necesario que se den de
        alta como miembros del grupo 'itsm-configitem'.
        &lt;br/&gt;
        &lt;br/&gt;
        Los elementos del menú que se agregaron por este paquete, serpan visibles después reiniciar la sesión al sistema.
        &lt;br/&gt;
        &lt;br/&gt;
        ((enjoy))
        &lt;br/&gt;
        &lt;br/&gt;

    </IntroInstall>
    <IntroUninstall Lang="en" Title="Uninstallation Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;ATTENTION&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        If you uninstall this package, all database tables that were created during installation will be deleted.
        All data from these tables will be irrevocably lost!
        &lt;br/&gt;
        &lt;br/&gt;
        The group 'itsm-configitem' that was created during package installation will be deactivated.
        You can activate this group again in the admin area.
        &lt;br/&gt;
        &lt;br/&gt;
        All links to config item objects will be irrevocably deleted!
        &lt;br/&gt;
        &lt;br/&gt;
        The statistics that are associated with this package, will no longer be available if the package is uninstalled.
        &lt;br/&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroUninstall>
    <IntroUninstall Lang="de" Title="Uninstallation Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;ACHTUNG&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Bei der Deinstallation werden die von diesem Paket angelegten Datenbank-Tabellen gelöscht.
        Alle darin enthaltenen Daten gehen unwiderruflich verloren!
        &lt;br/&gt;
        &lt;br/&gt;
        Die von diesem Paket angelegte Gruppe 'itsm-configitem' wird deaktiviert.
        Sie kann jederzeit im Admin-Bereich wieder aktiviert werden.
        &lt;br/&gt;
        &lt;br/&gt;
        Alle Verknüpfungen zu ConfigItem-Objekten werden unwiderruflich gelöscht!
        &lt;br/&gt;
        &lt;br/&gt;
        Nach der Deinstallation sind die zu diesem Paket zugehörigen Statistiken nicht mehr verfügbar.
        &lt;br/&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroUninstall>
    <IntroUninstall Lang="es" Title="Uninstallation Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;ATENCIÓN&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Si usted desinstala este paquete, todas las tablas de la base de datos que fueron creadas durante su instalación se eliminarán.
        ¡Todos los datos de dichas tablas se perderán irrevocablemente!
        &lt;br/&gt;
        &lt;br/&gt;
        El grupo 'itsm-configitem' que se creó durante la instalación de este paquete se desactivará.
        Es posible reactivar este grupo en el área de administración.
        &lt;br/&gt;
        &lt;br/&gt;
        ¡Todos los vínculos a objetos de elementos de configuración serán eliminados permanentemente!
        &lt;br/&gt;
        &lt;br/&gt;
        Si usted desinstala este paquete, las estadísticas que están asociadas a él ya no estarán disponibles.
        &lt;br/&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroUninstall>
    <IntroUpgrade Lang="en" Title="Upgrade Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;WELCOME&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        You are about to upgrade the OTRS package ITSMConfigurationManagement.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;REQUIRED OTRS PACKAGES&lt;/strong&gt;
        &lt;ul&gt;
        &lt;li&gt;ITSMCore 4.0.8&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroUpgrade>
    <IntroUpgrade Lang="de" Title="Upgrade Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;WILLKOMMEN&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Sie sind im Begriff das OTRS-Paket ITSMConfigurationManagement zu aktualisieren.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;BENÖTIGTE OTRS-PAKETE&lt;/strong&gt;
        &lt;ul&gt;
        &lt;li&gt;ITSMCore 4.0.8&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroUpgrade>
    <IntroUpgrade Lang="es" Title="Upgrade Information" Type="pre">

        &lt;br/&gt;
        &lt;strong&gt;BIENVENIDO&lt;/strong&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        Usted está a punto de actualizar el paquete ITSMConfigurationManagement de OTRS.&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        &lt;strong&gt;PAQUETES OTRS REQUERIDOS&lt;/strong&gt;
        &lt;ul&gt;
        &lt;li&gt;ITSMCore 4.0.8&lt;/li&gt;
        &lt;/ul&gt;
        &lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;

    </IntroUpgrade>
    <PackageRequired Version="4.0.8">ITSMCore</PackageRequired>
    <CodeInstall Type="post">

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        $Kernel::OM-&gt;Get($CodeModule)-&gt;CodeInstall();

    </CodeInstall>
    <CodeUpgrade Type="pre" Version="3.2.91">

        # uninstall Feature AddOn OTRSCIColumns that has been integrated in OTRS::ITSM 3.2.91 (OTRS::ITSM 3.3.0 Beta 1)
        $Kernel::OM-&gt;Get('Kernel::System::Package')-&gt;_PackageUninstallMerged(
            Name =&gt; 'OTRSCIColumns',
        );

        # uninstall Feature AddOn OTRSCIAttributeSyntaxCheck that has been integrated in OTRS::ITSM 3.2.91 (OTRS::ITSM 3.3.0 Beta 1)
        $Kernel::OM-&gt;Get('Kernel::System::Package')-&gt;_PackageUninstallMerged(
            Name =&gt; 'OTRSCIAttributeSyntaxCheck',
        );

    </CodeUpgrade>
    <CodeUpgrade Type="pre" Version="3.3.91">

        # uninstall Feature AddOn OTRSGenericInterfaceITSMCIOperations that has been integrated in OTRS::ITSM 3.3.91 (OTRS::ITSM 4 Beta 1)
        $Kernel::OM-&gt;Get('Kernel::System::Package')-&gt;_PackageUninstallMerged(
            Name =&gt; 'OTRSGenericInterfaceITSMCIOperations',
        );

    </CodeUpgrade>
    <CodeUpgrade Type="post" Version="4.0.2">

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # discard internally stored object, so that the next access to object creates them newly
        $Kernel::OM-&gt;ObjectsDiscard(
            Objects            =&gt; [$CodeModule],
            ForcePackageReload =&gt; 1,
        );

        $Kernel::OM-&gt;Get($CodeModule)-&gt;CodeUpgradeFromLowerThan_4_0_2();

    </CodeUpgrade>
    <CodeUpgrade Type="post" Version="4.0.8">

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # discard internally stored object, so that the next access to object creates them newly
        $Kernel::OM-&gt;ObjectsDiscard(
            Objects            =&gt; [$CodeModule],
            ForcePackageReload =&gt; 1,
        );

        $Kernel::OM-&gt;Get($CodeModule)-&gt;CodeUpgradeFromLowerThan_4_0_8();

    </CodeUpgrade>
    <CodeUpgrade Type="post">

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # discard internally stored object, so that the next access to object creates them newly
        $Kernel::OM-&gt;ObjectsDiscard(
            Objects            =&gt; [$CodeModule],
            ForcePackageReload =&gt; 1,
        );

        $Kernel::OM-&gt;Get($CodeModule)-&gt;CodeUpgrade();

    </CodeUpgrade>
    <CodeUninstall Type="pre">

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        $Kernel::OM-&gt;Get($CodeModule)-&gt;CodeUninstall();

    </CodeUninstall>
    <CodeUninstall Type="post">

        {
            # cleanup stats list
            $Kernel::OM-&gt;Get('Kernel::System::Stats')-&gt;StatsCleanUp();
        }

    </CodeUninstall>
    <CodeReinstall Type="post">

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        $Kernel::OM-&gt;Get($CodeModule)-&gt;CodeReinstall();

    </CodeReinstall>
    <BuildDate>2015-05-06 16:18:47</BuildDate>
    <BuildHost>opms.otrs.com</BuildHost>
    <Filelist>
        <File Location="bin/otrs.ITSMConfigItemDelete.pl" Permission="755" Encode="Base64"></File>
        <File Location="bin/otrs.ITSMConfigItemIncidentStateRecalculate.pl" Permission="755" Encode="Base64">IyEvdXNyL2Jpbi9wZXJsCiMgLS0KIyBiaW4vb3Rycy5JVFNNQ29uZmlnSXRlbUluY2lkZW50U3RhdGVSZWNhbGN1bGF0ZS5wbCAtIHRvIHJlY2FsY3VsYXRlIHRoZSBpbmNpZGVudCBzdGF0ZXMgb2YgY29uZmlnIGl0ZW1zCiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTUgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKIyBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBRkZFUk8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKIyB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcgojIGFueSBsYXRlciB2ZXJzaW9uLgojCiMgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiMgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKIyBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCiMgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KIwojIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZQojIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtOyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlCiMgRm91bmRhdGlvbiwgSW5jLiwgNTEgRnJhbmtsaW4gU3QsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BICAwMjExMC0xMzAxIFVTQQojIG9yIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCiMgdXNlIC4uLyBhcyBsaWIgbG9jYXRpb24KdXNlIEZpbGU6OkJhc2VuYW1lOwp1c2UgRmluZEJpbiBxdygkUmVhbEJpbik7CnVzZSBsaWIgZGlybmFtZSgkUmVhbEJpbik7Cgp1c2UgR2V0b3B0OjpMb25nOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpPYmplY3RNYW5hZ2VyOwoKIyBjcmVhdGUgb2JqZWN0IG1hbmFnZXIgb2JqZWN0CmxvY2FsICRLZXJuZWw6Ok9NID0gS2VybmVsOjpTeXN0ZW06Ok9iamVjdE1hbmFnZXItPm5ldygKICAgICdLZXJuZWw6OlN5c3RlbTo6TG9nJyA9PiB7CiAgICAgICAgTG9nUHJlZml4ID0+ICdPVFJTLUlUU01Db25maWdJdGVtSW5jaWRlbnRTdGF0ZVJlY2FsY3VsYXRlLnBsJywKICAgIH0sCik7CgpwcmludCAiXG4iOwpwcmludCAib3Rycy5JVFNNQ29uZmlnSXRlbUluY2lkZW50U3RhdGVSZWNhbGN1bGF0ZS5wbFxuIjsKcHJpbnQgIlJlY2FsY3VsYXRlcyB0aGUgaW5jaWRlbnQgc3RhdGUgb2YgY29uZmlnIGl0ZW1zLlxuIjsKcHJpbnQKICAgICJUaGlzIGlzIG5lY2Vzc2FyeSBhZnRlciBjaGFuZ2luZyB0aGUgc3lzY29uZmlnIG9wdGlvbiAnSVRTTTo6Q29yZTo6SW5jaWRlbnRMaW5rVHlwZURpcmVjdGlvbicuXG4iOwpwcmludCAiQ29weXJpZ2h0IChDKSAyMDAxLTIwMTUgT1RSUyBBRywgaHR0cDovL290cnMuY29tL1xuXG4iOwoKbXkgJEhlbHA7CgpHZXRPcHRpb25zKAogICAgJ2hlbHAnID0+IFwkSGVscCwKKTsKCiMgc2hvdyB1c2FnZQppZiAoJEhlbHApIHsKICAgIHByaW50ICJVc2FnZTogJDAgW29wdGlvbnNdIFxuXG4iOwogICAgcHJpbnQgIiAgT3B0aW9ucyBhcmUgYXMgZm9sbG93czpcbiI7CiAgICBwcmludCAiICAtLWhlbHAgIGRpc3BsYXkgdGhpcyBvcHRpb24gaGVscFxuXG4iOwogICAgZXhpdCAxOwp9CgojIGdldCBjbGFzcyBsaXN0Cm15ICRDbGFzc0xpc3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6R2VuZXJhbENhdGFsb2cnKS0+SXRlbUxpc3QoCiAgICBDbGFzcyA9PiAnSVRTTTo6Q29uZmlnSXRlbTo6Q2xhc3MnLAopOwoKIyBnZXQgdGhlIHZhbGlkIGNsYXNzIGlkcwpteSBAVmFsaWRDbGFzc0lEcyA9IHNvcnQga2V5cyAleyRDbGFzc0xpc3R9OwoKIyBnZXQgYWxsIGNvbmZpZyBpdGVtcyBpZHMgZm9ybSBhbGwgdmFsaWQgY2xhc3NlcwpteSAkQ29uZmlnSXRlbXNJRHNSZWYgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW0nKS0+Q29uZmlnSXRlbVNlYXJjaCgKICAgIENsYXNzSURzID0+IFxAVmFsaWRDbGFzc0lEcywKKTsKCiMgZ2V0IG51bWJlciBvZiBjb25maWcgaXRlbXMKbXkgJENJQ291bnQgPSBzY2FsYXIgQHskQ29uZmlnSXRlbXNJRHNSZWZ9OwoKcHJpbnQgIlJlY2FsY3VsYXRpbmcgaW5jaWRlbnQgc3RhdGUgZm9yICRDSUNvdW50IGNvbmZpZyBpdGVtcy5cbiI7CgpteSAkQ291bnQgPSAwOwpDT05GSUdJVEVNOgpmb3IgbXkgJENvbmZpZ0l0ZW1JRCAoIEB7JENvbmZpZ0l0ZW1zSURzUmVmfSApIHsKCiAgICBteSAkU3VjY2VzcyA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbScpLT5DdXJJbmNpU3RhdGVSZWNhbGMoCiAgICAgICAgQ29uZmlnSXRlbUlEID0+ICRDb25maWdJdGVtSUQsCiAgICApOwoKICAgIGlmICggISRTdWNjZXNzICkgewogICAgICAgIHByaW50ICIuLi4gY291bGQgbm90IHJlY2FsY3VsYXRlIGluY2lkZW50IHN0YXRlIGZvciBjb25maWcgaXRlbSBpZCAnJENvbmZpZ0l0ZW1JRCchXG4iOwogICAgICAgIG5leHQgQ09ORklHSVRFTTsKICAgIH0KCiAgICAkQ291bnQrKzsKCiAgICBpZiAoICRDb3VudCAlIDEwMCA9PSAwICkgewogICAgICAgIHByaW50ICIuLi4gJENvdW50IGNvbmZpZyBpdGVtcyByZWNhbGN1bGF0ZWQuXG4iOwogICAgfQp9CgpwcmludCAiXG5SZWFkeS4gUmVjYWxjdWxhdGVkICRDb3VudCBjb25maWcgaXRlbXMuXG5cbiI7CgojIGdldCBsaXN0IG9mIGFsbCBzZXJ2aWNlcyAodmFsaWQgYW5kIGludmFsaWQpCm15ICVTZXJ2aWNlTGlzdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTZXJ2aWNlJyktPlNlcnZpY2VMaXN0KAogICAgVmFsaWQgID0+IDAsCiAgICBVc2VySUQgPT4gMSwKKTsKCm15ICROdW1iZXJPZlNlcnZpY2VzID0gc2NhbGFyIGtleXMgJVNlcnZpY2VMaXN0OwoKcHJpbnQgIlJlc2V0dGluZyBTZXJ2aWNlUHJlZmVyZW5jZXMgJ0N1ckluY2lTdGF0ZVR5cGVGcm9tQ0lzJyBmb3IgJE51bWJlck9mU2VydmljZXMgc2VydmljZXMuLi4gIjsKCmZvciBteSAkU2VydmljZUlEICggc29ydCBrZXlzICVTZXJ2aWNlTGlzdCApIHsKCiAgICAjIHVwZGF0ZSB0aGUgY3VycmVudCBpbmNpZGVudCBzdGF0ZSB0eXBlIGZyb20gQ0lzIG9mIHRoZSBzZXJ2aWNlIHdpdGggYW4gZW1wdHkgdmFsdWUKICAgICMgdGhpcyBpcyBuZWNlc3NhcnkgdG8gZm9yY2UgYSByZWNhbGN1bGF0aW9uIG9uIGEgU2VydmljZUdldCgpCiAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6U2VydmljZScpLT5TZXJ2aWNlUHJlZmVyZW5jZXNTZXQoCiAgICAgICAgU2VydmljZUlEID0+ICRTZXJ2aWNlSUQsCiAgICAgICAgS2V5ICAgICAgID0+ICdDdXJJbmNpU3RhdGVUeXBlRnJvbUNJcycsCiAgICAgICAgVmFsdWUgICAgID0+ICcnLAogICAgICAgIFVzZXJJRCAgICA9PiAxLAogICAgKTsKfQoKcHJpbnQgIlJlYWR5LlxuXG4iOwoKMTsK</File>
        <File Location="bin/otrs.ITSMConfigItemListDuplicates.pl" Permission="755" Encode="Base64"></File>
        <File Location="doc/itsm-configuration-management-database.dia" Permission="644" Encode="Base64">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</File>
        <File Location="doc/itsm-configuration-management-database.png" Permission="644" Encode="Base64">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+eSTiYmJp0+fdv+SwStQAAAURVFUf39/e3v77du3b968efPmTYPBwHVEAN6os7OztbW1r6+P60BGicfj5eTkcB3FuAgPDw8ICOA6Cm7k5OSUlJSwSxzv8QiCyM/P7+7u/uyzz4KCgpjy3t5eiqJMJtOFCxeEQiFTuaio6NixYxERET//+c+PHTtGn/LjH//4T3/6k8lk6u3t/eyzz15++WV2F/PmzZs3b547AS9cuLCuro7erqurW7Roket46JCWLFlSUVHR3d194cIFuvAXv/jFT3/6046ODqPRePTo0cjISHb9X/7ylwaDwZ3rddY+48knn2xqanK8kOrqaq1Wyy4JDQ2l77GDgoI+++wzupDH47HrsH86165de+qpp5yO1Dj45JNPnnnmmYnsESZSQEDApUuXOOmafsHF6G4gGxsbH3rood/85jdqtdpkMn377bf/9V//xfyLbmxsnD9//p07d+jdu3fvLly48MaNG8zpBEH89Kc/vXz5ss1ms/snz67jOgbHCvX19Y899tj//u//DgwM1NfX00lnN891XX7p0qX09PS//OUvRqOxt7f3T3/604IFC65evcqc9fOf//z48eNRUVG/+MUvjh8/PuQVDWnsI+ki/mHHeXTXy5z7n//5n++8845arbbZbGvXrnXzktnS09OrqqpGcSKMHVJLAJPdwMDA/fv37969e/OB5ubmjo4Ok8nEdWgA4HlILfklJrXkuM5FbGwsXYd9x89s37x584c//KFEIhEIBCkpKUy5sw2JRMJuPDo6enQB//GPf1y6dCm9vXTp0nPnzrmOhw6AzgqxxcTEdHZ2DtkFQRBms9nN63XWPiM8PNzx6Pnz51tbW52dcu/ePeZzl4tPa93d3VOmTHHWyHhAasm/+WhqafXq1R9//LGzo6tWraqurmaXVFdXs/8aEwRx9OhR9q5jI6NILa1YseLs2bPM7okTJzyVWvrud7979+5ddsk333zD/FYkCKK7u5ve6OnpcSd4xthH0kX8w47z6K6XOZf5v4CiKIvF4uwqXEBqiUN4IA5gkjKZTDqd7t69ey0tLTqdzmw2kyQpFApjY2OnTZsWHR2NVboBAHyOWq2m7/CIB/f3arXaRf1169YtXrz4+vXrer3+6NGjw7aflJTEvo/s6OgYXZzLly/v7++vra2tra0dGBhYtmyZO/EIhUK7EovF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DgIAAAAoXERLw2IwGC6//HK9Xv/GG2/8/Oc/f+uttzo7O6PRqKIooVDoyJEjO3fuTHvJmWeeabVa33rrrSeeeOLw4cM9PT2KooTD4aampj179jz88MODrWH4HVZWVgohdu7c2d7eHo1G29radu7c+e677w74Qr1ev2TJEoPB8MYbb2zbtu29997r6uqKx+ORSKS5ufkvf/nLT37yk3feeWewozgcDiHE22+/nbpR93Dq/OpXv6rT6Q4ePPjMM894vd54PO71enfu3PnRRx/p9frkDuhz587V6XQHDhzYtWuXz+eLx+M+n2/Xrl3s4Y08J0lSWVlZfX19UVGRoijt7e2NjY1p//kgD1mtVkG0BADAZyRJGnAzkNEbOsuh4Vel1XUBY4YFccNVX1+/fPnyJ598sqWl5emnn+57gt1uX7RoUerTq6++eseOHQcPHjx48ODwCxh+h+ecc87jjz9+6NAh9WZzqrlz5+7du3fA19bV1S1fvvw3v/lNU1PT7373u7SjJpPpkksuGewoJ5988u7du59//vnnn39ebVG3Qh9ynVVVVQsXLty1a9ebb7755ptvJtslSVq0aJGaWKmnnX/++X/4wx/27t2b2ufs2bPfeOMNFhkhz5nN5rq6Op/P5/V6e3t7jx07VlZWlnYfAOQVm83m9XqJlgAA41h1dXVzc3OOJycSCa0imNS7IfU9NPyqsvSfxm63p94NHCgUzFoaAfX19atWrbr44ounT59eUlJiMBiMRqPD4TjppJMuueSS1atXn3TSSann19XV3XDDDfPnz6+rqysqKtLpdEVFRbW1teecc84NN9wwhAKG2eGJJ5549dVX19fXGwwGk8lUW1t78cUXp8ZhA46+atWqiy66aNq0aerlm83m6urqs88+e/Xq1V/5ylcGO8rZZ589b948l8uVluYMp845c+Zcd911J510ks1m0+l0NpvtpJNOWrFixemnn5562te+9rVrrrnmuOOOM5lMJpOppqbmoosumj9/vvjs3nxAPpMkyeVyTZo0yWKxJKcvRaNRretC/4qKivR6vTrPVOtaAAAYFS0tLalPw+Hw6tWrKysrq6urH3vsMXVnj+xWrVo1ffp0m812/vnnv/zyy2pjQ0ODyWSSJKmkpGTevHnJfjK1Z7Fr166+85KCweDy5cuLi4tPO+20ffv2pb1k7ty5c+fOHbDn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b9+uNt50003t7e1nnXWWy+VasGDBpk2b0goTuX0Dunnz5sbGRqfTuXDhwhUrViRf1W//Q7jeTO/bYK830/mD/X2p4vF47nOORmTcfn/v6qHly5cvXrx46tSpgUAg+T4Patzs/UxECQDjXTgc/v73v+9yuSorK9UvRtT2eDz+n//5n8cdd5zT6bzuuusCgYDaLoT42c9+Nnny5KKiojPOOOMf//jHgOf/6Ec/qqurU5clHzx48LLLLnO5XCUlJZdeeml7e3vytCxFRqPRO++8c9KkSaWlpVu2bFEb++2q7/+DDThi8nYklZWVq1evDofD2d+ZVFOmTDl06FDyafKcSCRyww03qK/9r//6r9TXfvjhh8cff3zW38mgdXR0/OAHPzCbzUKIp556amQ7z0V3d/dHH3304YcfejweRVHGvgCMlK9//evPP/+81lWMipKSEp1Op3UVADBBqRNtkp8P85Msy7/73e9OPvlkrQvBmNLq937vvffeeOONYzyoVgxjG2QB0MCGDRs+/fTTf/zjH0KI6667Ltn+4x//+M9//vNLL71UWlp600033XXXXffff7966A9/+MOf//xnt9t9//33f//73//rX/+a/fy//OUvr7/+ek1NjRDi8ssv//GPf/yrX/1KluX169ffdtttjzzyyIBF3nfffbt3737ppZdcLtcPf/hDtbHfrhKJRNrWegOOeM899+zfv/+NN94QQixbtmzjxo133313lncmVUtLS3V1dd/2jRs3fvjhh++9914ikVi2bFnqoZqamrStK4ejo6Nj48aNP/3pT4UQkUhk8uTJtbW1b775pnr0N7/5TVdXV6bXRqNRv98/UpXE43E1lTMYDEVFRSPVLcbYBx98sGHDhlz+qyw442+PMwDASLnjjjs2btxoMpkWLVr00ksvaV0Oxgi/9zHDHeKA8e/4449/9tlnZ8yYIYQ4cODAzJkz1f/wTzrppKeeemr69OlCiNbW1q9+9auffPKJEEKSpObm5qqqKiFEKBQqLy8PhULZz//kk08mT57cd+ju7u6ZM2ceO3ZMDHSTiBNPPLGhoeGUU07JdEKOXfV72vHHH//MM8+cfPLJQoh9+/Zdcsklhw4dyvLOpLJYLJ2dnVarVX2a7POEE054+umnk31+6UtfSr42GAy63W71TRumQCCwZMmSP/zhD+pTk8lktVpT76vy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AAAAQP6SEomE1jUAAAAAAACgILEgDgAAAAAAAENEtAQAAAAAAIAhIloCAAAAAADAEBEtAQAAAAAAYIiIlgAAAAAAADBEREsAAAAAAAAYIqIlAAAAAAAADBHREgAAGUUikWAwqCiK1oUAAAAAeYpoCQCAjFpaWpqamsLhsNaFAAAAAHnKoHUBAADkL7PZLEmS1lUAAAAA+UtKJBJa1wAAAAAAAICCxII4AAAAAAAADBHREgAAAAAAAIaIaAkAAAAAAABDRLQEAAAAAACAISJaAgAAAAAAwBARLQEAAAAAAGCIiJYAAAAAAAAwRERLAAAAAAAAGCKD1gUAAJDXWltbw+FwRUWFxWLRuhYAAAAg7zBrCQCAbKLRqCzLsVhM60IAAACAfES0BABANgaDQQgRj8e1LgQAAADIR0RLAABko9frhRDMWgIAAAD6RbQEAEA2arTErCUAAACgX0RLAABkQ7QEAAAAZEG0BABANkRLAAAAQBZESwAAZMM23gAAAEAWREsAAGTDrCUAADDG3n///RtuuGHGjBnFxcU2m2369OnXX3/9+++/n3aalINMJ9tstpkzZ65Zs6alpaVvAb29vVu2bPna175WWlpqMBjKysq+/vWv33HHHe++++7Qrii1mEGVnWMlyRdec801fUe/5ppr+vaci0AgMHny5CG8cKKREomE1jUAAJC/FEU5fPiwEOKEE07gUwUAABht99133x133NH3ay29Xr9x48Zbbrkl2ZLLJ5Pkn/yZTq6srHzttdemTJmSbGlrazv33HP379+fvcNBUUdXX5t72blXovYpSZLZbG5ubi4tLU0e8vv91dXVkUhEPX9Q9a9aternP/+5LMuDfeFEw6wlAACy0el06ocVJi4BAIDR9pOf/GTdunWKoqxcufL111/v6ekJBoN79+79t3/7N0VRbr311gcffDB5cuKLsjT2fUlbW9tTTz01derU1tbW9evXp55zyy237N+/v7a29tFHHz127FgkEvH7/a+99trGjRtPPfXU4V9j7mUPtpJzzz03HA4//vjjqY3/93//Fw6H58+fP9g6X3vttZ/+9KepWR4yYdYSAAAD+Pjjj2OxWH19fVFRkda1AACAcevYsWMnnHCCLMu/+MUvrrvuurSjjz766IoVK0wm0+HDh+vq6vq+PHVmUI5HX3311Xnz5lVUVLS2tiYby8rKvF7va6+9dsYZZwzzinKpLcuh3CtRO3n88cevvvrqWbNmvfnmm8lDs2bNevvtt5944omrrroq00B9ybJ82mmnRaPR9957z2Kx5P7CiYlZSwAADIDtlgAAwBh46KGHZFlesmRJ31xJCHHddddddtllsiw/9NBDIzXil7/8ZSFEV1dXamMwGBRCnHjiiQO+vN9NiEZwZ6LcK1EtXrzY5XK99dZb77zzjtry9ttvv/322y6X69JLLx3U0Bs3bjxw4MDPfvYzvlnMBdESAAADIFoCAABj4MUXXxRCfPe73810gnroj3/840iN+NZbbwkh0uZAnXbaaUKIlStXHjp0aKQGGprBVmI2m9VtvLdv3662qA+uvfZas9mc+7gHDhy49957r7322iEso5uYWBAHAMAAWlpaenp6ysvLnU6n1rUAAIBxy+Vy+Xy+zs5Ol8vV7wkdHR1ut7usrKyjo6Pv0UEtiOvo6Ni9e/eaNWs++eSTu+666+67706euXv37gsuuCAcDgshpk6d+pWvfOWUU075xje+cc4556jft2UfMffGAQ8NoZJ33333K1/5itPpbGpqEkJUV1f7/f5333331FNPzf7+JCmKMm/evIMHD37wwQdutzt7hVARLQEAMID29na/3+90OsvLy7WuBQAAjFtGozEWi0WjUYPB0O8J0WjUZDIZDIZoNNr3aC7RUl9XXXXVL3/5S6PRmNr4wQcfbNy48amnnurp6Uk21tXV/fjHP77ssstyvJwca8tedo6VpHYyZ86cN9544/HHH08kEtdcc82cOXP27t074EBJW7duvemmm7Zt27Zy5cpcKoQgWgIAYEBer7ezs7OkpKSyslLrWgAAwLg1BrOW0tTV1T399NPqurO+4vH4vn379u/fv3fv3l27dn300UeSJDU0NHz729/O9ZJyqC2X4GbASlI7eeihh66//vr58+cnEomXXnrpoYce+vf/3969xkRxtQEcn12WFQTEcgmGoshFqmCrFqvxgokENBZTjUJbSFBrbMVGq01bq5jQRGOk7ZderFa8pNqWxEuRYLWKu4hUS1UwaLW2eMEbS0VBcVcXCuy8H/Z9590s7Oy4KCv4/31olnPOPOc5h36QZ2fOLFyocKLr16/HxcWNGjXq6NGj0o5RWnKK0hIAAE40NTXV19f7+PiEhoa6OxcAANBrjRkz5tSpU8XFxcnJ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</File>
        <File Location="Kernel/Config/Files/ITSMConfigItem.xml" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Config/Files/ITSMConfigItemGenericInterface.xml" Permission="644" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPG90cnNfY29uZmlnIHZlcnNpb249IjEuMCIgaW5pdD0iQXBwbGljYXRpb24iPgogICAgPENvbmZpZ0l0ZW0gTmFtZT0iR2VuZXJpY0ludGVyZmFjZTo6T3BlcmF0aW9uOjpNb2R1bGUjIyNDb25maWdJdGVtOjpDb25maWdJdGVtQ3JlYXRlIiBSZXF1aXJlZD0iMCIgVmFsaWQ9IjEiPgogICAgICAgIDxEZXNjcmlwdGlvbiBUcmFuc2xhdGFibGU9IjEiPkdlbmVyaWNJbnRlcmZhY2UgbW9kdWxlIHJlZ2lzdHJhdGlvbiBmb3IgdGhlIG9wZXJhdGlvbiBsYXllci48L0Rlc2NyaXB0aW9uPgogICAgICAgIDxHcm91cD5JVFNNIENvbmZpZ3VyYXRpb24gTWFuYWdlbWVudDwvR3JvdXA+CiAgICAgICAgPFN1Ykdyb3VwPkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6TW9kdWxlUmVnaXN0cmF0aW9uPC9TdWJHcm91cD4KICAgICAgICA8U2V0dGluZz4KICAgICAgICAgICAgPEhhc2g+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9Ik5hbWUiPkNvbmZpZ0l0ZW1DcmVhdGU8L0l0ZW0+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9IkNvbnRyb2xsZXIiPkNvbmZpZ0l0ZW08L0l0ZW0+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9IkNvbmZpZ0RpYWxvZyI+QWRtaW5HZW5lcmljSW50ZXJmYWNlT3BlcmF0aW9uRGVmYXVsdDwvSXRlbT4KICAgICAgICAgICAgPC9IYXNoPgogICAgICAgIDwvU2V0dGluZz4KICAgIDwvQ29uZmlnSXRlbT4KICAgIDxDb25maWdJdGVtIE5hbWU9IkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6TW9kdWxlIyMjQ29uZmlnSXRlbTo6Q29uZmlnSXRlbUdldCIgUmVxdWlyZWQ9IjAiIFZhbGlkPSIxIj4KICAgICAgICA8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5HZW5lcmljSW50ZXJmYWNlIG1vZHVsZSByZWdpc3RyYXRpb24gZm9yIHRoZSBvcGVyYXRpb24gbGF5ZXIuPC9EZXNjcmlwdGlvbj4KICAgICAgICA8R3JvdXA+SVRTTSBDb25maWd1cmF0aW9uIE1hbmFnZW1lbnQ8L0dyb3VwPgogICAgICAgIDxTdWJHcm91cD5HZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246Ok1vZHVsZVJlZ2lzdHJhdGlvbjwvU3ViR3JvdXA+CiAgICAgICAgPFNldHRpbmc+CiAgICAgICAgICAgIDxIYXNoPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJOYW1lIj5Db25maWdJdGVtR2V0PC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJDb250cm9sbGVyIj5Db25maWdJdGVtPC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJDb25maWdEaWFsb2ciPkFkbWluR2VuZXJpY0ludGVyZmFjZU9wZXJhdGlvbkRlZmF1bHQ8L0l0ZW0+CiAgICAgICAgICAgIDwvSGFzaD4KICAgICAgICA8L1NldHRpbmc+CiAgICA8L0NvbmZpZ0l0ZW0+CiAgICA8Q29uZmlnSXRlbSBOYW1lPSJHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246Ok1vZHVsZSMjI0NvbmZpZ0l0ZW06OkNvbmZpZ0l0ZW1VcGRhdGUiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+CiAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+R2VuZXJpY0ludGVyZmFjZSBtb2R1bGUgcmVnaXN0cmF0aW9uIGZvciB0aGUgb3BlcmF0aW9uIGxheWVyLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPEdyb3VwPklUU00gQ29uZmlndXJhdGlvbiBNYW5hZ2VtZW50PC9Hcm91cD4KICAgICAgICA8U3ViR3JvdXA+R2VuZXJpY0ludGVyZmFjZTo6T3BlcmF0aW9uOjpNb2R1bGVSZWdpc3RyYXRpb248L1N1Ykdyb3VwPgogICAgICAgIDxTZXR0aW5nPgogICAgICAgICAgICA8SGFzaD4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iTmFtZSI+Q29uZmlnSXRlbVVwZGF0ZTwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iQ29udHJvbGxlciI+Q29uZmlnSXRlbTwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iQ29uZmlnRGlhbG9nIj5BZG1pbkdlbmVyaWNJbnRlcmZhY2VPcGVyYXRpb25EZWZhdWx0PC9JdGVtPgogICAgICAgICAgICA8L0hhc2g+CiAgICAgICAgPC9TZXR0aW5nPgogICAgPC9Db25maWdJdGVtPgogICAgPENvbmZpZ0l0ZW0gTmFtZT0iR2VuZXJpY0ludGVyZmFjZTo6T3BlcmF0aW9uOjpNb2R1bGUjIyNDb25maWdJdGVtOjpDb25maWdJdGVtU2VhcmNoIiBSZXF1aXJlZD0iMCIgVmFsaWQ9IjEiPgogICAgICAgIDxEZXNjcmlwdGlvbiBUcmFuc2xhdGFibGU9IjEiPkdlbmVyaWNJbnRlcmZhY2UgbW9kdWxlIHJlZ2lzdHJhdGlvbiBmb3IgdGhlIG9wZXJhdGlvbiBsYXllci48L0Rlc2NyaXB0aW9uPgogICAgICAgIDxHcm91cD5JVFNNIENvbmZpZ3VyYXRpb24gTWFuYWdlbWVudDwvR3JvdXA+CiAgICAgICAgPFN1Ykdyb3VwPkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6TW9kdWxlUmVnaXN0cmF0aW9uPC9TdWJHcm91cD4KICAgICAgICA8U2V0dGluZz4KICAgICAgICAgICAgPEhhc2g+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9Ik5hbWUiPkNvbmZpZ0l0ZW1TZWFyY2g8L0l0ZW0+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9IkNvbnRyb2xsZXIiPkNvbmZpZ0l0ZW08L0l0ZW0+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9IkNvbmZpZ0RpYWxvZyI+QWRtaW5HZW5lcmljSW50ZXJmYWNlT3BlcmF0aW9uRGVmYXVsdDwvSXRlbT4KICAgICAgICAgICAgPC9IYXNoPgogICAgICAgIDwvU2V0dGluZz4KICAgIDwvQ29uZmlnSXRlbT4KCiAgICA8Q29uZmlnSXRlbSBOYW1lPSJHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbmZpZ0l0ZW1HZXQjIyNQZXJtaXNzaW9uIiBSZXF1aXJlZD0iMSIgVmFsaWQ9IjEiPgogICAgICAgIDxEZXNjcmlwdGlvbiBUcmFuc2xhdGFibGU9IjEiPkRlZmluZXMgUmVxdWlyZWQgcGVybWlzc2lvbnMgdG8gZ2V0IElUU00gY29uZmlndXJhdGlvbiBpdGVtcyB1c2luZyB0aGUgR2VuZXJpYyBJbnRlcmZhY2UuPC9EZXNjcmlwdGlvbj4KICAgICAgICA8R3JvdXA+SVRTTSBDb25maWd1cmF0aW9uIE1hbmFnZW1lbnQ8L0dyb3VwPgogICAgICAgIDxTdWJHcm91cD5HZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbmZpZ0l0ZW1HZXQ8L1N1Ykdyb3VwPgogICAgICAgIDxTZXR0aW5nPgogICAgICAgICAgICA8U3RyaW5nIFJlZ2V4PSIiPnJvPC9TdHJpbmc+CiAgICAgICAgPC9TZXR0aW5nPgogICAgPC9Db25maWdJdGVtPgogICAgPENvbmZpZ0l0ZW0gTmFtZT0iR2VuZXJpY0ludGVyZmFjZTo6T3BlcmF0aW9uOjpDb25maWdJdGVtU2VhcmNoIyMjUGVybWlzc2lvbiIgUmVxdWlyZWQ9IjEiIFZhbGlkPSIxIj4KICAgICAgICA8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5EZWZpbmVzIFJlcXVpcmVkIHBlcm1pc3Npb25zIHRvIHNlYXJjaCBJVFNNIGNvbmZpZ3VyYXRpb24gaXRlbXMgdXNpbmcgdGhlIEdlbmVyaWMgSW50ZXJmYWNlLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPEdyb3VwPklUU00gQ29uZmlndXJhdGlvbiBNYW5hZ2VtZW50PC9Hcm91cD4KICAgICAgICA8U3ViR3JvdXA+R2VuZXJpY0ludGVyZmFjZTo6T3BlcmF0aW9uOjpDb25maWdJdGVtU2VhcmNoPC9TdWJHcm91cD4KICAgICAgICA8U2V0dGluZz4KICAgICAgICAgICAgPFN0cmluZyBSZWdleD0iIj5ybzwvU3RyaW5nPgogICAgICAgIDwvU2V0dGluZz4KICAgIDwvQ29uZmlnSXRlbT4KICAgIDxDb25maWdJdGVtIE5hbWU9IkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6Q29uZmlnSXRlbUNyZWF0ZSMjI1Blcm1pc3Npb24iIFJlcXVpcmVkPSIxIiBWYWxpZD0iMSI+CiAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+RGVmaW5lcyBSZXF1aXJlZCBwZXJtaXNzaW9ucyB0byBjcmVhdGUgSVRTTSBjb25maWd1cmF0aW9uIGl0ZW1zIHVzaW5nIHRoZSBHZW5lcmljIEludGVyZmFjZS48L0Rlc2NyaXB0aW9uPgogICAgICAgIDxHcm91cD5JVFNNIENvbmZpZ3VyYXRpb24gTWFuYWdlbWVudDwvR3JvdXA+CiAgICAgICAgPFN1Ykdyb3VwPkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6Q29uZmlnSXRlbUNyZWF0ZTwvU3ViR3JvdXA+CiAgICAgICAgPFNldHRpbmc+CiAgICAgICAgICAgIDxTdHJpbmcgUmVnZXg9IiI+cnc8L1N0cmluZz4KICAgICAgICA8L1NldHRpbmc+CiAgICA8L0NvbmZpZ0l0ZW0+CiAgICA8Q29uZmlnSXRlbSBOYW1lPSJHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbmZpZ0l0ZW1VcGRhdGUjIyNQZXJtaXNzaW9uIiBSZXF1aXJlZD0iMSIgVmFsaWQ9IjEiPgogICAgICAgIDxEZXNjcmlwdGlvbiBUcmFuc2xhdGFibGU9IjEiPkRlZmluZXMgUmVxdWlyZWQgcGVybWlzc2lvbnMgdG8gdXBkYXRlIElUU00gY29uZmlndXJhdGlvbiBpdGVtcyB1c2luZyB0aGUgR2VuZXJpYyBJbnRlcmZhY2UuPC9EZXNjcmlwdGlvbj4KICAgICAgICA8R3JvdXA+SVRTTSBDb25maWd1cmF0aW9uIE1hbmFnZW1lbnQ8L0dyb3VwPgogICAgICAgIDxTdWJHcm91cD5HZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbmZpZ0l0ZW1VcGRhdGU8L1N1Ykdyb3VwPgogICAgICAgIDxTZXR0aW5nPgogICAgICAgICAgICA8U3RyaW5nIFJlZ2V4PSIiPnJ3PC9TdHJpbmc+CiAgICAgICAgPC9TZXR0aW5nPgogICAgPC9Db25maWdJdGVtPgo8L290cnNfY29uZmlnPgo=</File>
        <File Location="Kernel/GenericInterface/Operation/ConfigItem/Common.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/GenericInterface/Operation/ConfigItem/ConfigItemCreate.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/GenericInterface/Operation/ConfigItem/ConfigItemGet.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/GenericInterface/Operation/ConfigItem/ConfigItemSearch.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/GenericInterface/Operation/ConfigItem/ConfigItemUpdate.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/bg_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/cs_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/da_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/de_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/en_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9MYW5ndWFnZS9lbl9JVFNNQ29uZmlndXJhdGlvbk1hbmFnZW1lbnQucG0gLSB0aGUgZW5nbGlzaCB0cmFuc2xhdGlvbiBvZiBJVFNNQ29uZmlnSXRlbQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE1IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpMYW5ndWFnZTo6ZW5fSVRTTUNvbmZpZ3VyYXRpb25NYW5hZ2VtZW50OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwp1c2UgdXRmODsKCnN1YiBEYXRhIHsKICAgIG15ICRTZWxmID0gc2hpZnQ7CgogICAgbXkgJExhbmcgPSAkU2VsZi0+e1RyYW5zbGF0aW9ufTsKCiAgICByZXR1cm4gaWYgcmVmICRMYW5nIG5lICdIQVNIJzsKCiAgICAkTGFuZy0+eydDSUhpc3Rvcnk6OkNvbmZpZ0l0ZW1DcmVhdGUnfSAgICAgICAgICAgID0gJ05ldyBDb25maWdJdGVtIChJRD0lcyknOwogICAgJExhbmctPnsnQ0lIaXN0b3J5OjpWZXJzaW9uQ3JlYXRlJ30gICAgICAgICAgICAgICA9ICdOZXcgdmVyc2lvbiAoSUQ9JXMpJzsKICAgICRMYW5nLT57J0NJSGlzdG9yeTo6RGVwbG95bWVudFN0YXRlVXBkYXRlJ30gICAgICAgPSAnRGVwbG95bWVudCBzdGF0ZSB1cGRhdGVkIChuZXc9JXM7IG9sZD0lcyknOwogICAgJExhbmctPnsnQ0lIaXN0b3J5OjpJbmNpZGVudFN0YXRlVXBkYXRlJ30gICAgICAgICA9ICdJbmNpZGVudCBzdGF0ZSB1cGRhdGVkIChuZXc9JXM7IG9sZD0lcyknOwogICAgJExhbmctPnsnQ0lIaXN0b3J5OjpDb25maWdJdGVtRGVsZXRlJ30gICAgICAgICAgICA9ICdDb25maWdJdGVtIChJRD0lcykgZGVsZXRlZCc7CiAgICAkTGFuZy0+eydDSUhpc3Rvcnk6OkxpbmtBZGQnfSAgICAgICAgICAgICAgICAgICAgID0gJ0xpbmsgdG8gJXMgKHR5cGU9JXMpIGFkZGVkJzsKICAgICRMYW5nLT57J0NJSGlzdG9yeTo6TGlua0RlbGV0ZSd9ICAgICAgICAgICAgICAgICAgPSAnTGluayB0byAlcyAodHlwZT0lcykgZGVsZXRlZCc7CiAgICAkTGFuZy0+eydDSUhpc3Rvcnk6OkRlZmluaXRpb25VcGRhdGUnfSAgICAgICAgICAgID0gJ0NvbmZpZ0l0ZW1zXCcgZGVmaW5pdGlvbiB1cGRhdGVkIChJRD0lcyknOwogICAgJExhbmctPnsnQ0lIaXN0b3J5OjpOYW1lVXBkYXRlJ30gICAgICAgICAgICAgICAgICA9ICdOYW1lIHVwZGF0ZWQgKG5ldz0lczsgb2xkPSVzKSc7CiAgICAkTGFuZy0+eydDSUhpc3Rvcnk6OlZhbHVlVXBkYXRlJ30gICAgICAgICAgICAgICAgID0gJ0F0dHJpYnV0ZSAlcyB1cGRhdGVkIGZyb20gIiVzIiB0byAiJXMiJzsKICAgICRMYW5nLT57J0NJSGlzdG9yeTo6VmVyc2lvbkRlbGV0ZSd9ICAgICAgICAgICAgICAgPSAnVmVyc2lvbiAlcyBkZWxldGVkJzsKCiAgICAkTGFuZy0+eydEZXZlbG9wZXIgTGljZW5jZSd9ICAgICAgICAgICAgICAgICAgICAgID0gJ0RldmVsb3BlciBMaWNlbnNlJzsKICAgICRMYW5nLT57J0VudGVycHJpc2UgTGljZW5jZSd9ICAgICAgICAgICAgICAgICAgICAgPSAnRW50ZXJwcmlzZSBMaWNlbnNlJzsKICAgICRMYW5nLT57J1NpbmdsZSBMaWNlbmNlJ30gICAgICAgICAgICAgICAgICAgICAgICAgPSAnU2luZ2xlIExpY2Vuc2UnOwogICAgJExhbmctPnsnVm9sdW1lIExpY2VuY2UnfSAgICAgICAgICAgICAgICAgICAgICAgICA9ICdWb2x1bWUgTGljZW5zZSc7CiAgICAkTGFuZy0+eydMaWNlbmNlIFR5cGUnfSAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0xpY2Vuc2UgVHlwZSc7CiAgICAkTGFuZy0+eydMaWNlbmNlIEtleSd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gJ0xpY2Vuc2UgS2V5JzsKICAgICRMYW5nLT57J0xpY2VuY2UgS2V5OjpRdWFudGl0eSd9ICAgICAgICAgICAgICAgICAgPSAnTGljZW5zZSBLZXk6OlF1YW50aXR5JzsKICAgICRMYW5nLT57J0xpY2VuY2UgS2V5OjpFeHBpcmF0aW9uIERhdGUnfSAgICAgICAgICAgPSAnTGljZW5zZSBLZXk6OkV4cGlyYXRpb24gRGF0ZSc7CgogICAgcmV0dXJuIDE7Cn0KCjE7Cg==</File>
        <File Location="Kernel/Language/en_CA_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/en_GB_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/es_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/fa_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/fr_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/it_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/ja_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9MYW5ndWFnZS9qYV9JVFNNQ29uZmlndXJhdGlvbk1hbmFnZW1lbnQucG0gLSB0cmFuc2xhdGlvbiBmaWxlCiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTUgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Okxhbmd1YWdlOjpqYV9JVFNNQ29uZmlndXJhdGlvbk1hbmFnZW1lbnQ7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7CnVzZSB1dGY4OwoKc3ViIERhdGEgewogICAgbXkgJFNlbGYgPSBzaGlmdDsKCiAgICAjIFRlbXBsYXRlOiBBQUFJVFNNQ29uZmlnSXRlbQogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQWRkcmVzcyd9ID0gJ+OCouODieODrOOCuSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydBZG1pbiBUb29sJ30gPSAn566h55CG44OE44O844OrJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0JhY2t1cCBEZXZpY2UnfSA9ICfjg5Djg4Pjgq/jgqLjg4Pjg5fjg7vjg4fjg5DjgqTjgrknOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQmVhbWVyJ30gPSAn44OX44Ot44K444Kn44Kv44K/44O8JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0J1aWxkaW5nJ30gPSAn5qeL56+JJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NJSGlzdG9yeTo6Q29uZmlnSXRlbUNyZWF0ZSd9ID0gJ0NJSGlzdG9yeTo6Q29uZmlnSXRlbUNyZWF0ZSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDSUhpc3Rvcnk6OkNvbmZpZ0l0ZW1EZWxldGUnfSA9ICdDSUhpc3Rvcnk6OkNvbmZpZ0l0ZW1EZWxldGUnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ0lIaXN0b3J5OjpEZWZpbml0aW9uVXBkYXRlJ30gPSAnQ0lIaXN0b3J5OjpEZWZpbml0aW9uVXBkYXRlJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NJSGlzdG9yeTo6RGVwbG95bWVudFN0YXRlVXBkYXRlJ30gPSAnQ0lIaXN0b3J5OjpEZXBsb3ltZW50U3RhdGVVcGRhdGUnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ0lIaXN0b3J5OjpJbmNpZGVudFN0YXRlVXBkYXRlJ30gPSAnQ0lIaXN0b3J5OjpJbmNpZGVudFN0YXRlVXBkYXRlJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NJSGlzdG9yeTo6TGlua0FkZCd9ID0gJ0NJSGlzdG9yeTo6TGlua0FkZCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDSUhpc3Rvcnk6OkxpbmtEZWxldGUnfSA9ICdDSUhpc3Rvcnk6OkxpbmtEZWxldGUnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ0lIaXN0b3J5OjpOYW1lVXBkYXRlJ30gPSAnQ0lIaXN0b3J5OjpOYW1lVXBkYXRlJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NJSGlzdG9yeTo6VmFsdWVVcGRhdGUnfSA9ICdDSUhpc3Rvcnk6OlZhbHVlVXBkYXRlJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NJSGlzdG9yeTo6VmVyc2lvbkNyZWF0ZSd9ID0gJ0NJSGlzdG9yeTo6VmVyc2lvbkNyZWF0ZSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDSUhpc3Rvcnk6OlZlcnNpb25EZWxldGUnfSA9ICdDSUhpc3Rvcnk6OlZlcnNpb25EZWxldGUnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ0lIaXN0b3J5OjpBdHRhY2htZW50QWRkJ30gPSAnQ0lIaXN0b3J5OjpBdHRhY2htZW50QWRkJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NJSGlzdG9yeTo6QXR0YWNobWVudERlbGV0ZSd9ID0gJ0NJSGlzdG9yeTo6QXR0YWNobWVudERlbGV0ZSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDUFUnfSA9ICdDUFUnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2FtZXJhJ30gPSAn44Kr44Oh44OpJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NhcGFjaXR5J30gPSAn5a656YePJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NoYW5nZSBEZWZpbml0aW9uJ30gPSAn5a6a576p44Gu5aSJ5pu0JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NoYW5nZSBvZiBkZWZpbml0aW9uIGZhaWxlZCEgU2VlIFN5c3RlbSBMb2cgZm9yIGRldGFpbHMuJ30gPSAn5a6a576p44Gu5aSJ5pu044Gr5aSx5pWX44GX44G+44GX44Gf44CC6Kmz57Sw44Gv44K344K544OG44Og44Ot44Kw44KS5Y+C54Wn44GX44Gm44GP44Gg44GV44GE44CCJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NsaWVudCBBcHBsaWNhdGlvbid9ID0gJ+OCr+ODqeOCpOOCouODs+ODiOOCveODleODiCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDbGllbnQgT1MnfSA9ICfjgq/jg6njgqTjgqLjg7Pjg4hPUyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDb25jdXJyZW50IFVzZXJzJ30gPSAn5ZCM5pmC5a6f6KGM44Om44O844K2JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NvbmZpZyBJdGVtLUFyZWEnfSA9ICfjgqLjgqTjg4bjg6Djgqjjg6rjgqLjga7oqK3lrponOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29uZmlnIEl0ZW1zIGF2YWlsYWJsZSd9ID0gJ+ioreWumumgheebruOBruWIqeeUqOWPryAvIOS4jeWPryc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDb25maWcgSXRlbXMgc2hvd24nfSA9ICfoqK3lrprpoIXnm67ooajnpLonOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ01EQid9ID0gJ0NNREInOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVtbyd9ID0gJ+ODh+ODoic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZXNrdG9wJ30gPSAn44OH44K544Kv44OI44OD44OXJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RldmVsb3BlciBMaWNlbmNlJ30gPSAn6ZaL55m66ICF44Op44Kk44K744Oz44K5JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RvY2tpbmcgU3RhdGlvbid9ID0gJ+ODieODg+OCreODs+OCsOOCueODhuODvOOCt+ODp+ODsyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEdXBsaWNhdGUnfSA9ICfjgrPjg5Tjg7wnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRW1iZWRkZWQnfSA9ICfln4vjgoHovrzjgb/jgqrjg5bjgrjjgqfjgq/jg4gnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRW1wdHkgZmllbGRzIGluZGljYXRlIHRoYXQgdGhlIGN1cnJlbnQgdmFsdWVzIGFyZSBrZXB0J30gPSAn56m65qyE44Gu6aCF55uu44Gv54++5Zyo44Gu5YCk44GM5L+d5oyB44GV44KM44KL44GT44Go5oSP5ZGz44GX44G+44GZJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0VudGVycHJpc2UgTGljZW5jZSd9ID0gJ+OCqOODs+OCv+ODvOODl+ODqeOCpOOCuuODu+ODqeOCpOOCu+ODs+OCuSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydFeHBpcmF0aW9uIERhdGUnfSA9ICfmnInlirnmnJ/pmZAnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRXhwaXJlZCd9ID0gJ+acn+mZkOWIh+OCjCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydGbG9vcid9ID0gJ+WIh+aNqOOBpic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydGcmVld2FyZSd9ID0gJ+ODleODquODvOOCpuOCp+OCoic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydHU00nfSA9ICdHU00nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnR2F0ZXdheSd9ID0gJ+OCsuODvOODiOOCpuOCp+OCpCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydHcmFwaGljIEFkYXB0ZXInfSA9ICfjgrDjg6njg5XjgqPjg4Pjgq/jgqLjg4Djg5fjgr8nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnSGFyZCBEaXNrJ30gPSAn44OP44O844OJ44OH44Kj44K544KvJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0hhcmQgRGlzazo6Q2FwYWNpdHknfSA9ICfjg4/jg7zjg4njg4fjgqPjgrnjgq/lrrnph48nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnSGlkZSBWZXJzaW9ucyd9ID0gJ+ODkOODvOOCuOODp+ODs+OCkumdnuihqOekuic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydJUCBBZGRyZXNzJ30gPSAnSVAg44Ki44OJ44Os44K5JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0lQIG92ZXIgREhDUCd9ID0gJ0RIQ1DmnInlirknOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnSVQgRmFjaWxpdHknfSA9ICdJVOODleOCoeOCt+ODquODhuOCoyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydJbmFjdGl2ZSd9ID0gJ+eEoeWKueOBric7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydJbmNpZGVudCd9ID0gJ+OCpOODs+OCt+ODh+ODs+ODiCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydJbnN0YWxsIERhdGUnfSA9ICfjgqTjg7Pjgrnjg4jjg7zjg6vml6Xku5gnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnS2V5Ym9hcmQnfSA9ICfjgq3jg7zjg5zjg7zjg4knOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTEFOJ30gPSAnTEFOJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0xhcHRvcCd9ID0gJ+ODjuODvOODiFBDJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0xhc3QgQ2hhbmdlJ30gPSAn5pyA5paw44Gu5aSJ5pu0JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0xpY2VuY2UgS2V5J30gPSAn44Op44Kk44K744Oz44K544Kt44O8JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0xpY2VuY2UgS2V5OjpFeHBpcmF0aW9uIERhdGUnfSA9ICfjg6njgqTjgrvjg7Pjgrnjgq3jg7zjga7mnInlirnmnJ/pmZAnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTGljZW5jZSBLZXk6OlF1YW50aXR5J30gPSAn44Op44Kk44K744Oz44K544Kt44O844Gu5pWwJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0xpY2VuY2UgVHlwZSd9ID0gJ+ODqeOCpOOCu+ODs+OCueOCv+OCpOODlyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydNYWludGVuYW5jZSd9ID0gJ+ODoeODs+ODhuODiuODs+OCuSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydNYXhpbXVtIG51bWJlciBvZiBvbmUgZWxlbWVudCd9ID0gJ+S4gOOCqOODrOODoeODs+ODiOOBguOBn+OCiuOBruacgOWkp+aVsCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydNZWRpYSd9ID0gJ+ODoeODh+OCo+OCoic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydNaWRkbGV3YXJlJ30gPSAn44Of44OJ44Or44Km44Kn44KiJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J01vZGVsJ30gPSAn44Oi44OH44OrJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J01vZGVtJ30gPSAn44Oi44OH44OgJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J01vbml0b3InfSA9ICfjg6Ljg4vjgr8nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTW91c2UnfSA9ICfjg57jgqbjgrknOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTmV0d29yayBBZGFwdGVyJ30gPSAn44ON44OD44OI44Ov44O844Kv44Ki44OA44OX44K/JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J05ldHdvcmsgQWRhcHRlcjo6SVAgQWRkcmVzcyd9ID0gJ+ODjeODg+ODiOODr+ODvOOCr+OCouODgOODl+OCvzo6SVAg44Ki44OJ44Os44K5JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J05ldHdvcmsgQWRhcHRlcjo6SVAgb3ZlciBESENQJ30gPSAn44ON44OD44OI44Ov44O844Kv44O7REhDUOacieWKuSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydOZXR3b3JrIEFkZHJlc3MnfSA9ICfjg43jg4Pjg4jjg6/jg7zjgq/jgqLjg4njg6zjgrknOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTmV0d29yayBBZGRyZXNzOjpHYXRld2F5J30gPSAn44OH44OV44Kp44Or44OI44Ky44O844OI44Km44Kn44KkJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J05ldHdvcmsgQWRkcmVzczo6U3VibmV0IE1hc2snfSA9ICfjgrXjg5bjg43jg4Pjg4jjg57jgrnjgq8nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnT3BlbiBTb3VyY2UnfSA9ICfjgqrjg7zjg5fjg7Pjgr3jg7zjgrknOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnT3BlcmF0aW9uYWwnfSA9ICfpgYvnlKgnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnT3RoZXInfSA9ICfku5YnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnT3RoZXIgRXF1aXBtZW50J30gPSAn44Gd44Gu5LuW44Gu5qmf5ZmoJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J091dGxldCd9ID0gJ+OCouOCpuODiOODrOODg+ODiCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQQ01DSUEgQ2FyZCd9ID0gJ1BDTUNJQSDjgqvjg7zjg4knOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUERBJ30gPSAnUERBJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1BlciBOb2RlJ30gPSAn44OO44O844OJ5q+OJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1BlciBQcm9jZXNzb3InfSA9ICfjg5fjg63jgrvjg4PjgrXmr44nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUGVyIFNlcnZlcid9ID0gJ+OCteODvOODkOavjic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQZXIgVXNlcid9ID0gJ+ODpuODvOOCtuavjic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQaG9uZSAxJ30gPSAn6Zu76KmxIDEnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUGhvbmUgMid9ID0gJ+mbu+ipsSAyJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1BpbG90J30gPSAn44OR44Kk44Ot44OD44OIJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1BsYW5uZWQnfSA9ICfoqIjnlLsnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUHJpbnRlcid9ID0gJ+ODl+ODquODs+OCvyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQcm9kdWN0aW9uJ30gPSAn55Sf55SjJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1F1YW50aXR5J30gPSAn5pWw6YePJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1JhY2snfSA9ICfjg6njg4Pjgq8nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUmFtJ30gPSAnUkFNJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1JlcGFpcid9ID0gJ+S/rueQhic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydSZXRpcmVkJ30gPSAn5byV6YCAJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1Jldmlldyd9ID0gJ+ODrOODk+ODpeODvCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydSb29tJ30gPSAn5a6k5YaFJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1JvdXRlcid9ID0gJ+ODq+ODvOOCvyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTY2FubmVyJ30gPSAn44K544Kt44Oj44OKJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1NlYXJjaCBDb25maWcgSXRlbXMnfSA9ICfoqK3lrprpoIXnm67jga7mpJzntKInOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2VjdXJpdHkgRGV2aWNlJ30gPSAn44K744Kt44Ol44Oq44OG44Kj44OH44OQ44Kk44K5JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1NlcmlhbCBOdW1iZXInfSA9ICfjgrfjg6rjgqLjg6vjg4rjg7Pjg5Djg7wnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2VydmVyJ30gPSAn44K144O844OQJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1NlcnZlciBBcHBsaWNhdGlvbid9ID0gJ+OCteODvOODkOOCveODleODiCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTZXJ2ZXIgT1MnfSA9ICfjgrXjg7zjg5BPUyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTaG93IFZlcnNpb25zJ30gPSAn44OQ44O844K444On44Oz44Gu6KGo56S6JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1NpbmdsZSBMaWNlbmNlJ30gPSAn44K344Oz44Kw44Or44Op44Kk44K744Oz44K5JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1N1Ym5ldCBNYXNrJ30gPSAn44K144OW44ON44OD44OI44Oe44K544KvJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1N3aXRjaCd9ID0gJ+OCueOCpOODg+ODgSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydUZWxjbyd9ID0gJ+mbu+ipseS8muekvic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydUZXN0L1FBJ30gPSAn44OG44K544OIIC8gUUEnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVGhlIGRlcGxveW1lbnQgc3RhdGUgb2YgdGhpcyBjb25maWcgaXRlbSd9ID0gJ+OBk+OBruioreWumumgheebruOBruWxlemWi+eKtuaFiyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydUaGUgaW5jaWRlbnQgc3RhdGUgb2YgdGhpcyBjb25maWcgaXRlbSd9ID0gJ+OBk+OBruioreWumumgheebruOBruOCpOODs+OCt+ODh+ODs+ODiOeKtuaFiyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydUaW1lIFJlc3RyaWN0ZWQnfSA9ICfmmYLplpPliLbpmZAnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVVNCIERldmljZSd9ID0gJ1VTQuODh+ODkOOCpOOCuSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydVbmxpbWl0ZWQnfSA9ICfnhKHliLbpmZAnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVXNlciBUb29sJ30gPSAn44Om44O844K244O744OE44O844OrJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1ZvbHVtZSBMaWNlbmNlJ30gPSAn44Oc44Oq44Ol44O844Og44Op44Kk44K744Oz44K5JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1dMQU4nfSA9ICdXTEFOJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1dMQU4gQWNjZXNzIFBvaW50J30gPSAnV0xBTiDjgqLjgq/jgrvjgrnjg53jgqTjg7Pjg4gnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnV2FycmFudHkgRXhwaXJhdGlvbiBEYXRlJ30gPSAn44Ov44Op44Oz44OG44Kj57WC5LqG5pelJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1dvcmtwbGFjZSd9ID0gJ+iBt+WgtCc7CgogICAgIyBUZW1wbGF0ZTogQWRtaW5JVFNNQ29uZmlnSXRlbQogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29uZmlnIEl0ZW0gTWFuYWdlbWVudCd9ID0gJ+ani+aIkOOCouOCpOODhuODoOeuoeeQhic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDaGFuZ2UgY2xhc3MgZGVmaW5pdGlvbid9ID0gJ+OCr+ODqeOCueWumue+qeOCkuWkieabtCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDb25maWcgSXRlbSd9ID0gJ0NvbmZpZyDjgqLjgqTjg4bjg6AnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2xhc3MnfSA9ICfjgq/jg6njgrknOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVmaW5pdGlvbid9ID0gJ+iomOi/sCc7CgogICAgIyBUZW1wbGF0ZTogQWdlbnRJVFNNQ29uZmlnSXRlbUFkZAogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRmlsdGVyIGZvciBDbGFzc2VzJ30gPSAn44Kv44Op44K544Gn44OV44Kj44Or44K/JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1NlbGVjdCBhIENsYXNzIGZyb20gdGhlIGxpc3QgdG8gY3JlYXRlIGEgbmV3IENvbmZpZyBJdGVtLid9ID0gJ+aWsOimj+OBruani+aIkOOCouOCpOODhuODoOOCkuS9nOaIkOOBmeOCi+OBq+OBr+OAgeODquOCueODiOOBi+OCieOCr+ODqeOCueOCkumBuOaKnuOBl+OBpuOBj+OBoOOBleOBhOOAgic7CgogICAgIyBUZW1wbGF0ZTogQWdlbnRJVFNNQ29uZmlnSXRlbUJ1bGsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0lUU00gQ29uZmlnSXRlbSBCdWxrIEFjdGlvbid9ID0gJ0lUU00g5aSJ5pu044Ki44Kk44OG44Og5LiA5ous44Ki44Kv44K344On44OzJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlcGxveW1lbnQgc3RhdGUnfSA9ICfjg4fjg5fjg63jgqTjg6Hjg7Pjg4jnirbms4EnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnSW5jaWRlbnQgc3RhdGUnfSA9ICfjgqTjg7Pjgrfjg4fjg7Pjg4jnirbms4EnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTGluayB0byBhbm90aGVyJ30gPSAn5LuW44Go44Oq44Oz44Kv44GZ44KLJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0ludmFsaWQgQ29uZmlndXJhdGlvbiBJdGVtIG51bWJlciEnfSA9ICfjgrPjg7Pjg5XjgqPjgrDjg6zjg7zjgrfjg6fjg7PjgqLjgqTjg4bjg6Djga7lgKTjgYzkuI3mraPjgafjgZkhJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1RoZSBudW1iZXIgb2YgYW5vdGhlciBDb25maWd1cmF0aW9uIEl0ZW0gdG8gbGluayB3aXRoLid9ID0gJ+S7luOBruani+aIkOOCouOCpOODhuODoOOBuOOBruODquODs+OCr+aVsCc7CgogICAgIyBUZW1wbGF0ZTogQWdlbnRJVFNNQ29uZmlnSXRlbUVkaXQKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1RoZSBuYW1lIG9mIHRoaXMgY29uZmlnIGl0ZW0nfSA9ICfjgZPjga4g5qeL5oiQ44Ki44Kk44OG44OgIOOBruWQjeensCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydOYW1lIGlzIGFscmVhZHkgaW4gdXNlIGJ5IHRoZSBDb25maWdJdGVtcyB3aXRoIHRoZSBmb2xsb3dpbmcgTnVtYmVyKHMpOiAlcyd9ID0KICAgICAgICAn44GT44Gu5ZCN56ew44Gv44GZ44Gn44GrIE51bWJlcihzKTogJXMg44Gu5qeL5oiQ44Ki44Kk44OG44Og44Gn5L2/55So5Lit44Gn44GZ44CCJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlcGxveW1lbnQgU3RhdGUnfSA9ICflsZXplovnirbms4EnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnSW5jaWRlbnQgU3RhdGUnfSA9ICfjgqTjg7Pjgrfjg4fjg7Pjg4jnirbms4EnOwoKICAgICMgVGVtcGxhdGU6IEFnZW50SVRTTUNvbmZpZ0l0ZW1PdmVydmlld05hdkJhcgogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29udGV4dCBTZXR0aW5ncyd9ID0gJ+OCs+ODs+ODhuOCreOCueODiOOBruioreWumic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDb25maWcgSXRlbXMgcGVyIHBhZ2UnfSA9ICcx44Oa44O844K45q+O44Gu6Kit5a6a6aCF55uuJzsKCiAgICAjIFRlbXBsYXRlOiBBZ2VudElUU01Db25maWdJdGVtT3ZlcnZpZXdTbWFsbAogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVwbG95bWVudCBTdGF0ZSBUeXBlJ30gPSAn5bGV6ZaL44Gu54q25oWLJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0N1cnJlbnQgSW5jaWRlbnQgU3RhdGUnfSA9ICfnj77lnKjjga7jgqTjg7Pjgrfjg4fjg7Pjg4jnirbmhYsnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ3VycmVudCBJbmNpZGVudCBTdGF0ZSBUeXBlJ30gPSAn54++5Zyo44Gu44Kk44Oz44K344OH44Oz44OI54q25oWL44Gu44K/44Kk44OXJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0xhc3QgY2hhbmdlZCd9ID0gJ+acgOe1guWkieabtOaXpeaZgic7CgogICAgIyBUZW1wbGF0ZTogQWdlbnRJVFNNQ29uZmlnSXRlbVByaW50CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDb25maWdJdGVtJ30gPSAn6Kit5a6a6aCF55uuJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NvbmZpZ0l0ZW0tSW5mbyd9ID0gJ+ioreWumumgheebruaDheWgsSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDdXJyZW50IERlcGxveW1lbnQgU3RhdGUnfSA9ICfnj77lnKjjga7lsZXplovnirbmhYsnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTGFzdCBjaGFuZ2VkIGJ5J30gPSAn5pyA57WC5aSJ5pu06ICFJzsKCiAgICAjIFRlbXBsYXRlOiBBZ2VudElUU01Db25maWdJdGVtU2VhcmNoCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDcmVhdGUgTmV3IFRlbXBsYXRlJ30gPSAn5paw6KaP44OG44Oz44OX44Os44O844OI44KS5L2c5oiQ44GZ44KLJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1J1biBTZWFyY2gnfSA9ICfmpJzntKLjgpLlrp/ooYwnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQWxzbyBzZWFyY2ggaW4gcHJldmlvdXMgdmVyc2lvbnM/J30gPSAn44OX44Os44OT44Ol44O85pmC44CB5Lul5YmN44Gu44OQ44O844K444On44Oz44KC5qSc57Si5a++6LGh44Go44GX44G+44GZ44GL77yfJzsKCiAgICAjIFRlbXBsYXRlOiBBZ2VudElUU01Db25maWdJdGVtU2VhcmNoUmVzdWx0UHJpbnQKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NyZWF0ZVRpbWUnfSA9ICfkvZzmiJDml6XmmYInOwoKICAgICMgVGVtcGxhdGU6IEFnZW50SVRTTUNvbmZpZ0l0ZW1ab29tCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDb25maWd1cmF0aW9uIEl0ZW0nfSA9ICfoqbPntLDoqK3lrponOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29uZmlndXJhdGlvbiBJdGVtIEluZm9ybWF0aW9uJ30gPSAn5aSJ5pu044Ki44Kk44OG44Og5oOF5aCxJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1Nob3cgb25lIHZlcnNpb24nfSA9ICfoqqzmmI7jgpLooajnpLonOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2hvdyBhbGwgdmVyc2lvbnMnfSA9ICfjgZnjgbnjgabjga7oqqzmmI7jgpLooajnpLonOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVmVyc2lvbiBJbmNpZGVudCBTdGF0ZSd9ID0gJ+OCpOODs+OCt+ODh+ODs+ODiOeKtuaFiyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydWZXJzaW9uIERlcGxveW1lbnQgU3RhdGUnfSA9ICfjg5Djg7zjgrjjg6fjg7PlsZXplovnirbms4EnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVmVyc2lvbiBOdW1iZXInfSA9ICfjg5Djg7zjgrjjg6fjg7Pjg4rjg7Pjg5Djg7wnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29uZmlndXJhdGlvbiBJdGVtIFZlcnNpb24gRGV0YWlscyd9ID0gJ+ani+aIkOOBruips+e0sCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQcm9wZXJ0eSd9ID0gJ+mgheebric7CgogICAgIyBTeXNDb25maWcKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NoZWNrIGZvciBhIHVuaXF1ZSBuYW1lIG9ubHkgd2l0aGluIHRoZSBzYW1lIENvbmZpZ0l0ZW0gY2xhc3MgKFwnY2xhc3NcJykgb3IgZ2xvYmFsbHkgKFwnZ2xvYmFsXCcpLCB3aGljaCBtZWFucyBldmVyeSBleGlzdGluZyBDb25maWdJdGVtIGlzIHRha2VuIGludG8gYWNjb3VudCB3aGVuIGxvb2tpbmcgZm9yIGR1cGxpY2F0ZXMuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29uZmlnIEl0ZW1zJ30gPSAn5qeL5oiQ44Ki44Kk44OG44OgJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NvbmZpZyBpdGVtIGV2ZW50IG1vZHVsZSB0aGF0IGVuYWJsZXMgbG9nZ2luZyB0byBoaXN0b3J5IGluIHRoZSBhZ2VudCBpbnRlcmZhY2UuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29uZmlndXJhdGlvbiBJdGVtIExpbWl0J30gPSAn5qeL5oiQ44Ki44Kk44OG44Og44Gu5Yi26ZmQJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NvbmZpZ3VyYXRpb24gSXRlbSBsaW1pdCBwZXIgcGFnZSd9ID0gJ+ODmuODvOOCuOOBguOBn+OCiuOBruani+aIkOOCouOCpOODhuODoOOBruWItumZkOWApCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDb25maWd1cmF0aW9uIGl0ZW0gc2VhcmNoIGJhY2tlbmQgcm91dGVyIG9mIHRoZSBhZ2VudCBpbnRlcmZhY2UuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ3JlYXRlIGFuZCBtYW5hZ2UgdGhlIGRlZmluaXRpb25zIGZvciBDb25maWd1cmF0aW9uIEl0ZW1zLid9ID0gJ+ani+aIkOOCouOCpOODhuODoOOBruS9nOaIkOOBvuOBn+OBr+WkieabtCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbmVzIFJlcXVpcmVkIHBlcm1pc3Npb25zIHRvIGNyZWF0ZSBJVFNNIGNvbmZpZ3VyYXRpb24gaXRlbXMgdXNpbmcgdGhlIEdlbmVyaWMgSW50ZXJmYWNlLid9ID0KICAgICAgICAn44K444Kn44ON44Oq44OD44Kv44Kk44Oz44K/44O844OV44Kn44Kk44K544KS55So44GE44GmSVRTTeani+aIkOOCkuS9nOaIkOOBmeOCi+aoqemZkOOCkuWumue+qeOBmeOCi+OAgic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbmVzIFJlcXVpcmVkIHBlcm1pc3Npb25zIHRvIGdldCBJVFNNIGNvbmZpZ3VyYXRpb24gaXRlbXMgdXNpbmcgdGhlIEdlbmVyaWMgSW50ZXJmYWNlLid9ID0KICAgICAgICAn44K444Kn44ON44Oq44OD44Kv44Kk44Oz44K/44O844OV44Kn44Kk44K544KS55So44GE44GmSVRTTeani+aIkOOCkuWPluW+l+OBmeOCi+aoqemZkOOCkuWumue+qeOBmeOCi+OAgic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbmVzIFJlcXVpcmVkIHBlcm1pc3Npb25zIHRvIHNlYXJjaCBJVFNNIGNvbmZpZ3VyYXRpb24gaXRlbXMgdXNpbmcgdGhlIEdlbmVyaWMgSW50ZXJmYWNlLid9ID0KICAgICAgICAn44K444Kn44ON44Oq44OD44Kv44Kk44Oz44K/44O844OV44Kn44Kk44K544KS55So44GE44GmSVRTTeani+aIkOOCkuaknOe0ouOBmeOCi+aoqemZkOOCkuWumue+qeOBmeOCi+OAgic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbmVzIFJlcXVpcmVkIHBlcm1pc3Npb25zIHRvIHVwZGF0ZSBJVFNNIGNvbmZpZ3VyYXRpb24gaXRlbXMgdXNpbmcgdGhlIEdlbmVyaWMgSW50ZXJmYWNlLid9ID0KICAgICAgICAn44K444Kn44ON44Oq44OD44Kv44Kk44Oz44K/44O844OV44Kn44Kk44K544KS55So44GE44GmSVRTTeani+aIkOOCkuWkieabtOOBmeOCi+aoqemZkOOCkuWumue+qeOBmeOCi+OAgic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbmVzIGFuIG92ZXJ2aWV3IG1vZHVsZSB0byBzaG93IHRoZSBzbWFsbCB2aWV3IG9mIGEgY29uZmlndXJhdGlvbiBpdGVtIGxpc3QuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVmaW5lcyByZWd1bGFyIGV4cHJlc3Npb25zIGluZGl2aWR1YWxseSBmb3IgZWFjaCBDb25maWdJdGVtIGNsYXNzIHRvIGNoZWNrIHRoZSBDb25maWdJdGVtIG5hbWUgYW5kIHRvIHNob3cgY29ycmVzcG9uZGluZyBlcnJvciBtZXNzYWdlcy4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbmVzIHRoZSBkZWZhdWx0IHN1Ym9iamVjdCBvZiB0aGUgY2xhc3MgXCdJVFNNQ29uZmlnSXRlbVwnLid9ID0KICAgICAgICAnSVRTTUNvbmZpZ0l0ZW3jgq/jg6njgrnjga7jg4fjg5Xjgqnjg6vjg4jjg7vjgrXjg5bjgqrjg5bjgrjjgqfjgq/jg4jjgpLlrprnvqnjgZnjgovjgIInOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVmaW5lcyB0aGUgbnVtYmVyIG9mIHJvd3MgZm9yIHRoZSBDSSBkZWZpbml0aW9uIGVkaXRvciBpbiB0aGUgYWRtaW4gaW50ZXJmYWNlLid9ID0KICAgICAgICAn566h55CG44Kk44Oz44K/44O844OV44Kn44Kk44K5IENsIOWumue+qeOCqOODh+OCo+OCv+OBruihjOaVsOOCkuWumue+qeOBmeOCi+OAgic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbmVzIHRoZSBzZWFyY2ggbGltaXQgZm9yIHRoZSBBZ2VudElUU01Db25maWdJdGVtIHNjcmVlbi4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbmVzIHRoZSBzZWFyY2ggbGltaXQgZm9yIHRoZSBBZ2VudElUU01Db25maWdJdGVtU2VhcmNoIHNjcmVlbi4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbmVzIHRoZSBzaG93biBjb2x1bW5zIGluIHRoZSBjb25maWcgaXRlbSBvdmVydmlldy4gVGhpcyBvcHRpb24gaGFzIG5vIGVmZmVjdCBvbiB0aGUgcG9zaXRpb24gb2YgdGhlIGNvbHVtbi4gTm90ZTogQ2xhc3MgY29sdW1uIGlzIGFsd2F5cyBhdmFpbGFibGUgaWYgZmlsdGVyIFwnQWxsXCcgaXMgc2VsZWN0ZWQuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVmaW5lcyB0aGUgc2hvd24gY29sdW1ucyBpbiB0aGUgY29uZmlnIGl0ZW0gc2VhcmNoLiBUaGlzIG9wdGlvbiBoYXMgbm8gZWZmZWN0IG9uIHRoZSBwb3NpdGlvbiBvZiB0aGUgY29sdW1uLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluZXMgdGhlIHNob3duIGNvbHVtbnMgb2YgQ0lzIGluIHRoZSBjb25maWcgaXRlbSBvdmVydmlldyBkZXBlbmRpbmcgb24gdGhlIENJIGNsYXNzLiBFYWNoIGVudHJ5IG11c3QgYmUgcHJlZml4ZWQgd2l0aCB0aGUgY2xhc3MgbmFtZSBhbmQgZG91YmxlIGNvbG9ucyAoaS5lLiBDb21wdXRlcjo6KS4gVGhlcmUgYXJlIGEgZmV3IENJLUF0dHJpYnV0ZXMgdGhhdCBhcmUgY29tbW9uIHRvIGFsbCBDSXMgKGV4YW1wbGUgZm9yIHRoZSBjbGFzcyBDb21wdXRlcjogQ29tcHV0ZXI6Ok5hbWUsIENvbXB1dGVyOjpDdXJEZXBsU3RhdGUsIENvbXB1dGVyOjpDcmVhdGVUaW1lKS4gVG8gc2hvdyBpbmRpdmlkdWFsIENJLUF0dHJpYnV0ZXMgYXMgZGVmaW5lZCBpbiB0aGUgQ0ktRGVmaW5pdGlvbiwgdGhlIGZvbGxvd2luZyBzY2hlbWUgbXVzdCBiZSB1c2VkIChleGFtcGxlIGZvciB0aGUgY2xhc3MgQ29tcHV0ZXIpOiBDb21wdXRlcjo6SGFyZERpc2s6OjEsIENvbXB1dGVyOjpIYXJkRGlzazo6MTo6Q2FwYWNpdHk6OjEsIENvbXB1dGVyOjpIYXJkRGlzazo6MiwgQ29tcHV0ZXI6OkhhcmREaXNrOjoyOjpDYXBhY2l0eTo6MS4gSWYgdGhlcmUgaXMgbm8gZW50cnkgZm9yIGEgQ0kgY2xhc3MsIHRoZW4gdGhlIGRlZmF1bHQgY29sdW1ucyBhcmUgc2hvd24gYXMgZGVmaW5lZCBpbiB0aGUgc2V0dGluZyBJVFNNQ29uZmlnSXRlbTo6RnJvbnRlbmQ6OkFnZW50SVRTTUNvbmZpZ0l0ZW0jIyNTaG93Q29sdW1ucy4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbmVzIHRoZSBzaG93biBjb2x1bW5zIG9mIENJcyBpbiB0aGUgY29uZmlnIGl0ZW0gc2VhcmNoIGRlcGVuZGluZyBvbiB0aGUgQ0kgY2xhc3MuIEVhY2ggZW50cnkgbXVzdCBiZSBwcmVmaXhlZCB3aXRoIHRoZSBjbGFzcyBuYW1lIGFuZCBkb3VibGUgY29sb25zIChpLmUuIENvbXB1dGVyOjopLiBUaGVyZSBhcmUgYSBmZXcgQ0ktQXR0cmlidXRlcyB0aGF0IGFyZSBjb21tb24gdG8gYWxsIENJcyAoZXhhbXBsZSBmb3IgdGhlIGNsYXNzIENvbXB1dGVyOiBDb21wdXRlcjo6TmFtZSwgQ29tcHV0ZXI6OkN1ckRlcGxTdGF0ZSwgQ29tcHV0ZXI6OkNyZWF0ZVRpbWUpLiBUbyBzaG93IGluZGl2aWR1YWwgQ0ktQXR0cmlidXRlcyBhcyBkZWZpbmVkIGluIHRoZSBDSS1EZWZpbml0aW9uLCB0aGUgZm9sbG93aW5nIHNjaGVtZSBtdXN0IGJlIHVzZWQgKGV4YW1wbGUgZm9yIHRoZSBjbGFzcyBDb21wdXRlcik6IENvbXB1dGVyOjpIYXJkRGlzazo6MSwgQ29tcHV0ZXI6OkhhcmREaXNrOjoxOjpDYXBhY2l0eTo6MSwgQ29tcHV0ZXI6OkhhcmREaXNrOjoyLCBDb21wdXRlcjo6SGFyZERpc2s6OjI6OkNhcGFjaXR5OjoxLiBJZiB0aGVyZSBpcyBubyBlbnRyeSBmb3IgYSBDSSBjbGFzcywgdGhlbiB0aGUgZGVmYXVsdCBjb2x1bW5zIGFyZSBzaG93biBhcyBkZWZpbmVkIGluIHRoZSBzZXR0aW5nIElUU01Db25maWdJdGVtOjpGcm9udGVuZDo6QWdlbnRJVFNNQ29uZmlnSXRlbSMjI1Nob3dDb2x1bW5zLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluZXMgdGhlIHNob3duIGNvbHVtbnMgb2YgQ0lzIGluIHRoZSBsaW5rIHRhYmxlIGNvbXBsZXggdmlldywgZGVwZW5kaW5nIG9uIHRoZSBDSSBjbGFzcy4gRWFjaCBlbnRyeSBtdXN0IGJlIHByZWZpeGVkIHdpdGggdGhlIGNsYXNzIG5hbWUgYW5kIGRvdWJsZSBjb2xvbnMgKGkuZS4gQ29tcHV0ZXI6OikuIFRoZXJlIGFyZSBhIGZldyBDSS1BdHRyaWJ1dGVzIHRoYXQgY29tbW9uIHRvIGFsbCBDSXMgKGV4YW1wbGUgZm9yIHRoZSBjbGFzcyBDb21wdXRlcjogQ29tcHV0ZXI6Ok5hbWUsIENvbXB1dGVyOjpDdXJEZXBsU3RhdGUsIENvbXB1dGVyOjpDcmVhdGVUaW1lKS4gVG8gc2hvdyBpbmRpdmlkdWFsIENJLUF0dHJpYnV0ZXMgYXMgZGVmaW5lZCBpbiB0aGUgQ0ktRGVmaW5pdGlvbiwgdGhlIGZvbGxvd2luZyBzY2hlbWUgbXVzdCBiZSB1c2VkIChleGFtcGxlIGZvciB0aGUgY2xhc3MgQ29tcHV0ZXIpOiBDb21wdXRlcjo6SGFyZERpc2s6OjEsIENvbXB1dGVyOjpIYXJkRGlzazo6MTo6Q2FwYWNpdHk6OjEsIENvbXB1dGVyOjpIYXJkRGlzazo6MiwgQ29tcHV0ZXI6OkhhcmREaXNrOjoyOjpDYXBhY2l0eTo6MS4gSWYgdGhlcmUgaXMgbm8gZW50cnkgZm9yIGEgQ0kgY2xhc3MsIHRoZW4gdGhlIGRlZmF1bHQgY29sdW1ucyBhcmUgc2hvd24uJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRW5hYmxlcyBjb25maWd1cmF0aW9uIGl0ZW0gYnVsayBhY3Rpb24gZmVhdHVyZSBmb3IgdGhlIGFnZW50IGZyb250ZW5kIHRvIHdvcmsgb24gbW9yZSB0aGFuIG9uZSBjb25maWd1cmF0aW9uIGl0ZW0gYXQgYSB0aW1lLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0VuYWJsZXMgY29uZmlndXJhdGlvbiBpdGVtIGJ1bGsgYWN0aW9uIGZlYXR1cmUgb25seSBmb3IgdGhlIGxpc3RlZCBncm91cHMuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRW5hYmxlcy9kaXNhYmxlcyB0aGUgZnVuY3Rpb25hbGl0eSB0byBjaGVjayBDb25maWdJdGVtcyBmb3IgdW5pcXVlIG5hbWVzLiBCZWZvcmUgZW5hYmxpbmcgdGhpcyBvcHRpb24geW91IHNob3VsZCBjaGVjayB5b3VyIHN5c3RlbSBmb3IgYWxyZWFkeSBleGlzdGluZyBjb25maWcgaXRlbXMgd2l0aCBkdXBsaWNhdGUgbmFtZXMuIFlvdSBjYW4gZG8gdGhpcyB3aXRoIHRoZSBzY3JpcHQgYmluL290cnMuSVRTTUNvbmZpZ0l0ZW1MaXN0RHVwbGljYXRlcy5wbC4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydNb2R1bGUgdG8gY2hlY2sgdGhlIGdyb3VwIHJlc3BvbnNpYmxlIGZvciBhIGNsYXNzLid9ID0gJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydNb2R1bGUgdG8gY2hlY2sgdGhlIGdyb3VwIHJlc3BvbnNpYmxlIGZvciBhIGNvbmZpZ3VyYXRpb24gaXRlbS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydNb2R1bGUgdG8gZ2VuZXJhdGUgSVRTTSBjb25maWcgaXRlbSBzdGF0aXN0aWNzLid9ID0gJ0lUU03mp4vmiJDjgr/jgqTjg4bjg6DntbHoqIjjgpLnlJ/miJDjgZnjgovjgZ/jgoHjga7jg6Ljgrjjg6Xjg7zjg6snOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnT2JqZWN0IGJhY2tlbmQgbW9kdWxlIHJlZ2lzdHJhdGlvbiBmb3IgdGhlIGltcG9ydC9leHBvcnQgbW9kdWxlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1BhcmFtZXRlcnMgZm9yIHRoZSBkZXBsb3ltZW50IHN0YXRlcyBjb2xvciBpbiB0aGUgcHJlZmVyZW5jZXMgdmlldyBvZiB0aGUgYWdlbnQgaW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1BhcmFtZXRlcnMgZm9yIHRoZSBkZXBsb3ltZW50IHN0YXRlcyBpbiB0aGUgcHJlZmVyZW5jZXMgdmlldyBvZiB0aGUgYWdlbnQgaW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1BhcmFtZXRlcnMgZm9yIHRoZSBleGFtcGxlIHBlcm1pc3Npb24gZ3JvdXBzIG9mIHRoZSBnZW5lcmFsIGNhdGFsb2cgYXR0cmlidXRlcy4nfSA9CiAgICAgICAgJ+OCuOOCp+ODjeODqeODq+OCq+OCv+ODreOCsOWxnuaAp+OBruODkeODvOODn+ODg+OCt+ODp+ODs+OCsOODq+ODvOODl+OAgOOBruioreWumuWApCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQYXJhbWV0ZXJzIGZvciB0aGUgcGFnZXMgKGluIHdoaWNoIHRoZSBjb25maWd1cmF0aW9uIGl0ZW1zIGFyZSBzaG93bikuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUmVxdWlyZWQgcGVybWlzc2lvbnMgdG8gdXNlIHRoZSBJVFNNIGNvbmZpZ3VyYXRpb24gaXRlbSBzY3JlZW4gaW4gdGhlIGFnZW50IGludGVyZmFjZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydSZXF1aXJlZCBwZXJtaXNzaW9ucyB0byB1c2UgdGhlIElUU00gY29uZmlndXJhdGlvbiBpdGVtIHNlYXJjaCBzY3JlZW4gaW4gdGhlIGFnZW50IGludGVyZmFjZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydSZXF1aXJlZCBwZXJtaXNzaW9ucyB0byB1c2UgdGhlIElUU00gY29uZmlndXJhdGlvbiBpdGVtIHpvb20gc2NyZWVuIGluIHRoZSBhZ2VudCBpbnRlcmZhY2UuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUmVxdWlyZWQgcGVybWlzc2lvbnMgdG8gdXNlIHRoZSBhZGQgSVRTTSBjb25maWd1cmF0aW9uIGl0ZW0gc2NyZWVuIGluIHRoZSBhZ2VudCBpbnRlcmZhY2UuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUmVxdWlyZWQgcGVybWlzc2lvbnMgdG8gdXNlIHRoZSBlZGl0IElUU00gY29uZmlndXJhdGlvbiBpdGVtIHNjcmVlbiBpbiB0aGUgYWdlbnQgaW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1JlcXVpcmVkIHBlcm1pc3Npb25zIHRvIHVzZSB0aGUgaGlzdG9yeSBJVFNNIGNvbmZpZ3VyYXRpb24gaXRlbSBzY3JlZW4gaW4gdGhlIGFnZW50IGludGVyZmFjZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydSZXF1aXJlZCBwZXJtaXNzaW9ucyB0byB1c2UgdGhlIHByaW50IElUU00gY29uZmlndXJhdGlvbiBpdGVtIHNjcmVlbiBpbiB0aGUgYWdlbnQgaW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1NlbGVjdHMgdGhlIGNvbmZpZ3VyYXRpb24gaXRlbSBudW1iZXIgZ2VuZXJhdG9yIG1vZHVsZS4gIkF1dG9JbmNyZW1lbnQiIGluY3JlbWVudHMgdGhlIGNvbmZpZ3VyYXRpb24gaXRlbSBudW1iZXIsIHRoZSBTeXN0ZW1JRCwgdGhlIENvbmZpZ0l0ZW1DbGFzc0lEIGFuZCB0aGUgY291bnRlciBhcmUgdXNlZC4gVGhlIGZvcm1hdCBpcyAiU3lzdGVtSUQuQ29uZmlnSXRlbUNsYXNzSUQuQ291bnRlciIsIGUuZy4gMTIwNTAwMDAwNCwgMTIwNTAwMDAwNS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTZXRzIHRoZSBkZXBsb3ltZW50IHN0YXRlIGluIHRoZSBjb25maWd1cmF0aW9uIGl0ZW0gYnVsayBzY3JlZW4gb2YgdGhlIGFnZW50IGludGVyZmFjZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTZXRzIHRoZSBpbmNpZGVudCBzdGF0ZSBpbiB0aGUgY29uZmlndXJhdGlvbiBpdGVtIGJ1bGsgc2NyZWVuIG9mIHRoZSBhZ2VudCBpbnRlcmZhY2UuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2hvd3MgYSBsaW5rIGluIHRoZSBtZW51IHRoYXQgYWxsb3dzIGxpbmtpbmcgYSBjb25maWd1cmF0aW9uIGl0ZW0gd2l0aCBhbm90aGVyIG9iamVjdCBpbiB0aGUgY29uZmlnIGl0ZW0gem9vbSB2aWV3IG9mIHRoZSBhZ2VudCBpbnRlcmZhY2UuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2hvd3MgYSBsaW5rIGluIHRoZSBtZW51IHRvIGFjY2VzcyB0aGUgaGlzdG9yeSBvZiBhIGNvbmZpZ3VyYXRpb24gaXRlbSBpbiB0aGUgY29uZmlndXJhdGlvbiBpdGVtIG92ZXJ2aWV3IG9mIHRoZSBhZ2VudCBpbnRlcmZhY2UuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2hvd3MgYSBsaW5rIGluIHRoZSBtZW51IHRvIGFjY2VzcyB0aGUgaGlzdG9yeSBvZiBhIGNvbmZpZ3VyYXRpb24gaXRlbSBpbiB0aGUgaXRzIHpvb20gdmlldyBvZiB0aGUgYWdlbnQgaW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1Nob3dzIGEgbGluayBpbiB0aGUgbWVudSB0byBkdXBsaWNhdGUgYSBjb25maWd1cmF0aW9uIGl0ZW0gaW4gdGhlIGNvbmZpZ3VyYXRpb24gaXRlbSBvdmVydmlldyBvZiB0aGUgYWdlbnQgaW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1Nob3dzIGEgbGluayBpbiB0aGUgbWVudSB0byBkdXBsaWNhdGUgYSBjb25maWd1cmF0aW9uIGl0ZW0gaW4gdGhlIGl0cyB6b29tIHZpZXcgb2YgdGhlIGFnZW50IGludGVyZmFjZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTaG93cyBhIGxpbmsgaW4gdGhlIG1lbnUgdG8gZWRpdCBhIGNvbmZpZ3VyYXRpb24gaXRlbSBpbiB0aGUgaXRzIHpvb20gdmlldyBvZiB0aGUgYWdlbnQgaW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1Nob3dzIGEgbGluayBpbiB0aGUgbWVudSB0byBnbyBiYWNrIGluIHRoZSBjb25maWd1cmF0b24gaXRlbSB6b29tIHZpZXcgb2YgdGhlIGFnZW50IGludGVyZmFjZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTaG93cyBhIGxpbmsgaW4gdGhlIG1lbnUgdG8gcHJpbnQgYSBjb25maWd1cmF0aW9uIGl0ZW0gaW4gdGhlIGl0cyB6b29tIHZpZXcgb2YgdGhlIGFnZW50IGludGVyZmFjZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTaG93cyBhIGxpbmsgaW4gdGhlIG1lbnUgdG8gem9vbSBpbnRvIGEgY29uZmlndXJhdGlvbiBpdGVtIGluIHRoZSBjb25maWd1cmF0aW9uIGl0ZW0gb3ZlcnZpZXcgb2YgdGhlIGFnZW50IGludGVyZmFjZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTaG93cyB0aGUgY29uZmlnIGl0ZW0gaGlzdG9yeSAocmV2ZXJzZSBvcmRlcmVkKSBpbiB0aGUgYWdlbnQgaW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1RoZSBpZGVudGlmaWVyIGZvciBhIGNvbmZpZ3VyYXRpb24gaXRlbSwgZS5nLiBDb25maWdJdGVtIywgTXlDb25maWdJdGVtIy4gVGhlIGRlZmF1bHQgaXMgQ29uZmlnSXRlbSMuJ30gPQogICAgICAgICcnOwoKfQoKMTsK</File>
        <File Location="Kernel/Language/ms_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/nb_NO_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/nl_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/pl_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9MYW5ndWFnZS9wbF9JVFNNQ29uZmlndXJhdGlvbk1hbmFnZW1lbnQucG0gLSB0cmFuc2xhdGlvbiBmaWxlCiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTUgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Okxhbmd1YWdlOjpwbF9JVFNNQ29uZmlndXJhdGlvbk1hbmFnZW1lbnQ7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7CnVzZSB1dGY4OwoKc3ViIERhdGEgewogICAgbXkgJFNlbGYgPSBzaGlmdDsKCiAgICAjIFRlbXBsYXRlOiBBQUFJVFNNQ29uZmlnSXRlbQogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQWRkcmVzcyd9ID0gJ0FkcmVzJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0FkbWluIFRvb2wnfSA9ICdOYXJ6xJlkemllIGFkbWluaXN0cmF0b3Jza2llJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0JhY2t1cCBEZXZpY2UnfSA9ICdVcnrEhWR6ZW5pZSBkbyBiYWNrdXB1JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0JlYW1lcid9ID0gJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydCdWlsZGluZyd9ID0gJ0J1ZHluZWsnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ0lIaXN0b3J5OjpDb25maWdJdGVtQ3JlYXRlJ30gPSAnTm93eSBDSSAoSUQ9JXMpJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NJSGlzdG9yeTo6Q29uZmlnSXRlbURlbGV0ZSd9ID0gJ1VzdW5pxJljaWUgQ0kgKElEPSVzKSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDSUhpc3Rvcnk6OkRlZmluaXRpb25VcGRhdGUnfSA9ICdBa3R1YWxpemFjamEgZGVmaW5pY2ppIENJIChJRD0lcyknOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ0lIaXN0b3J5OjpEZXBsb3ltZW50U3RhdGVVcGRhdGUnfSA9ICdBa3R1YWxpemFjamEgc3RhbnUgd2Ryb8W8ZW5pYSBDSSAobm93eT0lczsgc3Rhcnk9JXMpJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NJSGlzdG9yeTo6SW5jaWRlbnRTdGF0ZVVwZGF0ZSd9ID0gJ0FrdHVhbGl6YWNqYSBzdGFudSB6ZGFyemVuaWEgKG5vd3k9JXM7IHN0YXJ5PSVzKSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDSUhpc3Rvcnk6OkxpbmtBZGQnfSA9ICdEb2RhbnkgbGluayBkbyAlcyAoVHlwPSVzKSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDSUhpc3Rvcnk6OkxpbmtEZWxldGUnfSA9ICdVc3VuacSZdHkgbGluayBkbyAlcyAoVHlwPSVzKSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDSUhpc3Rvcnk6Ok5hbWVVcGRhdGUnfSA9ICdBa3R1YWxpemFjamEgbmF6d3kgKG5vd2E9JXM7IHN0YXJhPSVzKSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDSUhpc3Rvcnk6OlZhbHVlVXBkYXRlJ30gPSAnQWt0dWFsaXphY2phIHdhcnRvxZtjaSBhdHJ5YnV0dSAlcyB6ICIlcyIgbmEgIiVzIic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDSUhpc3Rvcnk6OlZlcnNpb25DcmVhdGUnfSA9ICdVdHdvcnplbmllIG5vd2VqIHdlcnNqaSAoSUQ9JXMpJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NJSGlzdG9yeTo6VmVyc2lvbkRlbGV0ZSd9ID0gJ1VzdW5pxJljaWUgd2Vyc2ppICVzJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NJSGlzdG9yeTo6QXR0YWNobWVudEFkZCd9ID0gJ1V0d29yemVuaWUgemHFgsSFY3puaWthICglcyknOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ0lIaXN0b3J5OjpBdHRhY2htZW50RGVsZXRlJ30gPSAnVXN1bmnEmWNpZSB6YcWCxIVjem5pa2EgKCVzKSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDUFUnfSA9ICdQcm9jZXNvcic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDYW1lcmEnfSA9ICdLYW1lcmEnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2FwYWNpdHknfSA9ICdQb2plbW5vxZvEhyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDaGFuZ2UgRGVmaW5pdGlvbid9ID0gJ0RlZmluaWNqYSB6bWlhbnknOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2hhbmdlIG9mIGRlZmluaXRpb24gZmFpbGVkISBTZWUgU3lzdGVtIExvZyBmb3IgZGV0YWlscy4nfSA9ICdabWlhbmEgZGVmaW5pY2ppIG5pZSBwb3dpb2TFgmEgc2nEmSEgU3pjemVnw7PFgnkgem5hamR1asSFIHNpxJkgdyBsb2d1IHN5c3RlbXUuJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NsaWVudCBBcHBsaWNhdGlvbid9ID0gJ0FwbGlrYWNqYSBrbGllbmNrYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDbGllbnQgT1MnfSA9ICdTeXN0ZW0ga2xpZW5ja2knOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29uY3VycmVudCBVc2Vycyd9ID0gJ0plZG5vY3plxZtuaSB1xbx5dGtvd25pY3knOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29uZmlnIEl0ZW0tQXJlYSd9ID0gJ0NJLU9ic3phcic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDb25maWcgSXRlbXMgYXZhaWxhYmxlJ30gPSAnRG9zdMSZcG5lIENJJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NvbmZpZyBJdGVtcyBzaG93bid9ID0gJ1d5xZt3aWV0bG9uZSBDSSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDTURCJ30gPSAnQ01EQic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZW1vJ30gPSAnRGVtbyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZXNrdG9wJ30gPSAnRGVza3RvcCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZXZlbG9wZXIgTGljZW5jZSd9ID0gJ0xpY2VuY2phIGRldmVsb3BlcnNrYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEb2NraW5nIFN0YXRpb24nfSA9ICdTdGFjamEgZG9rdWrEhWNhJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0R1cGxpY2F0ZSd9ID0gJ0R1cGxpa2F0JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0VtYmVkZGVkJ30gPSAnT3NhZHpvbnknOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRW1wdHkgZmllbGRzIGluZGljYXRlIHRoYXQgdGhlIGN1cnJlbnQgdmFsdWVzIGFyZSBrZXB0J30gPSAnUHVzdGUgcG9sYSB6bmFjemFqxIUsIMW8ZSB6YXRyenltYW5lIGLEmWTEhSBiaWXFvMSFY2Ugd2FydG/Fm2NpJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0VudGVycHJpc2UgTGljZW5jZSd9ID0gJ0xpY2VuY2phIEVudGVycHJpc2UnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRXhwaXJhdGlvbiBEYXRlJ30gPSAnRGF0YSB3eWdhxZtuacSZY2lhJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0V4cGlyZWQnfSA9ICdXeWdhc8WCbyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydGbG9vcid9ID0gJ1BpxJl0cm8nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRnJlZXdhcmUnfSA9ICdGcmVld2FyZSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydHU00nfSA9ICdHU00nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnR2F0ZXdheSd9ID0gJ0JyYW1hJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0dyYXBoaWMgQWRhcHRlcid9ID0gJ0thcnRhIGdyYWZpY3puYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydIYXJkIERpc2snfSA9ICdEeXNrIHR3YXJkeSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydIYXJkIERpc2s6OkNhcGFjaXR5J30gPSAnUG9qZW1ub8WbxIcgZHlza3UgdHdhcmRlZ28nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnSGlkZSBWZXJzaW9ucyd9ID0gJ1VrcnlqIHdlcnNqZSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydJUCBBZGRyZXNzJ30gPSAnQWRyZXMgSVAnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnSVAgb3ZlciBESENQJ30gPSAnQWRyZXMgSVAgeiBESENQJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0lUIEZhY2lsaXR5J30gPSAnRHppYcWCIElUJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0luYWN0aXZlJ30gPSAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0luY2lkZW50J30gPSAnWmRhcnplbmllJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0luc3RhbGwgRGF0ZSd9ID0gJ0RhdGEgaW5zdGFsYWNqaSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydLZXlib2FyZCd9ID0gJ0tsYXdpYXR1cmEnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTEFOJ30gPSAnTEFOJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0xhcHRvcCd9ID0gJ0xhcHRvcCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydMYXN0IENoYW5nZSd9ID0gJ09zdGF0bmlhIHptaWFuYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydMaWNlbmNlIEtleSd9ID0gJ0tsdWN6IGxpY2VuY3lqbnknOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTGljZW5jZSBLZXk6OkV4cGlyYXRpb24gRGF0ZSd9ID0gJ0tsdWN6IGxpY2VuY3lqbnk6OkRhdGEgd3lnYcWbbmnEmWNpYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydMaWNlbmNlIEtleTo6UXVhbnRpdHknfSA9ICdLbHVjeiBsaWNlbmN5am55OjpJbG/Fm8SHJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0xpY2VuY2UgVHlwZSd9ID0gJ1R5cCBsaWNlbmNqaSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydNYWludGVuYW5jZSd9ID0gJ1V0cnp5bWFuaWUnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTWF4aW11bSBudW1iZXIgb2Ygb25lIGVsZW1lbnQnfSA9ICdNYWtzeW1hbG5hIGxpY3piYSB3eXN0xIVwaWXFhCBwb2plZG55Y3plZ28gZWxlbWV0bnR1JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J01lZGlhJ30gPSAnTm/Fm25payc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydNaWRkbGV3YXJlJ30gPSAnTWlkZGxld2FyZSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydNb2RlbCd9ID0gJ01vZGVsJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J01vZGVtJ30gPSAnTW9kZW0nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTW9uaXRvcid9ID0gJ01vbml0b3InOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTW91c2UnfSA9ICdNeXN6a2EnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTmV0d29yayBBZGFwdGVyJ30gPSAnS2FydGEgc2llY2lvd2EnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTmV0d29yayBBZGFwdGVyOjpJUCBBZGRyZXNzJ30gPSAnS2FydGEgc2llY2lvd2E6OkFkcmVzIElQJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J05ldHdvcmsgQWRhcHRlcjo6SVAgb3ZlciBESENQJ30gPSAnS2FydGEgc2llY2lvd2E6OkFkcmVzIElQIHogREhDUCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydOZXR3b3JrIEFkZHJlc3MnfSA9ICdBZHJlcyBzaWVjaW93eSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydOZXR3b3JrIEFkZHJlc3M6OkdhdGV3YXknfSA9ICdBZHJlcyBzaWVjaW93eTo6QnJhbWEnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTmV0d29yayBBZGRyZXNzOjpTdWJuZXQgTWFzayd9ID0gJ0FkcmVzIHNpZWNpb3d5OjpNYXNrYSBzaWVjaSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydPcGVuIFNvdXJjZSd9ID0gJ09wZW4gc291cmNlJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J09wZXJhdGlvbmFsJ30gPSAnT3BlcmFjeWpueSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydPdGhlcid9ID0gJ0lubmUnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnT3RoZXIgRXF1aXBtZW50J30gPSAnUG96b3N0YcWCZSB3eXBvc2HFvGVuaWUnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnT3V0bGV0J30gPSAnUHVua3Qgc3ByemVkYcW8eSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQQ01DSUEgQ2FyZCd9ID0gJ0thcnRhIFBDTUNJQSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQREEnfSA9ICdQREEnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUGVyIE5vZGUnfSA9ICdOYSB1cnrEhWR6ZW5pZSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQZXIgUHJvY2Vzc29yJ30gPSAnTmEgcHJvY2Vzb3InOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUGVyIFNlcnZlcid9ID0gJ05hIHNlcndlcic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQZXIgVXNlcid9ID0gJ05hIHXFvHl0a293bmlrYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQaG9uZSAxJ30gPSAnVGVsZWZvbiAxJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1Bob25lIDInfSA9ICdUZWxlZm9uIDInOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUGlsb3QnfSA9ICdQaWxvdGHFvCc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQbGFubmVkJ30gPSAnUGxhbm93YW55JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1ByaW50ZXInfSA9ICdEcnVrYXJrYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQcm9kdWN0aW9uJ30gPSAnUHJvZHVrY2phJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1F1YW50aXR5J30gPSAnSWxvxZvEhyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydSYWNrJ30gPSAnUmFjayc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydSYW0nfSA9ICdSQU0nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUmVwYWlyJ30gPSAnTmFwcmF3YSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydSZXRpcmVkJ30gPSAnV3ljb2ZhbnknOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUmV2aWV3J30gPSAnUHJ6ZWdsxIVkJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1Jvb20nfSA9ICdQb2vDs2onOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUm91dGVyJ30gPSAnUnV0ZXInOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2Nhbm5lcid9ID0gJ1NrYW5lcic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTZWFyY2ggQ29uZmlnIEl0ZW1zJ30gPSAnU3p1a2FqIENJJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1NlY3VyaXR5IERldmljZSd9ID0gJ1VyesSFZHplbmllIHphYmV6cGllY3phasSFY2UnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2VyaWFsIE51bWJlcid9ID0gJ051bWVyIHNlcnlqbnknOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2VydmVyJ30gPSAnU2Vyd2VyJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1NlcnZlciBBcHBsaWNhdGlvbid9ID0gJ0FwbGlrYWNqYSBzZXJ3ZXJvd2EnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2VydmVyIE9TJ30gPSAnU3lzdGVtIHNlcndlcm93eSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTaG93IFZlcnNpb25zJ30gPSAnUG9rYcW8IHdlcnNqZSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTaW5nbGUgTGljZW5jZSd9ID0gJ1BvamVkecWEY3phIGxpY2VuY2phJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1N1Ym5ldCBNYXNrJ30gPSAnTWFza2Egc2llY2knOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU3dpdGNoJ30gPSAnU3dpdGNoJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1RlbGNvJ30gPSAnVGVsY28nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVGVzdC9RQSd9ID0gJ1Rlc3QvUUEnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVGhlIGRlcGxveW1lbnQgc3RhdGUgb2YgdGhpcyBjb25maWcgaXRlbSd9ID0gJ1N0YW4gd2Ryb8W8ZW5pYSB0ZWdvIENJJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1RoZSBpbmNpZGVudCBzdGF0ZSBvZiB0aGlzIGNvbmZpZyBpdGVtJ30gPSAnU3RhbiB6ZGFyemVuaWEgdGVnbyBDSSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydUaW1lIFJlc3RyaWN0ZWQnfSA9ICdDemFzb3dvIG9ncmFuaWN6b25hJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1VTQiBEZXZpY2UnfSA9ICdVcnrEhWR6ZW5pZSBVU0InOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVW5saW1pdGVkJ30gPSAnQmV6IGxpbWl0dSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydVc2VyIFRvb2wnfSA9ICdOYXJ6xJlkemllIHXFvHl0a293bmlrYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydWb2x1bWUgTGljZW5jZSd9ID0gJ1piaW9yY3phIGxpY2VuY2phJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1dMQU4nfSA9ICdXTEFOJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1dMQU4gQWNjZXNzIFBvaW50J30gPSAnQWNjZXNzIFBvaW50JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1dhcnJhbnR5IEV4cGlyYXRpb24gRGF0ZSd9ID0gJ0RhdGEgd3lnYcWbbmnEmWNpYSBnd2FyYW5jamknOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnV29ya3BsYWNlJ30gPSAnTWllanNjZSBwcmFjeSc7CgogICAgIyBUZW1wbGF0ZTogQWRtaW5JVFNNQ29uZmlnSXRlbQogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29uZmlnIEl0ZW0gTWFuYWdlbWVudCd9ID0gJ1phcnrEhWR6YW5pZSBDSSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDaGFuZ2UgY2xhc3MgZGVmaW5pdGlvbid9ID0gJ1ptaWXFhCBkZWZpbmljasSZIGtsYXN5JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NvbmZpZyBJdGVtJ30gPSAnQ0knOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ2xhc3MnfSA9ICdLbGFzYSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbml0aW9uJ30gPSAnRGVmaW5pY2phJzsKCiAgICAjIFRlbXBsYXRlOiBBZ2VudElUU01Db25maWdJdGVtQWRkCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydGaWx0ZXIgZm9yIENsYXNzZXMnfSA9ICdGaWx0ciBkbGEga2xhcyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTZWxlY3QgYSBDbGFzcyBmcm9tIHRoZSBsaXN0IHRvIGNyZWF0ZSBhIG5ldyBDb25maWcgSXRlbS4nfSA9ICdaYXpuYWN6IGtsYXPEmSBuYSBsacWbY2llIGFieSB1dHdvcnp5xIcgbm93ZSBDSS4nOwoKICAgICMgVGVtcGxhdGU6IEFnZW50SVRTTUNvbmZpZ0l0ZW1CdWxrCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydJVFNNIENvbmZpZ0l0ZW0gQnVsayBBY3Rpb24nfSA9ICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVwbG95bWVudCBzdGF0ZSd9ID0gJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydJbmNpZGVudCBzdGF0ZSd9ID0gJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydMaW5rIHRvIGFub3RoZXInfSA9ICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnSW52YWxpZCBDb25maWd1cmF0aW9uIEl0ZW0gbnVtYmVyISd9ID0gJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydUaGUgbnVtYmVyIG9mIGFub3RoZXIgQ29uZmlndXJhdGlvbiBJdGVtIHRvIGxpbmsgd2l0aC4nfSA9ICcnOwoKICAgICMgVGVtcGxhdGU6IEFnZW50SVRTTUNvbmZpZ0l0ZW1FZGl0CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydUaGUgbmFtZSBvZiB0aGlzIGNvbmZpZyBpdGVtJ30gPSAnTmF6d2EgdGVnbyBDSSc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydOYW1lIGlzIGFscmVhZHkgaW4gdXNlIGJ5IHRoZSBDb25maWdJdGVtcyB3aXRoIHRoZSBmb2xsb3dpbmcgTnVtYmVyKHMpOiAlcyd9ID0KICAgICAgICAnTmF6d2EgamVzdCBqdcW8IHXFvHl3YW5hIHByemV6IENJIG8gbmFzdMSZcHVqxIVjeWNoIG51bWVyYWNoOiAlcyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZXBsb3ltZW50IFN0YXRlJ30gPSAnU3RhbiB3ZHJvxbxlbmlhJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0luY2lkZW50IFN0YXRlJ30gPSAnU3RhbiB6ZGFyemVuaWEnOwoKICAgICMgVGVtcGxhdGU6IEFnZW50SVRTTUNvbmZpZ0l0ZW1PdmVydmlld05hdkJhcgogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29udGV4dCBTZXR0aW5ncyd9ID0gJ1VzdGF3aWVuaWEga29udGVrc3R1JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NvbmZpZyBJdGVtcyBwZXIgcGFnZSd9ID0gJ0xpY3piYSBDSSBuYSBzdHJvbmllJzsKCiAgICAjIFRlbXBsYXRlOiBBZ2VudElUU01Db25maWdJdGVtT3ZlcnZpZXdTbWFsbAogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVwbG95bWVudCBTdGF0ZSBUeXBlJ30gPSAnVHlwIHN0YW51IHdkcm/FvGVuaWEnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ3VycmVudCBJbmNpZGVudCBTdGF0ZSd9ID0gJ0FrdHVhbG55IHN0YW4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ3VycmVudCBJbmNpZGVudCBTdGF0ZSBUeXBlJ30gPSAnQWt0dWFsbnkgdHlwIHN0YW51JzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0xhc3QgY2hhbmdlZCd9ID0gJ09zdGF0bmlvIHptaWVuaW9uZSc7CgogICAgIyBUZW1wbGF0ZTogQWdlbnRJVFNNQ29uZmlnSXRlbVByaW50CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDb25maWdJdGVtJ30gPSAnQ0knOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29uZmlnSXRlbS1JbmZvJ30gPSAnQ0ktSW5mbyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDdXJyZW50IERlcGxveW1lbnQgU3RhdGUnfSA9ICdBa3R1YWxueSBzdGFuIHdkcm/FvGVuaWEnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnTGFzdCBjaGFuZ2VkIGJ5J30gPSAnT3N0YXRuaW8gem1pZW5pb25lIHByemV6JzsKCiAgICAjIFRlbXBsYXRlOiBBZ2VudElUU01Db25maWdJdGVtU2VhcmNoCiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDcmVhdGUgTmV3IFRlbXBsYXRlJ30gPSAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1J1biBTZWFyY2gnfSA9ICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQWxzbyBzZWFyY2ggaW4gcHJldmlvdXMgdmVyc2lvbnM/J30gPSAnVXd6Z2zEmWRuacSHIHBvcHJ6ZWRuaWUgd2Vyc2plPyc7CgogICAgIyBUZW1wbGF0ZTogQWdlbnRJVFNNQ29uZmlnSXRlbVNlYXJjaFJlc3VsdFByaW50CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDcmVhdGVUaW1lJ30gPSAnQ3phcyB1dHdvcnplbmlhJzsKCiAgICAjIFRlbXBsYXRlOiBBZ2VudElUU01Db25maWdJdGVtWm9vbQogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29uZmlndXJhdGlvbiBJdGVtJ30gPSAnQ0knOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29uZmlndXJhdGlvbiBJdGVtIEluZm9ybWF0aW9uJ30gPSAnSW5mb3JtYWNqZSBvIENJJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1Nob3cgb25lIHZlcnNpb24nfSA9ICdQb2thxbwgamVkbsSFIHdlcnNqxJkhJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1Nob3cgYWxsIHZlcnNpb25zJ30gPSAnUG9rYcW8IHdzenlzdGtpZSB3ZXJzamUnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVmVyc2lvbiBJbmNpZGVudCBTdGF0ZSd9ID0gJ1N0YW4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVmVyc2lvbiBEZXBsb3ltZW50IFN0YXRlJ30gPSAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1ZlcnNpb24gTnVtYmVyJ30gPSAnV2Vyc2phJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NvbmZpZ3VyYXRpb24gSXRlbSBWZXJzaW9uIERldGFpbHMnfSA9ICdTemN6ZWfDs8WCeSB3ZXJzamkgQ0knOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUHJvcGVydHknfSA9ICdXxYJhxZtjaXdvxZvEhyc7CgogICAgIyBTeXNDb25maWcKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NoZWNrIGZvciBhIHVuaXF1ZSBuYW1lIG9ubHkgd2l0aGluIHRoZSBzYW1lIENvbmZpZ0l0ZW0gY2xhc3MgKFwnY2xhc3NcJykgb3IgZ2xvYmFsbHkgKFwnZ2xvYmFsXCcpLCB3aGljaCBtZWFucyBldmVyeSBleGlzdGluZyBDb25maWdJdGVtIGlzIHRha2VuIGludG8gYWNjb3VudCB3aGVuIGxvb2tpbmcgZm9yIGR1cGxpY2F0ZXMuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29uZmlnIEl0ZW1zJ30gPSAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NvbmZpZyBpdGVtIGV2ZW50IG1vZHVsZSB0aGF0IGVuYWJsZXMgbG9nZ2luZyB0byBoaXN0b3J5IGluIHRoZSBhZ2VudCBpbnRlcmZhY2UuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnQ29uZmlndXJhdGlvbiBJdGVtIExpbWl0J30gPSAnTGltaXQgbGljemJ5IENJJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NvbmZpZ3VyYXRpb24gSXRlbSBsaW1pdCBwZXIgcGFnZSd9ID0gJ0xpbWl0IGxpY3pieSBDSSBuYSBzdHJvbsSZJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0NvbmZpZ3VyYXRpb24gaXRlbSBzZWFyY2ggYmFja2VuZCByb3V0ZXIgb2YgdGhlIGFnZW50IGludGVyZmFjZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydDcmVhdGUgYW5kIG1hbmFnZSB0aGUgZGVmaW5pdGlvbnMgZm9yIENvbmZpZ3VyYXRpb24gSXRlbXMuJ30gPSAnVHdvcnplbmllIGkgemFyesSFZHphbmllIGRlZmluaWNqYW1pIGVsZW1lbnTDs3cga29uZmlndXJhY2ppLic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbmVzIFJlcXVpcmVkIHBlcm1pc3Npb25zIHRvIGNyZWF0ZSBJVFNNIGNvbmZpZ3VyYXRpb24gaXRlbXMgdXNpbmcgdGhlIEdlbmVyaWMgSW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluZXMgUmVxdWlyZWQgcGVybWlzc2lvbnMgdG8gZ2V0IElUU00gY29uZmlndXJhdGlvbiBpdGVtcyB1c2luZyB0aGUgR2VuZXJpYyBJbnRlcmZhY2UuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVmaW5lcyBSZXF1aXJlZCBwZXJtaXNzaW9ucyB0byBzZWFyY2ggSVRTTSBjb25maWd1cmF0aW9uIGl0ZW1zIHVzaW5nIHRoZSBHZW5lcmljIEludGVyZmFjZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbmVzIFJlcXVpcmVkIHBlcm1pc3Npb25zIHRvIHVwZGF0ZSBJVFNNIGNvbmZpZ3VyYXRpb24gaXRlbXMgdXNpbmcgdGhlIEdlbmVyaWMgSW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluZXMgYW4gb3ZlcnZpZXcgbW9kdWxlIHRvIHNob3cgdGhlIHNtYWxsIHZpZXcgb2YgYSBjb25maWd1cmF0aW9uIGl0ZW0gbGlzdC4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbmVzIHJlZ3VsYXIgZXhwcmVzc2lvbnMgaW5kaXZpZHVhbGx5IGZvciBlYWNoIENvbmZpZ0l0ZW0gY2xhc3MgdG8gY2hlY2sgdGhlIENvbmZpZ0l0ZW0gbmFtZSBhbmQgdG8gc2hvdyBjb3JyZXNwb25kaW5nIGVycm9yIG1lc3NhZ2VzLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluZXMgdGhlIGRlZmF1bHQgc3Vib2JqZWN0IG9mIHRoZSBjbGFzcyBcJ0lUU01Db25maWdJdGVtXCcuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVmaW5lcyB0aGUgbnVtYmVyIG9mIHJvd3MgZm9yIHRoZSBDSSBkZWZpbml0aW9uIGVkaXRvciBpbiB0aGUgYWRtaW4gaW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluZXMgdGhlIHNlYXJjaCBsaW1pdCBmb3IgdGhlIEFnZW50SVRTTUNvbmZpZ0l0ZW0gc2NyZWVuLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluZXMgdGhlIHNlYXJjaCBsaW1pdCBmb3IgdGhlIEFnZW50SVRTTUNvbmZpZ0l0ZW1TZWFyY2ggc2NyZWVuLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluZXMgdGhlIHNob3duIGNvbHVtbnMgaW4gdGhlIGNvbmZpZyBpdGVtIG92ZXJ2aWV3LiBUaGlzIG9wdGlvbiBoYXMgbm8gZWZmZWN0IG9uIHRoZSBwb3NpdGlvbiBvZiB0aGUgY29sdW1uLiBOb3RlOiBDbGFzcyBjb2x1bW4gaXMgYWx3YXlzIGF2YWlsYWJsZSBpZiBmaWx0ZXIgXCdBbGxcJyBpcyBzZWxlY3RlZC4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbmVzIHRoZSBzaG93biBjb2x1bW5zIGluIHRoZSBjb25maWcgaXRlbSBzZWFyY2guIFRoaXMgb3B0aW9uIGhhcyBubyBlZmZlY3Qgb24gdGhlIHBvc2l0aW9uIG9mIHRoZSBjb2x1bW4uJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVmaW5lcyB0aGUgc2hvd24gY29sdW1ucyBvZiBDSXMgaW4gdGhlIGNvbmZpZyBpdGVtIG92ZXJ2aWV3IGRlcGVuZGluZyBvbiB0aGUgQ0kgY2xhc3MuIEVhY2ggZW50cnkgbXVzdCBiZSBwcmVmaXhlZCB3aXRoIHRoZSBjbGFzcyBuYW1lIGFuZCBkb3VibGUgY29sb25zIChpLmUuIENvbXB1dGVyOjopLiBUaGVyZSBhcmUgYSBmZXcgQ0ktQXR0cmlidXRlcyB0aGF0IGFyZSBjb21tb24gdG8gYWxsIENJcyAoZXhhbXBsZSBmb3IgdGhlIGNsYXNzIENvbXB1dGVyOiBDb21wdXRlcjo6TmFtZSwgQ29tcHV0ZXI6OkN1ckRlcGxTdGF0ZSwgQ29tcHV0ZXI6OkNyZWF0ZVRpbWUpLiBUbyBzaG93IGluZGl2aWR1YWwgQ0ktQXR0cmlidXRlcyBhcyBkZWZpbmVkIGluIHRoZSBDSS1EZWZpbml0aW9uLCB0aGUgZm9sbG93aW5nIHNjaGVtZSBtdXN0IGJlIHVzZWQgKGV4YW1wbGUgZm9yIHRoZSBjbGFzcyBDb21wdXRlcik6IENvbXB1dGVyOjpIYXJkRGlzazo6MSwgQ29tcHV0ZXI6OkhhcmREaXNrOjoxOjpDYXBhY2l0eTo6MSwgQ29tcHV0ZXI6OkhhcmREaXNrOjoyLCBDb21wdXRlcjo6SGFyZERpc2s6OjI6OkNhcGFjaXR5OjoxLiBJZiB0aGVyZSBpcyBubyBlbnRyeSBmb3IgYSBDSSBjbGFzcywgdGhlbiB0aGUgZGVmYXVsdCBjb2x1bW5zIGFyZSBzaG93biBhcyBkZWZpbmVkIGluIHRoZSBzZXR0aW5nIElUU01Db25maWdJdGVtOjpGcm9udGVuZDo6QWdlbnRJVFNNQ29uZmlnSXRlbSMjI1Nob3dDb2x1bW5zLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluZXMgdGhlIHNob3duIGNvbHVtbnMgb2YgQ0lzIGluIHRoZSBjb25maWcgaXRlbSBzZWFyY2ggZGVwZW5kaW5nIG9uIHRoZSBDSSBjbGFzcy4gRWFjaCBlbnRyeSBtdXN0IGJlIHByZWZpeGVkIHdpdGggdGhlIGNsYXNzIG5hbWUgYW5kIGRvdWJsZSBjb2xvbnMgKGkuZS4gQ29tcHV0ZXI6OikuIFRoZXJlIGFyZSBhIGZldyBDSS1BdHRyaWJ1dGVzIHRoYXQgYXJlIGNvbW1vbiB0byBhbGwgQ0lzIChleGFtcGxlIGZvciB0aGUgY2xhc3MgQ29tcHV0ZXI6IENvbXB1dGVyOjpOYW1lLCBDb21wdXRlcjo6Q3VyRGVwbFN0YXRlLCBDb21wdXRlcjo6Q3JlYXRlVGltZSkuIFRvIHNob3cgaW5kaXZpZHVhbCBDSS1BdHRyaWJ1dGVzIGFzIGRlZmluZWQgaW4gdGhlIENJLURlZmluaXRpb24sIHRoZSBmb2xsb3dpbmcgc2NoZW1lIG11c3QgYmUgdXNlZCAoZXhhbXBsZSBmb3IgdGhlIGNsYXNzIENvbXB1dGVyKTogQ29tcHV0ZXI6OkhhcmREaXNrOjoxLCBDb21wdXRlcjo6SGFyZERpc2s6OjE6OkNhcGFjaXR5OjoxLCBDb21wdXRlcjo6SGFyZERpc2s6OjIsIENvbXB1dGVyOjpIYXJkRGlzazo6Mjo6Q2FwYWNpdHk6OjEuIElmIHRoZXJlIGlzIG5vIGVudHJ5IGZvciBhIENJIGNsYXNzLCB0aGVuIHRoZSBkZWZhdWx0IGNvbHVtbnMgYXJlIHNob3duIGFzIGRlZmluZWQgaW4gdGhlIHNldHRpbmcgSVRTTUNvbmZpZ0l0ZW06OkZyb250ZW5kOjpBZ2VudElUU01Db25maWdJdGVtIyMjU2hvd0NvbHVtbnMuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVmaW5lcyB0aGUgc2hvd24gY29sdW1ucyBvZiBDSXMgaW4gdGhlIGxpbmsgdGFibGUgY29tcGxleCB2aWV3LCBkZXBlbmRpbmcgb24gdGhlIENJIGNsYXNzLiBFYWNoIGVudHJ5IG11c3QgYmUgcHJlZml4ZWQgd2l0aCB0aGUgY2xhc3MgbmFtZSBhbmQgZG91YmxlIGNvbG9ucyAoaS5lLiBDb21wdXRlcjo6KS4gVGhlcmUgYXJlIGEgZmV3IENJLUF0dHJpYnV0ZXMgdGhhdCBjb21tb24gdG8gYWxsIENJcyAoZXhhbXBsZSBmb3IgdGhlIGNsYXNzIENvbXB1dGVyOiBDb21wdXRlcjo6TmFtZSwgQ29tcHV0ZXI6OkN1ckRlcGxTdGF0ZSwgQ29tcHV0ZXI6OkNyZWF0ZVRpbWUpLiBUbyBzaG93IGluZGl2aWR1YWwgQ0ktQXR0cmlidXRlcyBhcyBkZWZpbmVkIGluIHRoZSBDSS1EZWZpbml0aW9uLCB0aGUgZm9sbG93aW5nIHNjaGVtZSBtdXN0IGJlIHVzZWQgKGV4YW1wbGUgZm9yIHRoZSBjbGFzcyBDb21wdXRlcik6IENvbXB1dGVyOjpIYXJkRGlzazo6MSwgQ29tcHV0ZXI6OkhhcmREaXNrOjoxOjpDYXBhY2l0eTo6MSwgQ29tcHV0ZXI6OkhhcmREaXNrOjoyLCBDb21wdXRlcjo6SGFyZERpc2s6OjI6OkNhcGFjaXR5OjoxLiBJZiB0aGVyZSBpcyBubyBlbnRyeSBmb3IgYSBDSSBjbGFzcywgdGhlbiB0aGUgZGVmYXVsdCBjb2x1bW5zIGFyZSBzaG93bi4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydFbmFibGVzIGNvbmZpZ3VyYXRpb24gaXRlbSBidWxrIGFjdGlvbiBmZWF0dXJlIGZvciB0aGUgYWdlbnQgZnJvbnRlbmQgdG8gd29yayBvbiBtb3JlIHRoYW4gb25lIGNvbmZpZ3VyYXRpb24gaXRlbSBhdCBhIHRpbWUuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRW5hYmxlcyBjb25maWd1cmF0aW9uIGl0ZW0gYnVsayBhY3Rpb24gZmVhdHVyZSBvbmx5IGZvciB0aGUgbGlzdGVkIGdyb3Vwcy4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydFbmFibGVzL2Rpc2FibGVzIHRoZSBmdW5jdGlvbmFsaXR5IHRvIGNoZWNrIENvbmZpZ0l0ZW1zIGZvciB1bmlxdWUgbmFtZXMuIEJlZm9yZSBlbmFibGluZyB0aGlzIG9wdGlvbiB5b3Ugc2hvdWxkIGNoZWNrIHlvdXIgc3lzdGVtIGZvciBhbHJlYWR5IGV4aXN0aW5nIGNvbmZpZyBpdGVtcyB3aXRoIGR1cGxpY2F0ZSBuYW1lcy4gWW91IGNhbiBkbyB0aGlzIHdpdGggdGhlIHNjcmlwdCBiaW4vb3Rycy5JVFNNQ29uZmlnSXRlbUxpc3REdXBsaWNhdGVzLnBsLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J01vZHVsZSB0byBjaGVjayB0aGUgZ3JvdXAgcmVzcG9uc2libGUgZm9yIGEgY2xhc3MuJ30gPSAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J01vZHVsZSB0byBjaGVjayB0aGUgZ3JvdXAgcmVzcG9uc2libGUgZm9yIGEgY29uZmlndXJhdGlvbiBpdGVtLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J01vZHVsZSB0byBnZW5lcmF0ZSBJVFNNIGNvbmZpZyBpdGVtIHN0YXRpc3RpY3MuJ30gPSAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J09iamVjdCBiYWNrZW5kIG1vZHVsZSByZWdpc3RyYXRpb24gZm9yIHRoZSBpbXBvcnQvZXhwb3J0IG1vZHVsZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQYXJhbWV0ZXJzIGZvciB0aGUgZGVwbG95bWVudCBzdGF0ZXMgY29sb3IgaW4gdGhlIHByZWZlcmVuY2VzIHZpZXcgb2YgdGhlIGFnZW50IGludGVyZmFjZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQYXJhbWV0ZXJzIGZvciB0aGUgZGVwbG95bWVudCBzdGF0ZXMgaW4gdGhlIHByZWZlcmVuY2VzIHZpZXcgb2YgdGhlIGFnZW50IGludGVyZmFjZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydQYXJhbWV0ZXJzIGZvciB0aGUgZXhhbXBsZSBwZXJtaXNzaW9uIGdyb3VwcyBvZiB0aGUgZ2VuZXJhbCBjYXRhbG9nIGF0dHJpYnV0ZXMuJ30gPQogICAgICAgICdQYXJhbWV0cnkgZGxhIHByenlrxYJhZG93eWNoIGdydXAgdXByYXduaWXFhCBhdHJ5YnV0w7N3IGthdGFsb2d1IGfFgsOzd25lZ28uJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1BhcmFtZXRlcnMgZm9yIHRoZSBwYWdlcyAoaW4gd2hpY2ggdGhlIGNvbmZpZ3VyYXRpb24gaXRlbXMgYXJlIHNob3duKS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydSZXF1aXJlZCBwZXJtaXNzaW9ucyB0byB1c2UgdGhlIElUU00gY29uZmlndXJhdGlvbiBpdGVtIHNjcmVlbiBpbiB0aGUgYWdlbnQgaW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1JlcXVpcmVkIHBlcm1pc3Npb25zIHRvIHVzZSB0aGUgSVRTTSBjb25maWd1cmF0aW9uIGl0ZW0gc2VhcmNoIHNjcmVlbiBpbiB0aGUgYWdlbnQgaW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1JlcXVpcmVkIHBlcm1pc3Npb25zIHRvIHVzZSB0aGUgSVRTTSBjb25maWd1cmF0aW9uIGl0ZW0gem9vbSBzY3JlZW4gaW4gdGhlIGFnZW50IGludGVyZmFjZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydSZXF1aXJlZCBwZXJtaXNzaW9ucyB0byB1c2UgdGhlIGFkZCBJVFNNIGNvbmZpZ3VyYXRpb24gaXRlbSBzY3JlZW4gaW4gdGhlIGFnZW50IGludGVyZmFjZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydSZXF1aXJlZCBwZXJtaXNzaW9ucyB0byB1c2UgdGhlIGVkaXQgSVRTTSBjb25maWd1cmF0aW9uIGl0ZW0gc2NyZWVuIGluIHRoZSBhZ2VudCBpbnRlcmZhY2UuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnUmVxdWlyZWQgcGVybWlzc2lvbnMgdG8gdXNlIHRoZSBoaXN0b3J5IElUU00gY29uZmlndXJhdGlvbiBpdGVtIHNjcmVlbiBpbiB0aGUgYWdlbnQgaW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1JlcXVpcmVkIHBlcm1pc3Npb25zIHRvIHVzZSB0aGUgcHJpbnQgSVRTTSBjb25maWd1cmF0aW9uIGl0ZW0gc2NyZWVuIGluIHRoZSBhZ2VudCBpbnRlcmZhY2UuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2VsZWN0cyB0aGUgY29uZmlndXJhdGlvbiBpdGVtIG51bWJlciBnZW5lcmF0b3IgbW9kdWxlLiAiQXV0b0luY3JlbWVudCIgaW5jcmVtZW50cyB0aGUgY29uZmlndXJhdGlvbiBpdGVtIG51bWJlciwgdGhlIFN5c3RlbUlELCB0aGUgQ29uZmlnSXRlbUNsYXNzSUQgYW5kIHRoZSBjb3VudGVyIGFyZSB1c2VkLiBUaGUgZm9ybWF0IGlzICJTeXN0ZW1JRC5Db25maWdJdGVtQ2xhc3NJRC5Db3VudGVyIiwgZS5nLiAxMjA1MDAwMDA0LCAxMjA1MDAwMDA1Lid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1NldHMgdGhlIGRlcGxveW1lbnQgc3RhdGUgaW4gdGhlIGNvbmZpZ3VyYXRpb24gaXRlbSBidWxrIHNjcmVlbiBvZiB0aGUgYWdlbnQgaW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1NldHMgdGhlIGluY2lkZW50IHN0YXRlIGluIHRoZSBjb25maWd1cmF0aW9uIGl0ZW0gYnVsayBzY3JlZW4gb2YgdGhlIGFnZW50IGludGVyZmFjZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTaG93cyBhIGxpbmsgaW4gdGhlIG1lbnUgdGhhdCBhbGxvd3MgbGlua2luZyBhIGNvbmZpZ3VyYXRpb24gaXRlbSB3aXRoIGFub3RoZXIgb2JqZWN0IGluIHRoZSBjb25maWcgaXRlbSB6b29tIHZpZXcgb2YgdGhlIGFnZW50IGludGVyZmFjZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTaG93cyBhIGxpbmsgaW4gdGhlIG1lbnUgdG8gYWNjZXNzIHRoZSBoaXN0b3J5IG9mIGEgY29uZmlndXJhdGlvbiBpdGVtIGluIHRoZSBjb25maWd1cmF0aW9uIGl0ZW0gb3ZlcnZpZXcgb2YgdGhlIGFnZW50IGludGVyZmFjZS4nfSA9CiAgICAgICAgJyc7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydTaG93cyBhIGxpbmsgaW4gdGhlIG1lbnUgdG8gYWNjZXNzIHRoZSBoaXN0b3J5IG9mIGEgY29uZmlndXJhdGlvbiBpdGVtIGluIHRoZSBpdHMgem9vbSB2aWV3IG9mIHRoZSBhZ2VudCBpbnRlcmZhY2UuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2hvd3MgYSBsaW5rIGluIHRoZSBtZW51IHRvIGR1cGxpY2F0ZSBhIGNvbmZpZ3VyYXRpb24gaXRlbSBpbiB0aGUgY29uZmlndXJhdGlvbiBpdGVtIG92ZXJ2aWV3IG9mIHRoZSBhZ2VudCBpbnRlcmZhY2UuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2hvd3MgYSBsaW5rIGluIHRoZSBtZW51IHRvIGR1cGxpY2F0ZSBhIGNvbmZpZ3VyYXRpb24gaXRlbSBpbiB0aGUgaXRzIHpvb20gdmlldyBvZiB0aGUgYWdlbnQgaW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1Nob3dzIGEgbGluayBpbiB0aGUgbWVudSB0byBlZGl0IGEgY29uZmlndXJhdGlvbiBpdGVtIGluIHRoZSBpdHMgem9vbSB2aWV3IG9mIHRoZSBhZ2VudCBpbnRlcmZhY2UuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnU2hvd3MgYSBsaW5rIGluIHRoZSBtZW51IHRvIGdvIGJhY2sgaW4gdGhlIGNvbmZpZ3VyYXRvbiBpdGVtIHpvb20gdmlldyBvZiB0aGUgYWdlbnQgaW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1Nob3dzIGEgbGluayBpbiB0aGUgbWVudSB0byBwcmludCBhIGNvbmZpZ3VyYXRpb24gaXRlbSBpbiB0aGUgaXRzIHpvb20gdmlldyBvZiB0aGUgYWdlbnQgaW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1Nob3dzIGEgbGluayBpbiB0aGUgbWVudSB0byB6b29tIGludG8gYSBjb25maWd1cmF0aW9uIGl0ZW0gaW4gdGhlIGNvbmZpZ3VyYXRpb24gaXRlbSBvdmVydmlldyBvZiB0aGUgYWdlbnQgaW50ZXJmYWNlLid9ID0KICAgICAgICAnJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J1Nob3dzIHRoZSBjb25maWcgaXRlbSBoaXN0b3J5IChyZXZlcnNlIG9yZGVyZWQpIGluIHRoZSBhZ2VudCBpbnRlcmZhY2UuJ30gPQogICAgICAgICcnOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVGhlIGlkZW50aWZpZXIgZm9yIGEgY29uZmlndXJhdGlvbiBpdGVtLCBlLmcuIENvbmZpZ0l0ZW0jLCBNeUNvbmZpZ0l0ZW0jLiBUaGUgZGVmYXVsdCBpcyBDb25maWdJdGVtIy4nfSA9CiAgICAgICAgJyc7Cgp9CgoxOwo=</File>
        <File Location="Kernel/Language/pt_BR_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/pt_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/ru_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/sv_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/sw_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/zh_CN_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/zh_TW_ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AdminITSMConfigItem.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMConfigItem.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMConfigItemAdd.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9Nb2R1bGVzL0FnZW50SVRTTUNvbmZpZ0l0ZW1BZGQucG0gLSB0aGUgT1RSUyBJVFNNIGNvbmZpZyBpdGVtIGFkZCBtb2R1bGUKIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxNSBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TW9kdWxlczo6QWdlbnRJVFNNQ29uZmlnSXRlbUFkZDsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW07CnVzZSBLZXJuZWw6OlN5c3RlbTo6R2VuZXJhbENhdGFsb2c7CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHslUGFyYW19OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMKICAgIGZvciBteSAkT2JqZWN0IChxdyhQYXJhbU9iamVjdCBEQk9iamVjdCBMYXlvdXRPYmplY3QgTG9nT2JqZWN0IENvbmZpZ09iamVjdCkpIHsKICAgICAgICBpZiAoICEkU2VsZi0+eyRPYmplY3R9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkZhdGFsRXJyb3IoIE1lc3NhZ2UgPT4gIkdvdCBubyAkT2JqZWN0ISIgKTsKICAgICAgICB9CiAgICB9CiAgICAkU2VsZi0+e0dlbmVyYWxDYXRhbG9nT2JqZWN0fSA9IEtlcm5lbDo6U3lzdGVtOjpHZW5lcmFsQ2F0YWxvZy0+bmV3KCVQYXJhbSk7CiAgICAkU2VsZi0+e0NvbmZpZ0l0ZW1PYmplY3R9ICAgICA9IEtlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbS0+bmV3KCVQYXJhbSk7CgogICAgIyBnZXQgY29uZmlnIG9mIGZyb250ZW5kIG1vZHVsZQogICAgJFNlbGYtPntDb25maWd9ID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoIklUU01Db25maWdJdGVtOjpGcm9udGVuZDo6JFNlbGYtPntBY3Rpb259Iik7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBnZXQgY2xhc3MgbGlzdAogICAgbXkgJENsYXNzTGlzdCA9ICRTZWxmLT57R2VuZXJhbENhdGFsb2dPYmplY3R9LT5JdGVtTGlzdCgKICAgICAgICBDbGFzcyA9PiAnSVRTTTo6Q29uZmlnSXRlbTo6Q2xhc3MnLAogICAgKTsKCiAgICAjIGNoZWNrIGZvciBhY2Nlc3MgcmlnaHRzCiAgICBmb3IgbXkgJENsYXNzSUQgKCBzb3J0IGtleXMgJXskQ2xhc3NMaXN0fSApIHsKICAgICAgICBteSAkSGFzQWNjZXNzID0gJFNlbGYtPntDb25maWdJdGVtT2JqZWN0fS0+UGVybWlzc2lvbigKICAgICAgICAgICAgVHlwZSAgICA9PiAkU2VsZi0+e0NvbmZpZ30tPntQZXJtaXNzaW9ufSwKICAgICAgICAgICAgU2NvcGUgICA9PiAnQ2xhc3MnLAogICAgICAgICAgICBDbGFzc0lEID0+ICRDbGFzc0lELAogICAgICAgICAgICBVc2VySUQgID0+ICRTZWxmLT57VXNlcklEfSwKICAgICAgICApOwoKICAgICAgICBkZWxldGUgJENsYXNzTGlzdC0+eyRDbGFzc0lEfSBpZiAhJEhhc0FjY2VzczsKICAgIH0KCiAgICAjIHNob3cgdGhlIGxpc3Qgb2YgQ0kgY2xhc3NlcyBzb3J0ZWQgYnkgbmFtZQogICAgZm9yIG15ICRJdGVtSUQgKCBzb3J0IHsgJHskQ2xhc3NMaXN0fXskYX0gY21wICR7JENsYXNzTGlzdH17JGJ9IH0ga2V5cyAleyRDbGFzc0xpc3R9ICkgewoKICAgICAgICAjIGdldCBpdGVtIGRhdGEKICAgICAgICBteSAkSXRlbURhdGEgPSAkU2VsZi0+e0dlbmVyYWxDYXRhbG9nT2JqZWN0fS0+SXRlbUdldCgKICAgICAgICAgICAgSXRlbUlEID0+ICRJdGVtSUQsCiAgICAgICAgKTsKCiAgICAgICAgIyBvdXRwdXQgb3ZlcnZpZXcgaXRlbSBsaXN0CiAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5CbG9jaygKICAgICAgICAgICAgTmFtZSA9PiAnT3ZlcnZpZXdJdGVtTGlzdCcsCiAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgQ2xhc3NJRCA9PiAkSXRlbUlELAogICAgICAgICAgICAgICAgTmFtZSAgICA9PiAkQ2xhc3NMaXN0LT57JEl0ZW1JRH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgKTsKICAgIH0KCiAgICAjIG91dHB1dCBoZWFkZXIKICAgIG15ICRPdXRwdXQgPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPkhlYWRlciggVGl0bGUgPT4gJ0FkZCcgKTsKICAgICRPdXRwdXQgLj0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5OYXZpZ2F0aW9uQmFyKCk7CgogICAgIyBvdXRwdXQgb3ZlcnZpZXcKICAgICRPdXRwdXQgLj0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5PdXRwdXQoCiAgICAgICAgVGVtcGxhdGVGaWxlID0+ICdBZ2VudElUU01Db25maWdJdGVtQWRkJywKICAgICAgICBEYXRhICAgICAgICAgPT4gewogICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgfSwKICAgICk7CgogICAgIyBvdXRwdXQgZm9vdGVyCiAgICAkT3V0cHV0IC49ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+Rm9vdGVyKCk7CgogICAgcmV0dXJuICRPdXRwdXQ7Cn0KCjE7Cg==</File>
        <File Location="Kernel/Modules/AgentITSMConfigItemBulk.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMConfigItemEdit.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMConfigItemHistory.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMConfigItemPrint.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMConfigItemSearch.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentITSMConfigItemZoom.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/ITSMConfigItemLayoutCustomer.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/ITSMConfigItemLayoutCustomerCompany.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9PdXRwdXQvSFRNTC9JVFNNQ29uZmlnSXRlbUxheW91dEN1c3RvbWVyQ29tcGFueS5wbSAtIGxheW91dCBiYWNrZW5kIG1vZHVsZQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE1IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpPdXRwdXQ6OkhUTUw6OklUU01Db25maWdJdGVtTGF5b3V0Q3VzdG9tZXJDb21wYW55OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpDdXN0b21lckNvbXBhbnk7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpPdXRwdXQ6OkhUTUw6OklUU01Db25maWdJdGVtTGF5b3V0Q3VzdG9tZXJDb21wYW55IC0gbGF5b3V0IGJhY2tlbmQgbW9kdWxlCgo9aGVhZDEgU1lOT1BTSVMKCkFsbCBsYXlvdXQgZnVuY3Rpb25zIG9mIGN1c3RvbWVyIGNvbXBhbnkgb2JqZWN0cwoKPW92ZXIgNAoKPWN1dAoKPWl0ZW0gbmV3KCkKCmNyZWF0ZSBhbiBvYmplY3QKCiAgICAkQmFja2VuZE9iamVjdCA9IEtlcm5lbDo6T3V0cHV0OjpIVE1MOjpJVFNNQ29uZmlnSXRlbUxheW91dEN1c3RvbWVyQ29tcGFueS0+bmV3KAogICAgICAgICVQYXJhbSwKICAgICk7Cgo9Y3V0CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMKICAgIGZvciBteSAkT2JqZWN0ICgKICAgICAgICBxdyhDb25maWdPYmplY3QgRW5jb2RlT2JqZWN0IExvZ09iamVjdCBNYWluT2JqZWN0IFBhcmFtT2JqZWN0IERCT2JqZWN0IExheW91dE9iamVjdCkKICAgICAgICApCiAgICB7CiAgICAgICAgJFNlbGYtPnskT2JqZWN0fSA9ICRQYXJhbXskT2JqZWN0fSB8fCBkaWUgIkdvdCBubyAkT2JqZWN0ISI7CiAgICB9CgogICAgIyBjcmVhdGUgYWRkaXRpb25hbCBvYmplY3RzCiAgICAkU2VsZi0+e0N1c3RvbWVyQ29tcGFueU9iamVjdH0gPSBLZXJuZWw6OlN5c3RlbTo6Q3VzdG9tZXJDb21wYW55LT5uZXcoICV7JFNlbGZ9ICk7CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBPdXRwdXRTdHJpbmdDcmVhdGUoKQoKY3JlYXRlIG91dHB1dCBzdHJpbmcKCiAgICBteSAkVmFsdWUgPSAkQmFja2VuZE9iamVjdC0+T3V0cHV0U3RyaW5nQ3JlYXRlKAogICAgICAgIFZhbHVlID0+IDExLCAgICAgICAjIChvcHRpb25hbCkKICAgICk7Cgo9Y3V0CgpzdWIgT3V0cHV0U3RyaW5nQ3JlYXRlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyB0cmFuc2Zvcm0gYXNjaWkgdG8gaHRtbAogICAgJFBhcmFte1ZhbHVlfSA9ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QXNjaWkySHRtbCgKICAgICAgICBUZXh0ID0+ICRQYXJhbXtWYWx1ZX0gfHwgJycsCiAgICAgICAgSFRNTFJlc3VsdE1vZGUgPT4gMSwKICAgICk7CgogICAgcmV0dXJuICRQYXJhbXtWYWx1ZX07Cn0KCj1pdGVtIEZvcm1EYXRhR2V0KCkKCmdldCBmb3JtIGRhdGEgYXMgaGFzaCByZWZlcmVuY2UKCiAgICBteSAkRm9ybURhdGFSZWYgPSAkQmFja2VuZE9iamVjdC0+Rm9ybURhdGFHZXQoCiAgICAgICAgS2V5ID0+ICdJdGVtOjoxOjpOb2RlOjozJywKICAgICAgICBJdGVtID0+ICRJdGVtUmVmLAogICAgKTsKCj1jdXQKCnN1YiBGb3JtRGF0YUdldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJEFyZ3VtZW50IChxdyhLZXkgSXRlbSkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgbXkgJUZvcm1EYXRhOwoKICAgICMgZ2V0IGZvcm0gZGF0YQogICAgJEZvcm1EYXRhe1ZhbHVlfSA9ICRTZWxmLT57UGFyYW1PYmplY3R9LT5HZXRQYXJhbSggUGFyYW0gPT4gJFBhcmFte0tleX0gKTsKCiAgICAjIHNldCBpbnZhbGlkIHBhcmFtCiAgICBpZiAoICRQYXJhbXtJdGVtfS0+e0lucHV0fS0+e1JlcXVpcmVkfSAmJiAhJEZvcm1EYXRhe1ZhbHVlfSApIHsKICAgICAgICAkRm9ybURhdGF7SW52YWxpZH0gPSAxOwogICAgICAgICRQYXJhbXtJdGVtfS0+e0Zvcm19LT57ICRQYXJhbXtLZXl9IH0tPntJbnZhbGlkfSA9IDE7CiAgICB9CgogICAgcmV0dXJuIFwlRm9ybURhdGE7Cn0KCnN1YiBJbnB1dENyZWF0ZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJEFyZ3VtZW50IChxdyhLZXkgSXRlbSkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgbXkgJFNlbGVjdGVkSUQgPSAkUGFyYW17VmFsdWV9IHx8ICRQYXJhbXtJdGVtfS0+e0lucHV0fS0+e1ZhbHVlRGVmYXVsdH0gfHwgJyc7CgogICAgbXkgJENTU0NsYXNzID0gJyc7CiAgICBteSAkUmVxdWlyZWQgPSAkUGFyYW17UmVxdWlyZWR9OwogICAgbXkgJEludmFsaWQgID0gJFBhcmFte0ludmFsaWR9OwogICAgbXkgJEl0ZW1JZCAgID0gJFBhcmFte0l0ZW1JZH07CgogICAgaWYgKCRSZXF1aXJlZCkgewogICAgICAgICRDU1NDbGFzcyAuPSAnVmFsaWRhdGVfUmVxdWlyZWQnOwogICAgfQoKICAgIGlmICgkSW52YWxpZCkgewogICAgICAgICRDU1NDbGFzcyAuPSAnIFNlcnZlckVycm9yJzsKICAgIH0KCiAgICAjIGdldCBjbGFzcyBsaXN0CiAgICBteSAlQ29tcGFueUxpc3QgPSAkU2VsZi0+e0N1c3RvbWVyQ29tcGFueU9iamVjdH0tPkN1c3RvbWVyQ29tcGFueUxpc3QoKTsKCiAgICAjIGdlbmVyYXRlIHN0cmluZwogICAgbXkgJFN0cmluZyA9ICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QnVpbGRTZWxlY3Rpb24oCiAgICAgICAgRGF0YSAgICAgICAgID0+IFwlQ29tcGFueUxpc3QsCiAgICAgICAgTmFtZSAgICAgICAgID0+ICRQYXJhbXtLZXl9LAogICAgICAgIElEICAgICAgICAgICA9PiAkSXRlbUlkLAogICAgICAgIFBvc3NpYmxlTm9uZSA9PiAxLAogICAgICAgIFRyYW5zbGF0aW9uICA9PiAwLAogICAgICAgIFNlbGVjdGVkSUQgICA9PiAkU2VsZWN0ZWRJRCwKICAgICAgICBDbGFzcyAgICAgICAgPT4gJENTU0NsYXNzLAogICAgKTsKCiAgICByZXR1cm4gJFN0cmluZzsKfQoKPWl0ZW0gU2VhcmNoRm9ybURhdGFHZXQoKQoKZ2V0IHNlYXJjaCBmb3JtIGRhdGEKCiAgICBteSAkVmFsdWUgPSAkQmFja2VuZE9iamVjdC0+U2VhcmNoRm9ybURhdGFHZXQoCiAgICAgICAgS2V5ID0+ICdJdGVtOjoxOjpOb2RlOjozJywKICAgICAgICBJdGVtID0+ICRJdGVtUmVmLAogICAgKTsKCj1jdXQKCnN1YiBTZWFyY2hGb3JtRGF0YUdldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBpZiAoICEkUGFyYW17S2V5fSApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ05lZWQgS2V5IScsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyBnZXQgZm9ybSBkYXRhCiAgICBteSBAVmFsdWVzOwogICAgaWYgKCAkUGFyYW17VmFsdWV9ICkgewogICAgICAgIEBWYWx1ZXMgPSBAeyAkUGFyYW17VmFsdWV9IH07CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBAVmFsdWVzID0gJFNlbGYtPntQYXJhbU9iamVjdH0tPkdldEFycmF5KCBQYXJhbSA9PiAkUGFyYW17S2V5fSApOwogICAgfQoKICAgIHJldHVybiBcQFZhbHVlczsKfQoKPWl0ZW0gU2VhcmNoSW5wdXRDcmVhdGUoKQoKY3JlYXRlIGEgc2VhcmNoIGlucHV0IHN0cmluZwoKICAgIG15ICRWYWx1ZSA9ICRCYWNrZW5kT2JqZWN0LT5TZWFyY2hJbnB1dENyZWF0ZSgKICAgICAgICBLZXkgPT4gJ0l0ZW06OjE6Ok5vZGU6OjMnLAogICAgKTsKCj1jdXQKCnN1YiBTZWFyY2hJbnB1dENyZWF0ZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJEFyZ3VtZW50IChxdyhLZXkgSXRlbSkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgbXkgJFZhbHVlcyA9ICRTZWxmLT5TZWFyY2hGb3JtRGF0YUdldCglUGFyYW0pOwoKICAgICMgZ2V0IGNvbXBhbnkgZGF0YQogICAgbXkgJUNvbXBhbnlMaXN0ID0gJFNlbGYtPntDdXN0b21lckNvbXBhbnlPYmplY3R9LT5DdXN0b21lckNvbXBhbnlMaXN0KCk7CgogICAgIyBnZW5lcmF0ZSBzdHJpbmcKICAgIG15ICRTdHJpbmcgPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJ1aWxkU2VsZWN0aW9uKAogICAgICAgIERhdGEgICAgICAgID0+IFwlQ29tcGFueUxpc3QsCiAgICAgICAgTmFtZSAgICAgICAgPT4gJFBhcmFte0tleX0sCiAgICAgICAgU2l6ZSAgICAgICAgPT4gNSwKICAgICAgICBNdWx0aXBsZSAgICA9PiAxLAogICAgICAgIFRyYW5zbGF0aW9uID0+IDAsCiAgICAgICAgU2VsZWN0ZWRJRCAgPT4gJFZhbHVlcywKICAgICk7CgogICAgcmV0dXJuICRTdHJpbmc7Cn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwOi8vb3Rycy5vcmcvPikuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="Kernel/Output/HTML/ITSMConfigItemLayoutDate.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/ITSMConfigItemLayoutDateTime.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/ITSMConfigItemLayoutDummy.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9PdXRwdXQvSFRNTC9JVFNNQ29uZmlnSXRlbUxheW91dER1bW15LnBtIC0gbGF5b3V0IGJhY2tlbmQgbW9kdWxlCiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTUgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok91dHB1dDo6SFRNTDo6SVRTTUNvbmZpZ0l0ZW1MYXlvdXREdW1teTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCj1oZWFkMSBOQU1FCgpLZXJuZWw6Ok91dHB1dDo6SFRNTDo6SVRTTUNvbmZpZ0l0ZW1MYXlvdXREdW1teSAtIGxheW91dCBiYWNrZW5kIG1vZHVsZQoKPWhlYWQxIFNZTk9QU0lTCgpBbGwgbGF5b3V0IGZ1bmN0aW9ucyBvZiBkdW1teSBvYmplY3RzCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKY3JlYXRlIGFuIG9iamVjdAoKICAgICRCYWNrZW5kT2JqZWN0ID0gS2VybmVsOjpPdXRwdXQ6OkhUTUw6OklUU01Db25maWdJdGVtTGF5b3V0RHVtbXktPm5ldygKICAgICAgICAlUGFyYW0sCiAgICApOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGNoZWNrIG5lZWRlZCBvYmplY3RzCiAgICBmb3IgbXkgJE9iamVjdCAocXcoQ29uZmlnT2JqZWN0IEVuY29kZU9iamVjdCBMb2dPYmplY3QgTWFpbk9iamVjdCBQYXJhbU9iamVjdCBMYXlvdXRPYmplY3QpKSB7CiAgICAgICAgJFNlbGYtPnskT2JqZWN0fSA9ICRQYXJhbXskT2JqZWN0fSB8fCBkaWUgIkdvdCBubyAkT2JqZWN0ISI7CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBPdXRwdXRTdHJpbmdDcmVhdGUoKQoKY3JlYXRlIG91dHB1dCBzdHJpbmcKCiAgICBteSAkVmFsdWUgPSAkQmFja2VuZE9iamVjdC0+T3V0cHV0U3RyaW5nQ3JlYXRlKCk7Cgo9Y3V0CgpzdWIgT3V0cHV0U3RyaW5nQ3JlYXRlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGlmICggISRQYXJhbXtJdGVtfSApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ05lZWQgSXRlbSEnLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmICggIWRlZmluZWQgJFBhcmFte1ZhbHVlfSApIHsKICAgICAgICAkUGFyYW17VmFsdWV9ID0gJyc7CiAgICB9CgogICAgIyB0cmFuc2xhdGUKICAgIGlmICggJFBhcmFte0l0ZW19LT57SW5wdXR9LT57VHJhbnNsYXRpb259ICkgewogICAgICAgICRQYXJhbXtWYWx1ZX0gPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPntMYW5ndWFnZU9iamVjdH0tPkdldCggJFBhcmFte1ZhbHVlfSApOwogICAgfQoKICAgIG15ICRMaW5rRmVhdHVyZSAgICA9IDE7CiAgICBteSAkSFRNTFJlc3VsdE1vZGUgPSAxOwoKICAgICMgZG8gbm90IHRyYW5zZm9ybSBsaW5rcyBpbiBwcmludCB2aWV3CiAgICBpZiAoICRQYXJhbXtQcmludH0gKSB7CiAgICAgICAgJExpbmtGZWF0dXJlID0gMDsKCiAgICAgICAgIyBkbyBub3QgY29udmVydCB3aGl0ZXNwYWNlIGFuZCBuZXdsaW5lcyBpbiBQREYgbW9kZQogICAgICAgIGlmICggJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ1BERicpICkgewogICAgICAgICAgICAkSFRNTFJlc3VsdE1vZGUgPSAwOwogICAgICAgIH0KICAgIH0KCiAgICAjIHRyYW5zZm9ybSBhc2NpaSB0byBodG1sCiAgICAkUGFyYW17VmFsdWV9ID0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5Bc2NpaTJIdG1sKAogICAgICAgIFRleHQgICAgICAgICAgID0+ICRQYXJhbXtWYWx1ZX0sCiAgICAgICAgSFRNTFJlc3VsdE1vZGUgPT4gJEhUTUxSZXN1bHRNb2RlLAogICAgICAgIExpbmtGZWF0dXJlICAgID0+ICRMaW5rRmVhdHVyZSwKICAgICk7CgogICAgcmV0dXJuICRQYXJhbXtWYWx1ZX07Cn0KCj1pdGVtIEZvcm1EYXRhR2V0KCkKCmdldCBmb3JtIGRhdGEgYXMgaGFzaCByZWZlcmVuY2UKCiAgICBteSAkRm9ybURhdGFSZWYgPSAkQmFja2VuZE9iamVjdC0+Rm9ybURhdGFHZXQoKTsKCj1jdXQKCnN1YiBGb3JtRGF0YUdldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJEFyZ3VtZW50IChxdyhLZXkgSXRlbSkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgbXkgJUZvcm1EYXRhOwoKICAgICMgZ2V0IGZvcm0gZGF0YQogICAgJEZvcm1EYXRhe1ZhbHVlfSA9ICRTZWxmLT57UGFyYW1PYmplY3R9LT5HZXRQYXJhbSggUGFyYW0gPT4gJFBhcmFte0tleX0gKTsKCiAgICAjIHNldCBpbnZhbGlkIHBhcmFtCiAgICBpZiAoICRQYXJhbXtJdGVtfS0+e0lucHV0fS0+e1JlcXVpcmVkfSAmJiAhJEZvcm1EYXRhe1ZhbHVlfSApIHsKICAgICAgICAkRm9ybURhdGF7SW52YWxpZH0gPSAxOwogICAgICAgICRQYXJhbXtJdGVtfS0+e0Zvcm19LT57ICRQYXJhbXtLZXl9IH0tPntJbnZhbGlkfSA9IDE7CiAgICB9CgogICAgcmV0dXJuIFwlRm9ybURhdGE7Cn0KCj1pdGVtIElucHV0Q3JlYXRlKCkKCmNyZWF0ZSBhIGlucHV0IHN0cmluZwoKICAgIG15ICRWYWx1ZSA9ICRCYWNrZW5kT2JqZWN0LT5JbnB1dENyZWF0ZSgpOwoKPWN1dAoKc3ViIElucHV0Q3JlYXRlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXJndW1lbnQgKHF3KEtleSBJdGVtKSkgewogICAgICAgIGlmICggISRQYXJhbXskQXJndW1lbnR9ICkgewogICAgICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkQXJndW1lbnQhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICBteSAkVmFsdWUgPSAkUGFyYW17VmFsdWV9OwogICAgaWYgKCAhZGVmaW5lZCAkUGFyYW17VmFsdWV9ICkgewogICAgICAgICRWYWx1ZSA9ICRQYXJhbXtJdGVtfS0+e0lucHV0fS0+e1ZhbHVlRGVmYXVsdH0gfHwgJyc7CiAgICB9CgogICAgbXkgJENsYXNzICAgID0gJyc7CiAgICBteSAkU2l6ZSAgICAgPSAnVzUwcGMnOwogICAgbXkgJFJlcXVpcmVkID0gJFBhcmFte1JlcXVpcmVkfTsKICAgIG15ICRJbnZhbGlkICA9ICRQYXJhbXtJbnZhbGlkfTsKICAgIG15ICRJdGVtSWQgICA9ICRQYXJhbXtJdGVtSWR9OwoKICAgIGlmICgkUmVxdWlyZWQpIHsKICAgICAgICAkQ2xhc3MgLj0gJyBWYWxpZGF0ZV9SZXF1aXJlZCc7CiAgICB9CgogICAgaWYgKCRJbnZhbGlkKSB7CiAgICAgICAgJENsYXNzIC49ICcgU2VydmVyRXJyb3InOwogICAgfQogICAgJENsYXNzIC49ICcgJyAuICRTaXplOwogICAgbXkgJFN0cmluZyA9ICI8c3BhbiBzdHlsZT1cImRpc3BsYXk6IGlubGluZS1ibG9jazsgaGVpZ2h0OiAxLjNlbTtcIj4iOwogICAgJFN0cmluZwogICAgICAgIC49ICI8aW5wdXQgc3R5bGU9XCJkaXNwbGF5Om5vbmU7XCIgdHlwZT1cInRleHRcIiBuYW1lPVwiJFBhcmFte0tleX1cIiBjbGFzcz1cIiRDbGFzc1wiICI7CgogICAgaWYgKCRJdGVtSWQpIHsKICAgICAgICAkU3RyaW5nIC49ICJpZD1cIiRJdGVtSWRcIiAiOwogICAgfQoKICAgIGlmICgkVmFsdWUpIHsKCiAgICAgICAgIyB0cmFuc2xhdGUKICAgICAgICBpZiAoICRQYXJhbXtJdGVtfS0+e0lucHV0fS0+e1RyYW5zbGF0aW9ufSApIHsKICAgICAgICAgICAgJFZhbHVlID0gJFNlbGYtPntMYXlvdXRPYmplY3R9LT57TGFuZ3VhZ2VPYmplY3R9LT5HZXQoJFZhbHVlKTsKICAgICAgICB9CgogICAgICAgICMgdHJhbnNmb3JtIGFzY2lpIHRvIGh0bWwKICAgICAgICAkVmFsdWUgPSAkU2VsZi0+e0xheW91dE9iamVjdH0tPkFzY2lpMkh0bWwoCiAgICAgICAgICAgIFRleHQgICAgICAgICAgID0+ICRWYWx1ZSwKICAgICAgICAgICAgSFRNTFJlc3VsdE1vZGUgPT4gMSwKICAgICAgICApOwogICAgfQoKICAgICRTdHJpbmcgLj0gInZhbHVlPVwiJFZhbHVlXCIgIjsKCiAgICAjIGFkZCBtYXhpbXVtIGxlbmd0aAogICAgaWYgKCAkUGFyYW17SXRlbX0tPntJbnB1dH0tPntNYXhMZW5ndGh9ICkgewogICAgICAgICRTdHJpbmcgLj0gIm1heGxlbmd0aD1cIiRQYXJhbXtJdGVtfS0+e0lucHV0fS0+e01heExlbmd0aH1cIiAiOwogICAgfQoKICAgICRTdHJpbmcgLj0gJy8+IDwvc3Bhbj4nOwoKICAgIHJldHVybiAkU3RyaW5nOwp9Cgo9aXRlbSBTZWFyY2hGb3JtRGF0YUdldCgpCgpnZXQgc2VhcmNoIGZvcm0gZGF0YQoKICAgIG15ICRWYWx1ZSA9ICRCYWNrZW5kT2JqZWN0LT5TZWFyY2hGb3JtRGF0YUdldCgpOwoKPWN1dAoKc3ViIFNlYXJjaEZvcm1EYXRhR2V0IHsKICAgIHJldHVybiBbXTsKfQoKPWl0ZW0gU2VhcmNoSW5wdXRDcmVhdGUoKQoKY3JlYXRlIGEgc2VhcmNoIGlucHV0IHN0cmluZwoKICAgIG15ICRWYWx1ZSA9ICRCYWNrZW5kT2JqZWN0LT5TZWFyY2hJbnB1dENyZWF0ZSgpOwoKPWN1dAoKc3ViIFNlYXJjaElucHV0Q3JlYXRlIHsKICAgIHJldHVybiAnJm5ic3A7JzsKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChodHRwOi8vb3Rycy5vcmcvKS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="Kernel/Output/HTML/ITSMConfigItemLayoutGeneralCatalog.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/ITSMConfigItemLayoutInteger.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/ITSMConfigItemLayoutText.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/ITSMConfigItemLayoutTextArea.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/ITSMConfigItemMenuGeneric.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9PdXRwdXQvSFRNTC9JVFNNQ29uZmlnSXRlbU1lbnVHZW5lcmljLnBtCiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTUgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6Ok91dHB1dDo6SFRNTDo6SVRTTUNvbmZpZ0l0ZW1NZW51R2VuZXJpYzsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICRPYmplY3QgKAogICAgICAgIHF3KENvbmZpZ09iamVjdCBFbmNvZGVPYmplY3QgTG9nT2JqZWN0IERCT2JqZWN0IExheW91dE9iamVjdCBDb25maWdJdGVtT2JqZWN0IFVzZXJJRCkKICAgICAgICApCiAgICB7CiAgICAgICAgJFNlbGYtPnskT2JqZWN0fSA9ICRQYXJhbXskT2JqZWN0fSB8fCBkaWUgIkdvdCBubyAkT2JqZWN0ISI7CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGlmICggISRQYXJhbXtDb25maWdJdGVtfSApIHsKICAgICAgICAkU2VsZi0+e0xvZ09iamVjdH0tPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ05lZWQgQ29uZmlnSXRlbSEnCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyBncmFudCBhY2Nlc3MgYnkgZGVmYXVsdAogICAgbXkgJEFjY2VzcyA9IDE7CgogICAgIyBnZXQgZ3JvdXBzCiAgICBteSAkQWN0aW9uID0gJFBhcmFte0NvbmZpZ30tPntBY3Rpb259OwogICAgaWYgKCAkQWN0aW9uIGVxICdBZ2VudExpbmtPYmplY3QnICkgewoKICAgICAgICAjIFRoZSBMaW5rLWxpbmsgaXMgYSBzcGVjaWFsIGNhc2UsIGFzIGl0IGlzIG5vdCBzcGVjaWZpYyB0byBJVFNNQ29uZmlnSXRlbS4KICAgICAgICAjIEFzIGEgd29ya2Fyb3VuZCB3ZSBoYXJkY29kZSB0aGF0IEFnZW50TGlua09iamVjdCBpcyB0cmVhdGVkIGxpa2UgQWdlbnRJVFNNQ29uZmlnSXRlbUVkaXQKICAgICAgICAkQWN0aW9uID0gJ0FnZW50SVRTTUNvbmZpZ0l0ZW1FZGl0JzsKICAgIH0KICAgIG15ICRHcm91cHNSbyA9ICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCdGcm9udGVuZDo6TW9kdWxlJyktPnskQWN0aW9ufS0+e0dyb3VwUm99IHx8IFtdOwogICAgbXkgJEdyb3Vwc1J3ID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ0Zyb250ZW5kOjpNb2R1bGUnKS0+eyRBY3Rpb259LT57R3JvdXB9ICAgfHwgW107CgogICAgIyBjaGVjayBwZXJtaXNzaW9uCiAgICBpZiAoICRBY3Rpb24gJiYgKCBAeyRHcm91cHNSb30gfHwgQHskR3JvdXBzUnd9ICkgKSB7CgogICAgICAgICMgZGVueSBhY2Nlc3MgYnkgZGVmYXVsdCwgd2hlbiB0aGVyZSBhcmUgZ3JvdXBzIHRvIGNoZWNrCiAgICAgICAgJEFjY2VzcyA9IDA7CgogICAgICAgICMgY2hlY2sgcmVhZCBvbmx5IGdyb3VwcwogICAgICAgIFJPR1JPVVA6CiAgICAgICAgZm9yIG15ICRSb0dyb3VwICggQHskR3JvdXBzUm99ICkgewoKICAgICAgICAgICAgbmV4dCBST0dST1VQIGlmICEkU2VsZi0+e0xheW91dE9iamVjdH0tPnsiVXNlcklzR3JvdXBSb1skUm9Hcm91cF0ifTsKICAgICAgICAgICAgbmV4dCBST0dST1VQIGlmICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+eyJVc2VySXNHcm91cFJvWyRSb0dyb3VwXSJ9IG5lICdZZXMnOwoKICAgICAgICAgICAgIyBzZXQgYWNjZXNzCiAgICAgICAgICAgICRBY2Nlc3MgPSAxOwogICAgICAgICAgICBsYXN0IFJPR1JPVVA7CiAgICAgICAgfQoKICAgICAgICAjIGNoZWNrIHJlYWQgd3JpdGUgZ3JvdXBzCiAgICAgICAgUldHUk9VUDoKICAgICAgICBmb3IgbXkgJFJ3R3JvdXAgKCBAeyRHcm91cHNSd30gKSB7CgogICAgICAgICAgICBuZXh0IFJXR1JPVVAgaWYgISRTZWxmLT57TGF5b3V0T2JqZWN0fS0+eyJVc2VySXNHcm91cFskUndHcm91cF0ifTsKICAgICAgICAgICAgbmV4dCBSV0dST1VQIGlmICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+eyJVc2VySXNHcm91cFskUndHcm91cF0ifSBuZSAnWWVzJzsKCiAgICAgICAgICAgICMgc2V0IGFjY2VzcwogICAgICAgICAgICAkQWNjZXNzID0gMTsKICAgICAgICAgICAgbGFzdCBSV0dST1VQOwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gJFBhcmFte0NvdW50ZXJ9IGlmICEkQWNjZXNzOwoKICAgICMgb3V0cHV0IG1lbnUgYmxvY2sKICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+QmxvY2soIE5hbWUgPT4gJ01lbnUnICk7CgogICAgIyBvdXRwdXQgbWVudSBpdGVtCiAgICAkU2VsZi0+e0xheW91dE9iamVjdH0tPkJsb2NrKAogICAgICAgIE5hbWUgPT4gJ01lbnVJdGVtJywKICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgJVBhcmFtLAogICAgICAgICAgICAleyAkUGFyYW17Q29uZmlnSXRlbX0gfSwKICAgICAgICAgICAgJXsgJFBhcmFte0NvbmZpZ30gfSwKICAgICAgICB9LAogICAgKTsKICAgICRQYXJhbXtDb3VudGVyfSsrOwoKICAgIHJldHVybiAkUGFyYW17Q291bnRlcn07Cn0KCjE7Cg==</File>
        <File Location="Kernel/Output/HTML/ITSMConfigItemOverviewSmall.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/LayoutITSMConfigItem.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/LinkObjectITSMConfigItem.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AAAITSMConfigItem.tt" Permission="644" Encode="Base64">IyAtLQojIEFBQUlUU01Db25maWdJdGVtLnR0IC0gJFRleHQgdmFyaWFibGUgZmlsZQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE1IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCiMgQ29tbW9uClslIFRyYW5zbGF0ZSgiQWRkcmVzcyIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkFkbWluIFRvb2wiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJCYWNrdXAgRGV2aWNlIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiQmVhbWVyIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiQnVpbGRpbmciKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJDSUhpc3Rvcnk6OkNvbmZpZ0l0ZW1DcmVhdGUiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJDSUhpc3Rvcnk6OkNvbmZpZ0l0ZW1EZWxldGUiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJDSUhpc3Rvcnk6OkRlZmluaXRpb25VcGRhdGUiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJDSUhpc3Rvcnk6OkRlcGxveW1lbnRTdGF0ZVVwZGF0ZSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkNJSGlzdG9yeTo6SW5jaWRlbnRTdGF0ZVVwZGF0ZSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkNJSGlzdG9yeTo6TGlua0FkZCIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkNJSGlzdG9yeTo6TGlua0RlbGV0ZSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkNJSGlzdG9yeTo6TmFtZVVwZGF0ZSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkNJSGlzdG9yeTo6VmFsdWVVcGRhdGUiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJDSUhpc3Rvcnk6OlZlcnNpb25DcmVhdGUiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJDSUhpc3Rvcnk6OlZlcnNpb25EZWxldGUiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJDSUhpc3Rvcnk6OkF0dGFjaG1lbnRBZGQiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJDSUhpc3Rvcnk6OkF0dGFjaG1lbnREZWxldGUiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJDUFUiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJDYW1lcmEiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJDYXBhY2l0eSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkNoYW5nZSBEZWZpbml0aW9uIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiQ2hhbmdlIG9mIGRlZmluaXRpb24gZmFpbGVkISBTZWUgU3lzdGVtIExvZyBmb3IgZGV0YWlscy4iKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJDbGllbnQgQXBwbGljYXRpb24iKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJDbGllbnQgT1MiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJDb25jdXJyZW50IFVzZXJzIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiQ29uZmlnIEl0ZW0tQXJlYSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkNvbmZpZyBJdGVtcyBhdmFpbGFibGUiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJDb25maWcgSXRlbXMgc2hvd24iKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJDTURCIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiRGVtbyIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkRlc2t0b3AiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJEZXZlbG9wZXIgTGljZW5jZSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkRvY2tpbmcgU3RhdGlvbiIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkR1cGxpY2F0ZSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkVtYmVkZGVkIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiRW1wdHkgZmllbGRzIGluZGljYXRlIHRoYXQgdGhlIGN1cnJlbnQgdmFsdWVzIGFyZSBrZXB0IikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiRW50ZXJwcmlzZSBMaWNlbmNlIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiRXhwaXJhdGlvbiBEYXRlIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiRXhwaXJlZCIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkZRRE4iKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJGbG9vciIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkZyZWV3YXJlIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiR1NNIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiR2F0ZXdheSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkdyYXBoaWMgQWRhcHRlciIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkhhcmQgRGlzayIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkhhcmQgRGlzazo6Q2FwYWNpdHkiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJIaWRlIFZlcnNpb25zIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiSVAgQWRkcmVzcyIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIklQIG92ZXIgREhDUCIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIklUIEZhY2lsaXR5IikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiSW5hY3RpdmUiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJJbmNpZGVudCIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkluc3RhbGwgRGF0ZSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIktleWJvYXJkIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiTEFOIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiTGFwdG9wIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiTGFzdCBDaGFuZ2UiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJMaWNlbmNlIEtleSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIkxpY2VuY2UgS2V5OjpFeHBpcmF0aW9uIERhdGUiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJMaWNlbmNlIEtleTo6UXVhbnRpdHkiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJMaWNlbmNlIFR5cGUiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJNYWludGVuYW5jZSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIk1heGltdW0gbnVtYmVyIG9mIG9uZSBlbGVtZW50IikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiTWVkaWEiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJNaWRkbGV3YXJlIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiTW9kZWwiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJNb2RlbSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIk1vbml0b3IiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJNb3VzZSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIk5ldHdvcmsgQWRhcHRlciIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIk5ldHdvcmsgQWRhcHRlcjo6SVAgQWRkcmVzcyIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIk5ldHdvcmsgQWRhcHRlcjo6SVAgb3ZlciBESENQIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiTmV0d29yayBBZGRyZXNzIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiTmV0d29yayBBZGRyZXNzOjpHYXRld2F5IikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiTmV0d29yayBBZGRyZXNzOjpTdWJuZXQgTWFzayIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIk9wZW4gU291cmNlIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiT3BlcmF0aW5nIFN5c3RlbSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIk9wZXJhdGlvbmFsIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiT3RoZXIiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJPdGhlciBFcXVpcG1lbnQiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJPdXRsZXQiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJQQ01DSUEgQ2FyZCIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlBEQSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlBlciBOb2RlIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiUGVyIFByb2Nlc3NvciIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlBlciBTZXJ2ZXIiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJQZXIgVXNlciIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlBob25lIDEiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJQaG9uZSAyIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiUGlsb3QiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJQbGFubmVkIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiUHJpbnRlciIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlByb2R1Y3Rpb24iKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJRdWFudGl0eSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlJhY2siKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJSYW0iKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJSZXBhaXIiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJSZXRpcmVkIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiUmV2aWV3IikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiUm9vbSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlJvdXRlciIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlNjYW5uZXIiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJTZWFyY2ggQ29uZmlnIEl0ZW1zIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiU2VjdXJpdHkgRGV2aWNlIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiU2VyaWFsIE51bWJlciIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlNlcnZlciIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlNlcnZlciBBcHBsaWNhdGlvbiIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlNlcnZlciBPUyIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlNob3cgVmVyc2lvbnMiKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJTaW5nbGUgTGljZW5jZSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlN1Ym5ldCBNYXNrIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiU3dpdGNoIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiVGVsY28iKSB8IGh0bWwgJV0KWyUgVHJhbnNsYXRlKCJUZXN0L1FBIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiVGhlIGRlcGxveW1lbnQgc3RhdGUgb2YgdGhpcyBjb25maWcgaXRlbSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlRoZSBpbmNpZGVudCBzdGF0ZSBvZiB0aGlzIGNvbmZpZyBpdGVtIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiVGltZSBSZXN0cmljdGVkIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiVVNCIERldmljZSIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlVubGltaXRlZCIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlVzZXIgVG9vbCIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIlZvbHVtZSBMaWNlbmNlIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiV0xBTiIpIHwgaHRtbCAlXQpbJSBUcmFuc2xhdGUoIldMQU4gQWNjZXNzIFBvaW50IikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiV2FycmFudHkgRXhwaXJhdGlvbiBEYXRlIikgfCBodG1sICVdClslIFRyYW5zbGF0ZSgiV29ya3BsYWNlIikgfCBodG1sICVdCg==</File>
        <File Location="Kernel/Output/HTML/Standard/AdminITSMConfigItem.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMConfigItemAdd.tt" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTUNvbmZpZ0l0ZW1BZGQudHQgLSBwcm92aWRlcyBIVE1MIGZvcm0gZm9yIEFnZW50SVRTTUNvbmZpZ0l0ZW1BZGQKIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxNSBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgo8ZGl2IGNsYXNzPSJNYWluQm94IEFSSUFSb2xlTWFpbiBMYXlvdXRGaXhlZFNpZGViYXIgU2lkZWJhckZpcnN0Ij4KICAgIDxoMT5bJSBUcmFuc2xhdGUoIkFkZCIpIHwgaHRtbCAlXTogWyUgVHJhbnNsYXRlKCJDb25maWcgSXRlbSIpIHwgaHRtbCAlXTwvaDE+CgogICAgPGRpdiBjbGFzcz0iU2lkZWJhckNvbHVtbiI+CgogICAgICAgIDxkaXYgY2xhc3M9IldpZGdldFNpbXBsZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IkhlYWRlciI+CiAgICAgICAgICAgICAgICA8aDI+PGxhYmVsIGZvcj0iRmlsdGVyQ2xhc3NlcyI+WyUgVHJhbnNsYXRlKCJGaWx0ZXIgZm9yIENsYXNzZXMiKSB8IGh0bWwgJV08L2xhYmVsPjwvaDI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJDb250ZW50Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iRmlsdGVyQ2xhc3NlcyIgY2xhc3M9Ilc1MHBjIiBuYW1lPSJGaWx0ZXJDbGFzc2VzIiB2YWx1ZT0iIiB0aXRsZT0iWyUgVHJhbnNsYXRlKCJGaWx0ZXIgZm9yIENsYXNzZXMiKSB8IGh0bWwgJV0iIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJXaWRnZXRTaW1wbGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJIZWFkZXIiPgogICAgICAgICAgICAgICAgPGgyPlslIFRyYW5zbGF0ZSgiSGludCIpIHwgaHRtbCAlXTwvaDI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJDb250ZW50Ij4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJGaWVsZEV4cGxhbmF0aW9uIj4KICAgICAgICAgICAgICAgICAgICBbJSBUcmFuc2xhdGUoIlNlbGVjdCBhIENsYXNzIGZyb20gdGhlIGxpc3QgdG8gY3JlYXRlIGEgbmV3IENvbmZpZyBJdGVtLiIpIHwgaHRtbCAlXQogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJDb250ZW50Q29sdW1uIj4KICAgICAgICA8ZGl2IGNsYXNzPSJXaWRnZXRTaW1wbGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJIZWFkZXIiPgogICAgICAgICAgICAgICAgPGgyPlslIFRyYW5zbGF0ZSgiTGlzdCIpIHwgaHRtbCAlXTwvaDI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJDb250ZW50Ij4KICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iRGF0YVRhYmxlIiBpZD0iQ2xhc3NlcyI+CiAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9IlcxMDBwYyI+WyUgVHJhbnNsYXRlKCJDbGFzcyIpIHwgaHRtbCAlXTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iRmlsdGVyTWVzc2FnZSBIaWRkZW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlslIFRyYW5zbGF0ZSgiTm8gbWF0Y2hlcyBmb3VuZC4iKSB8IGh0bWwgJV08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgpbJSBSZW5kZXJCbG9ja1N0YXJ0KCJPdmVydmlld0l0ZW1MaXN0IikgJV0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IlslIEVudigiQmFzZWxpbmsiKSAlXUFjdGlvbj1BZ2VudElUU01Db25maWdJdGVtRWRpdDtDbGFzc0lEPVslIERhdGEuQ2xhc3NJRCB8IHVyaSAlXSI+WyUgVHJhbnNsYXRlKERhdGEuTmFtZSkgfCBodG1sICVdPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KWyUgUmVuZGVyQmxvY2tFbmQoIk92ZXJ2aWV3SXRlbUxpc3QiKSAlXQogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iQ2xlYXIiPjwvZGl2Pgo8L2Rpdj4KClslIFdSQVBQRVIgSlNPbkRvY3VtZW50Q29tcGxldGUgJV0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPi8vPCFbQ0RBVEFbCiAgICBDb3JlLlVJLlRhYmxlLkluaXRUYWJsZUZpbHRlcigkKCcjRmlsdGVyQ2xhc3NlcycpLCAkKCcjQ2xhc3NlcycpKTsKLy9dXT48L3NjcmlwdD4KWyUgRU5EICVdCg==</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMConfigItemBulk.tt" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTUNvbmZpZ0l0ZW1CdWxrLnR0IC0gcHJvdmlkZXMgSFRNTCBmb3JtIGZvciBidWxrIG1hc2sKIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxNSBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpbJSBSZW5kZXJCbG9ja1N0YXJ0KCJCdWxrQWN0aW9uIikgJV0KPGZvcm0gYWN0aW9uPSJbJSBFbnYoIkNHSUhhbmRsZSIpICVdIiBtZXRob2Q9InBvc3QiIGVuY3R5cGU9Im11bHRpcGFydC9mb3JtLWRhdGEiIG5hbWU9ImNvbXBvc2UiIGNsYXNzPSJWYWxpZGF0ZSI+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJBY3Rpb24iIHZhbHVlPSJbJSBFbnYoIkFjdGlvbiIpICVdIi8+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTdWJhY3Rpb24iIHZhbHVlPSJEbyIvPgoKICAgIDxkaXYgY2xhc3M9IkxheW91dFBvcHVwIEFSSUFSb2xlTWFpbiI+CiAgICAgICAgPGRpdiBjbGFzcz0iSGVhZGVyIj4KICAgICAgICAgICAgPGgxPlslIFRyYW5zbGF0ZSgiSVRTTSBDb25maWdJdGVtIEJ1bGsgQWN0aW9uIikgfCBodG1sICVdPC9oMT4KICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0iQ2FuY2VsQ2xvc2VQb3B1cCIgaHJlZj0iIyI+WyUgVHJhbnNsYXRlKCJDYW5jZWwgJiBjbG9zZSB3aW5kb3ciKSB8IGh0bWwgJV08L2E+CiAgICAgICAgICAgIDwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJDb250ZW50Ij4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNvbnRlbnQiPgpbJSBSZW5kZXJCbG9ja1N0YXJ0KCJVc2VkQ29uZmlnSXRlbUlEIikgJV0KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IkNvbmZpZ0l0ZW1JRCIgdmFsdWU9IlslIERhdGEuQ29uZmlnSXRlbUlEIHwgaHRtbCAlXSIgLz4KWyUgUmVuZGVyQmxvY2tFbmQoIlVzZWRDb25maWdJdGVtSUQiKSAlXQoKICAgICAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0iVGFibGVMaWtlIEZpeGVkTGFiZWwiPgoKWyUgUmVuZGVyQmxvY2tTdGFydCgiRGVwbFN0YXRlIikgJV0KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJEZXBsU3RhdGVJRCI+WyUgVHJhbnNsYXRlKCJEZXBsb3ltZW50IHN0YXRlIikgfCBodG1sICVdOjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iRmllbGQiPgogICAgICAgICAgICAgICAgICAgICAgICBbJSBEYXRhLkRlcGxTdGF0ZVN0cmcgJV0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJDbGVhciI+PC9kaXY+ClslIFJlbmRlckJsb2NrRW5kKCJEZXBsU3RhdGUiKSAlXQpbJSBSZW5kZXJCbG9ja1N0YXJ0KCJJbmNpU3RhdGUiKSAlXQogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IkluY2lTdGF0ZUlEIj5bJSBUcmFuc2xhdGUoIkluY2lkZW50IHN0YXRlIikgfCBodG1sICVdOjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iRmllbGQiPgogICAgICAgICAgICAgICAgICAgICAgICBbJSBEYXRhLkluY2lTdGF0ZVN0cmcgJV0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJDbGVhciI+PC9kaXY+ClslIFJlbmRlckJsb2NrRW5kKCJJbmNpU3RhdGUiKSAlXQoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJTcGFjaW5nVG9wIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJMaW5rVG9nZXRoZXIiPlslIFRyYW5zbGF0ZSgiTGluayB0b2dldGhlciIpIHwgaHRtbCAlXTo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgWyUgRGF0YS5MaW5rVG9nZXRoZXJZZXNOb09wdGlvbiAlXQogICAgICAgICAgICAgICAgICAgICAgICBbJSBEYXRhLkxpbmtUb2dldGhlckxpbmtUeXBlU3RyZyAlXQogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNsZWFyIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iTGlua1RvZ2V0aGVyQW5vdGhlciI+WyUgVHJhbnNsYXRlKCJMaW5rIHRvIGFub3RoZXIiKSB8IGh0bWwgJV06PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJGaWVsZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iWyUgRGF0YS5MaW5rVG9nZXRoZXJBbm90aGVySW52YWxpZCB8IGh0bWwgJV0gVzI1cGMiIGlkPSJMaW5rVG9nZXRoZXJBbm90aGVyIiBuYW1lPSJMaW5rVG9nZXRoZXJBbm90aGVyIiB2YWx1ZT0iWyUgRGF0YS5MaW5rVG9nZXRoZXJBbm90aGVyIHwgaHRtbCAlXSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJMaW5rVG9nZXRoZXJBbm90aGVyU2VydmVyRXJyb3IiIGNsYXNzPSJUb29sdGlwRXJyb3JNZXNzYWdlIj48cD5bJSBUcmFuc2xhdGUoIkludmFsaWQgQ29uZmlndXJhdGlvbiBJdGVtIG51bWJlciEiKSB8IGh0bWwgJV08L3A+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuTGlua1R5cGVTdHJnICVdCiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJGaWVsZEV4cGxhbmF0aW9uIj5bJSBUcmFuc2xhdGUoIlRoZSBudW1iZXIgb2YgYW5vdGhlciBDb25maWd1cmF0aW9uIEl0ZW0gdG8gbGluayB3aXRoLiIpIHwgaHRtbCAlXTwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJDbGVhciI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJGb290ZXIiPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJQcmltYXJ5IiBpZD0ic3VibWl0UmljaFRleHQiIGFjY2Vzc2tleT0iZyIgdGl0bGU9IlslIFRyYW5zbGF0ZSgiU3VibWl0IikgfCBodG1sICVdIChnKSIgdHlwZT0ic3VibWl0IiB2YWx1ZT0iWyUgVHJhbnNsYXRlKCJTdWJtaXQiKSB8IGh0bWwgJV0iPlslIFRyYW5zbGF0ZSgiU3VibWl0IikgfCBodG1sICVdPC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9mb3JtPgpbJSBSZW5kZXJCbG9ja0VuZCgiQnVsa0FjdGlvbiIpICVdCg==</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMConfigItemEdit.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMConfigItemHistory.tt" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTUNvbmZpZ0l0ZW1IaXN0b3J5LnR0IC0gcHJvdmlkZXMgSFRNTCBmb3JtIGZvciBoaXN0b3J5CiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTUgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKPCEtLSBzdGFydCBmb3JtIC0tPgo8ZGl2IGNsYXNzPSJMYXlvdXRQb3B1cCBBUklBUm9sZU1haW4iPgoKICAgIDxkaXYgY2xhc3M9IkhlYWRlciI+CiAgICAgICAgPGgxPgogICAgICAgICAgICBbJSBUcmFuc2xhdGUoIkhpc3Rvcnkgb2YiKSB8IGh0bWwgJV0gQ29uZmlnIEl0ZW06IFslIERhdGEuTmFtZSAlXQogICAgICAgIDwvaDE+CiAgICAgICAgPHA+CiAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJDYW5jZWxDbG9zZVBvcHVwIj5bJSBUcmFuc2xhdGUoIkNhbmNlbCAmIGNsb3NlIHdpbmRvdyIpIHwgaHRtbCAlXTwvYT4KICAgICAgICA8L3A+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJDb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJXaWRnZXRTaW1wbGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJIZWFkZXIiPgogICAgICAgICAgICAgICAgPGgyPgogICAgICAgICAgICAgICAgICAgIFslIFRyYW5zbGF0ZSgiSGlzdG9yeSBDb250ZW50IikgfCBodG1sICVdCiAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ29udGVudCI+CiAgICAgICAgICAgICAgICA8dGFibGUgc3VtbWFyeT0iQ29uZmlndXJhdGlvbiBJdGVtIEhpc3RvcnkiIGNsYXNzPSJEYXRhVGFibGUiPgogICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIFRyYW5zbGF0ZSgiQWN0aW9uIikgfCBodG1sICVdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIFRyYW5zbGF0ZSgiQ29tbWVudCIpIHwgaHRtbCAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJSBUcmFuc2xhdGUoIlpvb20iKSB8IGh0bWwgJV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyUgVHJhbnNsYXRlKCJVc2VyIikgfCBodG1sICVdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIFRyYW5zbGF0ZSgiQ3JlYXRldGltZSIpIHwgaHRtbCAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KWyUgUmVuZGVyQmxvY2tTdGFydCgiUm93IikgJV0KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuSGlzdG9yeVR5cGUgfCBodG1sICVdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+WyUgRGF0YS5Db21tZW50IHwgaHRtbCAlXTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iQ2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSAgY2xhc3M9Ikxpbmtab29tVmlldyBBc0Jsb2NrIiBocmVmPSJbJSBFbnYoIkJhc2VsaW5rIikgJV1BY3Rpb249QWdlbnRJVFNNQ29uZmlnSXRlbVpvb207Q29uZmlnSXRlbUlEPVslIERhdGEuQ29uZmlnSXRlbUlEICVdO1ZlcnNpb25JRD1bJSBEYXRhLlZlcnNpb25JRCAlXSI+WyUgVHJhbnNsYXRlKCJab29tIHZpZXciKSB8IGh0bWwgJV08L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuVXNlckZ1bGxuYW1lIHwgaHRtbCAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJSBEYXRhLkNyZWF0ZVRpbWUgfCBMb2NhbGl6ZSgiVGltZUxvbmciKSAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KWyUgUmVuZGVyQmxvY2tFbmQoIlJvdyIpICVdCiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgpbJSBXUkFQUEVSIEpTT25Eb2N1bWVudENvbXBsZXRlICVdCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4vLzwhW0NEQVRBWwogICAgJCgnYS5MaW5rWm9vbVZpZXcnKS5iaW5kKCdjbGljaycsIGZ1bmN0aW9uICgpIHsKICAgICAgICB3aW5kb3cub3BlbmVyLkNvcmUuVUkuUG9wdXAuRmlyZVBvcHVwRXZlbnQoJ1VSTCcsIHsgVVJMOiAkKHRoaXMpLmF0dHIoJ2hyZWYnKX0pOwogICAgICAgIHdpbmRvdy5jbG9zZSgpOwogICAgfSk7Ci8vXV0+PC9zY3JpcHQ+ClslIEVORCAlXQogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJGb290ZXIiPgogICAgPC9kaXY+CjwvZGl2Pgo8IS0tIGVuZCBmb3JtIC0tPgo=</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMConfigItemOverviewNavBar.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMConfigItemOverviewSmall.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMConfigItemPrint.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMConfigItemSearch.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMConfigItemSearchResultPrint.tt" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTUNvbmZpZ0l0ZW1TZWFyY2hSZXN1bHRQcmludC50dCAtIGh0bWwgZm9yIGNvbmZpZyBpdGVtIHNlYXJjaCByZXN1bHRzIChwcmludCBvbmx5KQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE1IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCjwhLS0gc3RhcnQgZm9ybSAtLT4KPGk+WyUgRGF0YS5XYXJuaW5nICVdPC9pPgo8dGFibGUgYm9yZGVyPSIwIiBjZWxsc3BhY2luZz0iMSIgY2VsbHBhZGRpbmc9IjAiIHdpZHRoPSIxMDAlIj4KICAgIDx0cj4KICAgICAgICA8dGQgY2xhc3M9Im1haW5oZWFkIj5bJSBUcmFuc2xhdGUoIlNlYXJjaCIpIHwgaHRtbCAlXTwvdGQ+CiAgICA8L3RyPgo8L3RhYmxlPgo8dGFibGUgYm9yZGVyPSIwIiB3aWR0aD0iMTAwJSIgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSI0Ij4KICAgIDx0cj4KICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnRib2R5Ij4KICAgICAgICAgICAgPHRhYmxlIGJvcmRlcj0iMCIgd2lkdGg9IjEwMCUiIGNlbGxzcGFjaW5nPSIwIiBjZWxscGFkZGluZz0iMyI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIHdpZHRoPSIxMCUiIGNsYXNzPSJjb250ZW50a2V5Ij5bJSBUcmFuc2xhdGUoIkNsYXNzIikgfCBodG1sICVdPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgd2lkdGg9IjE1JSIgY2xhc3M9ImNvbnRlbnRrZXkiPlslIFRyYW5zbGF0ZSgiSW5jaWRlbnQgU3RhdGUiKSB8IGh0bWwgJV08L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCB3aWR0aD0iMjAlIiBjbGFzcz0iY29udGVudGtleSI+WyUgVHJhbnNsYXRlKCJOYW1lIikgfCBodG1sICVdPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgd2lkdGg9IjE1JSIgY2xhc3M9ImNvbnRlbnRrZXkiPlslIFRyYW5zbGF0ZSgiTnVtYmVyIikgfCBodG1sICVdPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgd2lkdGg9IjE1JSIgY2xhc3M9ImNvbnRlbnRrZXkiPlslIFRyYW5zbGF0ZSgiRGVwbG95bWVudCBTdGF0ZSIpIHwgaHRtbCAlXTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIHdpZHRoPSI1JSIgY2xhc3M9ImNvbnRlbnRrZXkiPlslIFRyYW5zbGF0ZSgiVmVyc2lvbiIpIHwgaHRtbCAlXTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIHdpZHRoPSIyMCUiIGNsYXNzPSJjb250ZW50a2V5Ij5bJSBUcmFuc2xhdGUoIkNyZWF0ZVRpbWUiKSB8IGh0bWwgJV08L3RkPgogICAgICAgICAgICAgICAgPC90cj4KWyUgUmVuZGVyQmxvY2tTdGFydCgiUmVjb3JkIikgJV0KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+WyUgRGF0YS5DbGFzcyB8IGh0bWwgJV08L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudHZhbHVlIj5bJSBEYXRhLkluY2lTdGF0ZSB8IGh0bWwgJV08L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iY29udGVudHZhbHVlIj5bJSBEYXRhLk5hbWUgfCB0cnVuY2F0ZSgzMCkgfCBodG1sICVdPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+WyUgRGF0YS5OdW1iZXIgfCBodG1sICVdPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+WyUgRGF0YS5EZXBsU3RhdGUgfCB0cnVuY2F0ZSgzMCkgfCBodG1sICVdPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+WyUgRGF0YS5WZXJzaW9uSUQgfCB0cnVuY2F0ZSgxNSkgfCBodG1sICVdPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnR2YWx1ZSI+WyUgRGF0YS5DcmVhdGVUaW1lIHwgTG9jYWxpemUoIlRpbWVMb25nIikgJV08L3RkPgogICAgICAgICAgICAgICAgPC90cj4KWyUgUmVuZGVyQmxvY2tFbmQoIlJlY29yZCIpICVdCiAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgPC90ZD4KICAgIDwvdHI+CjwvdGFibGU+CjwhLS0gZW5kIGZvcm0gLS0+Cg==</File>
        <File Location="Kernel/Output/HTML/Standard/AgentITSMConfigItemZoom.tt" Permission="644" Encode="Base64">IyAtLQojIEFnZW50SVRTTUNvbmZpZ0l0ZW1ab29tLnR0IC0gcHJvdmlkZXMgSFRNTCBmb3JtIGZvciBBZ2VudElUU01Db25maWdJdGVtWm9vbQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE1IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCjxkaXYgY2xhc3M9Ik1haW5Cb3ggQVJJQVJvbGVNYWluIj4KICAgIDxkaXYgY2xhc3M9IkNsZWFyTGVmdCI+PC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJIZWFkbGluZSI+CiAgICAgICAgPGRpdiBjbGFzcz0iRmxhZyIgdGl0bGU9IlslIFRyYW5zbGF0ZShEYXRhLkN1ckluY2lTdGF0ZSkgfCBodG1sICVdIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9IlslIERhdGEuQ3VySW5jaVNpZ25hbCB8IGh0bWwgJV0iPjwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8aDEgdGl0bGU9IlslIFRyYW5zbGF0ZSgiQ29uZmlndXJhdGlvbiBJdGVtIikgfCBodG1sICVdOiBbJSBEYXRhLk51bWJlciB8IGh0bWwgJV0gJm5kYXNoOyBbJSBEYXRhLk5hbWUgfCB0cnVuY2F0ZSg0MCkgfCBodG1sICVdIj4KICAgICAgICAgICAgWyUgVHJhbnNsYXRlKCJDb25maWd1cmF0aW9uIEl0ZW0iKSB8IGh0bWwgJV06IFslIERhdGEuTnVtYmVyIHwgaHRtbCAlXSA8c3Bhbj4mbWRhc2g7PC9zcGFuPiBbJSBEYXRhLk5hbWUgfCB0cnVuY2F0ZSg2MCkgfCBodG1sICVdCiAgICAgICAgPC9oMT4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iTGF5b3V0Rml4ZWRTaWRlYmFyIFNpZGViYXJMYXN0Ij4KCiAgICAgICAgWyUgRGF0YS5TdHlsZUNsYXNzZXMgJV0KCiAgICAgICAgPGRpdiBjbGFzcz0iU2lkZWJhckNvbHVtbiI+ClslIFJlbmRlckJsb2NrU3RhcnQoIk1ldGEiKSAlXQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJXaWRnZXRTaW1wbGUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iSGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJXaWRnZXRBY3Rpb24gVG9nZ2xlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgdGl0bGU9IlslIFRyYW5zbGF0ZSgiU2hvdyBvciBoaWRlIHRoZSBjb250ZW50IikgfCBodG1sICVdIj48aSBjbGFzcz0iZmEgZmEtY2FyZXQtcmlnaHQiPjwvaT48aSBjbGFzcz0iZmEgZmEtY2FyZXQtZG93biI+PC9pPjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aDI+WyUgVHJhbnNsYXRlKCJDb25maWd1cmF0aW9uIEl0ZW0gSW5mb3JtYXRpb24iKSB8IGh0bWwgJV08L2gyPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJDb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQgY2xhc3M9IlRhYmxlTGlrZSBGaXhlZExhYmVsU21hbGwgVGlnaHQiPgoKICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlslIFRyYW5zbGF0ZSgiQ2xhc3MiKSB8IGh0bWwgJV06PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9IlZhbHVlIj5bJSBUcmFuc2xhdGUoRGF0YS5DbGFzcykgfCBodG1sICVdPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJDbGVhciI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+WyUgVHJhbnNsYXRlKCJOYW1lIikgfCBodG1sICVdOjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJWYWx1ZSI+WyUgRGF0YS5OYW1lIHwgdHJ1bmNhdGUoMjUpIHwgaHRtbCAlXTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ2xlYXIiPjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlslIFRyYW5zbGF0ZSgiQ3VycmVudCBEZXBsb3ltZW50IFN0YXRlIikgfCBodG1sICVdOjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IlZhbHVlIiB0aXRsZT0iWyUgVHJhbnNsYXRlKERhdGEuQ3VyRGVwbFN0YXRlKSB8IGh0bWwgJV0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iRmxhZyBTbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9IlslIERhdGEuQ3VyRGVwbFNpZ25hbCB8IGh0bWwgJV0iPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgWyUgVHJhbnNsYXRlKERhdGEuQ3VyRGVwbFN0YXRlKSB8IGh0bWwgJV0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNsZWFyIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5bJSBUcmFuc2xhdGUoIkN1cnJlbnQgSW5jaWRlbnQgU3RhdGUiKSB8IGh0bWwgJV06PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iVmFsdWUiIHRpdGxlPSJbJSBUcmFuc2xhdGUoRGF0YS5DdXJJbmNpU3RhdGUpIHwgaHRtbCAlXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJGbGFnIFNtYWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iWyUgRGF0YS5DdXJJbmNpU2lnbmFsIHwgaHRtbCAlXSI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJSBUcmFuc2xhdGUoRGF0YS5DdXJJbmNpU3RhdGUpIHwgaHRtbCAlXQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ2xlYXIiPjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlslIFRyYW5zbGF0ZSgiQ3JlYXRlZCIpIHwgaHRtbCAlXTo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iVmFsdWUiPlslIERhdGEuQ3JlYXRlVGltZSB8IExvY2FsaXplKCJUaW1lTG9uZyIpICVdPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJDbGVhciI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+WyUgVHJhbnNsYXRlKCJDcmVhdGVkIGJ5IikgfCBodG1sICVdOjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJWYWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJSBEYXRhLkNyZWF0ZUJ5VXNlckZ1bGxOYW1lIHwgaHRtbCAlXQogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNsZWFyIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5bJSBUcmFuc2xhdGUoIkxhc3QgY2hhbmdlZCIpIHwgaHRtbCAlXTo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iVmFsdWUiPlslIERhdGEuQ2hhbmdlVGltZSB8IExvY2FsaXplKCJUaW1lTG9uZyIpICVdPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJDbGVhciI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+WyUgVHJhbnNsYXRlKCJMYXN0IGNoYW5nZWQgYnkiKSB8IGh0bWwgJV06PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9IlZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuQ2hhbmdlQnlVc2VyRnVsbE5hbWUgfCBodG1sICVdCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ2xlYXIiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+ClslIFJlbmRlckJsb2NrRW5kKCJNZXRhIikgJV0KWyUgUmVuZGVyQmxvY2tTdGFydCgiTGlua1RhYmxlU2ltcGxlIikgJV0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iV2lkZ2V0U2ltcGxlIERvbnRQcmludCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJIZWFkZXIiPgogICAgICAgICAgICAgICAgICAgIDxoMj5bJSBUcmFuc2xhdGUoIkxpbmtlZCBPYmplY3RzIikgfCBodG1sICVdPC9oMj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgWyUgRGF0YS5MaW5rVGFibGVTdHJnICVdCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+ClslIFJlbmRlckJsb2NrRW5kKCJMaW5rVGFibGVTaW1wbGUiKSAlXQogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9IkNvbnRlbnRDb2x1bW4iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJDb250cm9sUm93Ij4KICAgICAgICAgICAgICAgIDxoMj48L2gyPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iQWN0aW9uUm93Ij4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iQWN0aW9ucyI+ClslIFJlbmRlckJsb2NrU3RhcnQoIk1lbnUiKSAlXQpbJSBSZW5kZXJCbG9ja1N0YXJ0KCJNZW51SXRlbSIpICVdCiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJbJSBFbnYoIkJhc2VsaW5rIikgJV1bJSBEYXRhLkxpbmsgfCBJbnRlcnBvbGF0ZSAlXSIgY2xhc3M9IlslIERhdGEuTWVudUNsYXNzIHwgaHRtbCAlXSIgdGl0bGU9IlslIFRyYW5zbGF0ZShEYXRhLkRlc2NyaXB0aW9uKSB8IGh0bWwgJV0iPlslIFRyYW5zbGF0ZShEYXRhLk5hbWUpIHwgaHRtbCAlXTwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgpbJSBSZW5kZXJCbG9ja0VuZCgiTWVudUl0ZW0iKSAlXQpbJSBSZW5kZXJCbG9ja0VuZCgiTWVudSIpICVdCiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBpZD0iSVRTTVRyZWUiPgpbJSBSZW5kZXJCbG9ja1N0YXJ0KCJUcmVlIikgJV0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9IklUU01UYWJsZSIgIGNsYXNzPSJUaWNrZXRMaXN0Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJDb250cm9sUm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iSVRTTUl0ZW1WaWV3IEljb25zIj4KWyUgUmVuZGVyQmxvY2tTdGFydCgiRXhwYW5kIikgJV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJPbmVJVFNNSXRlbSBBY3RpdmUiIGhyZWY9IlslIEVudigiQmFzZWxpbmsiKSAlXUFjdGlvbj1BZ2VudElUU01Db25maWdJdGVtWm9vbTtDb25maWdJdGVtSUQ9WyUgRGF0YS5Db25maWdJdGVtSUQgfCB1cmkgJV07U2hvd1ZlcnNpb25zPTAiIHRpdGxlPSJbJSBUcmFuc2xhdGUoIlNob3cgb25lIHZlcnNpb24iKSB8IGh0bWwgJV0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1taW51cyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlslIFRyYW5zbGF0ZSgiU2hvdyBvbmUgdmVyc2lvbiIpIHwgaHRtbCAlXTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJBbGxJVFNNSXRlbXMiIGhyZWY9IlslIEVudigiQmFzZWxpbmsiKSAlXUFjdGlvbj1BZ2VudElUU01Db25maWdJdGVtWm9vbTtDb25maWdJdGVtSUQ9WyUgRGF0YS5Db25maWdJdGVtSUQgfCB1cmkgJV07U2hvd1ZlcnNpb25zPTEiIHRpdGxlPSJbJSBUcmFuc2xhdGUoIlNob3cgYWxsIHZlcnNpb25zIikgfCBodG1sICVdIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcmVvcmRlciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlslIFRyYW5zbGF0ZSgiU2hvdyBhbGwgdmVyc2lvbnMiKSB8IGh0bWwgJV08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+ClslIFJlbmRlckJsb2NrRW5kKCJFeHBhbmQiKSAlXQpbJSBSZW5kZXJCbG9ja1N0YXJ0KCJDb2xsYXBzZSIpICVdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iT25lSVRTTUl0ZW0iIGhyZWY9IlslIEVudigiQmFzZWxpbmsiKSAlXUFjdGlvbj1BZ2VudElUU01Db25maWdJdGVtWm9vbTtDb25maWdJdGVtSUQ9WyUgRGF0YS5Db25maWdJdGVtSUQgfCB1cmkgJV07U2hvd1ZlcnNpb25zPTAiIHRpdGxlPSJbJSBUcmFuc2xhdGUoIlNob3cgb25lIHZlcnNpb24iKSB8IGh0bWwgJV0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1taW51cyI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlslIFRyYW5zbGF0ZSgiU2hvdyBvbmUgdmVyc2lvbiIpIHwgaHRtbCAlXTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJBbGxJVFNNSXRlbXMgQWN0aXZlIiBocmVmPSJbJSBFbnYoIkJhc2VsaW5rIikgJV1BY3Rpb249QWdlbnRJVFNNQ29uZmlnSXRlbVpvb207Q29uZmlnSXRlbUlEPVslIERhdGEuQ29uZmlnSXRlbUlEIHwgdXJpICVdO1Nob3dWZXJzaW9ucz0xIiB0aXRsZT0iWyUgVHJhbnNsYXRlKCJTaG93IGFsbCB2ZXJzaW9ucyIpIHwgaHRtbCAlXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXJlb3JkZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5bJSBUcmFuc2xhdGUoIlNob3cgYWxsIHZlcnNpb25zIikgfCBodG1sICVdPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgpbJSBSZW5kZXJCbG9ja0VuZCgiQ29sbGFwc2UiKSAlXQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJJVFNNVGFibGVCb2R5IiBjbGFzcz0iQWN0aW9uUm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iU2Nyb2xsZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJUYWJsZVNtYWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD48c3Bhbj5bJSBUcmFuc2xhdGUoIlZlcnNpb24gSW5jaWRlbnQgU3RhdGUiKSB8IGh0bWwgJV08L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD48c3Bhbj5bJSBUcmFuc2xhdGUoIlZlcnNpb24gRGVwbG95bWVudCBTdGF0ZSIpIHwgaHRtbCAlXTwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjxzcGFuPlslIFRyYW5zbGF0ZSgiVmVyc2lvbiBOdW1iZXIiKSB8IGh0bWwgJV08L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD48c3Bhbj5bJSBUcmFuc2xhdGUoIk5hbWUiKSB8IGh0bWwgJV08L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD48c3Bhbj5bJSBUcmFuc2xhdGUoIkNyZWF0ZWQgYnkiKSB8IGh0bWwgJV08L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD48c3Bhbj5bJSBUcmFuc2xhdGUoIkNoYW5nZWQiKSB8IGh0bWwgJV08L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KWyUgUmVuZGVyQmxvY2tTdGFydCgiVHJlZUl0ZW0iKSAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9IlslIERhdGEuQWN0aXZlIHwgaHRtbCAlXSBNYXN0ZXJBY3Rpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHRpdGxlPSJbJSBUcmFuc2xhdGUoRGF0YS5JbmNpU3RhdGUpIHwgaHRtbCAlXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iRmxhZyBTbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJbJSBEYXRhLkluY2lTaWduYWwgfCBodG1sICVdIj5bJSBEYXRhLkluY2lTdGF0ZSB8IGh0bWwgJV08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHRpdGxlPSJbJSBUcmFuc2xhdGUoRGF0YS5EZXBsU3RhdGUpIHwgaHRtbCAlXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iRmxhZyBTbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJbJSBEYXRhLkRlcGxTaWduYWwgfCBodG1sICVdIj5bJSBEYXRhLkRlcGxTdGF0ZSB8IGh0bWwgJV08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuQ291bnQgfCBodG1sICVdLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iQXNCbG9jayBNYXN0ZXJBY3Rpb25MaW5rIiBocmVmPSJbJSBFbnYoIkJhc2VsaW5rIikgJV1BY3Rpb249QWdlbnRJVFNNQ29uZmlnSXRlbVpvb207Q29uZmlnSXRlbUlEPVslIERhdGEuQ29uZmlnSXRlbUlEIHwgdXJpICVdO1ZlcnNpb25JRD1bJSBEYXRhLlZlcnNpb25JRCB8IHVyaSAlXTtTaG93VmVyc2lvbnM9WyUgRGF0YS5TaG93VmVyc2lvbnMgfCB1cmkgJV0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJSBEYXRhLk5hbWUgfCBodG1sICVdIChbJSBUcmFuc2xhdGUoRGF0YS5EZXBsU3RhdGUpIHwgaHRtbCAlXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuQ3JlYXRlQnlVc2VyRnVsbE5hbWUgfCBodG1sICVdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuQ3JlYXRlVGltZSB8IExvY2FsaXplKCJUaW1lTG9uZyIpICVdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgpbJSBSZW5kZXJCbG9ja0VuZCgiVHJlZUl0ZW0iKSAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iSGFuZGxlIHVpLXJlc2l6YWJsZS1oYW5kbGUgdWktcmVzaXphYmxlLXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyI+WyUgVHJhbnNsYXRlKCJSZXNpemUiKSB8IGh0bWwgJV08L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+ClslIFJlbmRlckJsb2NrRW5kKCJUcmVlIikgJV0KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgaWQ9IklUU01JdGVtcyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJXaWRnZXRCb3ggU3BhY2luZ1RvcCBFeHBhbmRlZCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTGlnaHRSb3cgSGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iV2lkZ2V0QWN0aW9uIFRvZ2dsZSI+PGEgaHJlZj0iIyIgdGl0bGU9IlslIFRyYW5zbGF0ZSgiU2hvdyBvciBoaWRlIHRoZSBjb250ZW50LiIpIHwgaHRtbCAlXSI+PGkgY2xhc3M9ImZhIGZhLWNhcmV0LXJpZ2h0Ij48L2k+PGkgY2xhc3M9ImZhIGZhLWNhcmV0LWRvd24iPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5bJSBUcmFuc2xhdGUoIkNvbmZpZ3VyYXRpb24gSXRlbSBWZXJzaW9uIERldGFpbHMiKSB8IGh0bWwgJV08L2gyPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IldpdGhQYWRkaW5nIENvbnRlbnQgTm9Eb3VibGVCb3JkZXJzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJEYXRhVGFibGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlslIFRyYW5zbGF0ZSgiUHJvcGVydHkiKSB8IGh0bWwgJV08L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+WyUgVHJhbnNsYXRlKCJWYWx1ZSIpIHwgaHRtbCAlXTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+ClslIFJlbmRlckJsb2NrU3RhcnQoIkRhdGEiKSAlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJXMjVwYyIgc3R5bGU9InBhZGRpbmctbGVmdDogWyUgVHJhbnNsYXRlKERhdGEuSW5kZW50YXRpb24pIHwgaHRtbCAlXXB4OyIgdGl0bGU9IlslIFRyYW5zbGF0ZShEYXRhLkRlc2NyaXB0aW9uKSB8IGh0bWwgJV0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyUgVHJhbnNsYXRlKERhdGEuTmFtZSkgfCBodG1sICVdOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9InBhZGRpbmctbGVmdDogWyUgVHJhbnNsYXRlKERhdGEuSW5kZW50YXRpb24pIHwgaHRtbCAlXXB4OyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJSBEYXRhLlZhbHVlICVdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KWyUgUmVuZGVyQmxvY2tFbmQoIkRhdGEiKSAlXQpbJSBSZW5kZXJCbG9ja1N0YXJ0KCJBdHRhY2htZW50cyIpICVdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IlcyNXBjIiB0aXRsZT0iWyUgVHJhbnNsYXRlKCJBdHRhY2htZW50cyIpIHwgaHRtbCAlXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJSBUcmFuc2xhdGUoIkF0dGFjaG1lbnRzIikgfCBodG1sICVdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IlslIEVudigiQmFzZWxpbmsiKSAlXUFjdGlvbj1bJSBFbnYoIkFjdGlvbiIpICVdO1N1YmFjdGlvbj1Eb3dubG9hZEF0dGFjaG1lbnQ7RmlsZW5hbWU9WyUgRGF0YS5GaWxlbmFtZSB8IHVyaSAlXTtDb25maWdJdGVtSUQ9WyUgRGF0YS5Db25maWdJdGVtSUQgfCB1cmkgJV0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFslIERhdGEuRmlsZW5hbWUgfCBodG1sICVdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoWyUgRGF0YS5GaWxlc2l6ZSB8IGh0bWwgJV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KWyUgUmVuZGVyQmxvY2tFbmQoIkF0dGFjaG1lbnRzIikgJV0KWyUgUmVuZGVyQmxvY2tTdGFydCgiQXR0YWNobWVudFJvdyIpICVdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IlcyNXBjIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iWyUgRW52KCJCYXNlbGluayIpICVdQWN0aW9uPVslIEVudigiQWN0aW9uIikgJV07U3ViYWN0aW9uPURvd25sb2FkQXR0YWNobWVudDtGaWxlbmFtZT1bJSBEYXRhLkZpbGVuYW1lIHwgdXJpICVdO0NvbmZpZ0l0ZW1JRD1bJSBEYXRhLkNvbmZpZ0l0ZW1JRCB8IHVyaSAlXSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyUgRGF0YS5GaWxlbmFtZSB8IGh0bWwgJV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChbJSBEYXRhLkZpbGVzaXplIHwgaHRtbCAlXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgpbJSBSZW5kZXJCbG9ja0VuZCgiQXR0YWNobWVudFJvdyIpICVdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgpbJSBSZW5kZXJCbG9ja1N0YXJ0KCJMaW5rVGFibGVDb21wbGV4IikgJV0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ29udGVudCI+CiAgICAgICAgICAgICAgICBbJSBEYXRhLkxpbmtUYWJsZVN0cmcgJV0KICAgICAgICAgICAgPC9kaXY+ClslIFJlbmRlckJsb2NrRW5kKCJMaW5rVGFibGVDb21wbGV4IikgJV0KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJDbGVhciI+PC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CgpbJSBXUkFQUEVSIEpTT25Eb2N1bWVudENvbXBsZXRlICVdCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4vLzwhW0NEQVRBWwovKmdsb2JhbCBJVFNNOiB0cnVlICovCiAgICBJVFNNLkFnZW50Llpvb20uSW5pdChbJSBFbnYoIlVzZXJDb25maWdJdGVtWm9vbVRhYmxlSGVpZ2h0IikgJV0pOwoKICAgICQoJ3VsLkFjdGlvbnMgYS5Bc1BvcHVwJykuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoRXZlbnQpIHsKICAgICAgICBDb3JlLlVJLlBvcHVwLk9wZW5Qb3B1cCgkKHRoaXMpLmF0dHIoJ2hyZWYnKSwgJ0FjdGlvbicpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0pOwoKICAgICQoJ3VsLkFjdGlvbnMgYS5IaXN0b3J5QmFjaycpLmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24gKEV2ZW50KSB7CiAgICAgICAgaGlzdG9yeS5iYWNrKCk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSk7CgogICAgJCgnLk1hc3RlckFjdGlvbicpLmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24gKEV2ZW50KSB7CiAgICAgICAgdmFyICRNYXN0ZXJBY3Rpb25MaW5rID0gJCh0aGlzKS5maW5kKCcuTWFzdGVyQWN0aW9uTGluaycpOwogICAgICAgIC8vIG9ubHkgYWN0IGlmIHRoZSBsaW5rIHdhcyBub3QgY2xpY2tlZCBkaXJlY3RseQogICAgICAgIGlmIChFdmVudC50YXJnZXQgIT09ICRNYXN0ZXJBY3Rpb25MaW5rLmdldCgwKSkgewogICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSAkTWFzdGVyQWN0aW9uTGluay5hdHRyKCdocmVmJyk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9KTsKLy9dXT48L3NjcmlwdD4KWyUgRU5EICVdCg==</File>
        <File Location="Kernel/System/ImportExport/ObjectBackend/ITSMConfigItem.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMConfigItem.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMConfigItem/Definition.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMConfigItem/History.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMConfigItem/Number.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMConfigItem/Permission.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNvbmZpZ0l0ZW0vUGVybWlzc2lvbi5wbSAtIG1vZHVsZSBmb3IgSVRTTUNvbmZpZ0l0ZW0ucG0gd2l0aCBQZXJtaXNzaW9uIGZ1bmN0aW9ucwojIENvcHlyaWdodCAoQykgMjAwMS0yMDE1IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OklUU01Db25maWdJdGVtOjpQZXJtaXNzaW9uOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKb3VyICRPYmplY3RNYW5hZ2VyRGlzYWJsZWQgPSAxOwoKPWhlYWQxIE5BTUUKCktlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbTo6UGVybWlzc2lvbiAtIG1vZHVsZSBmb3IgSVRTTUNvbmZpZ0l0ZW0ucG0gd2l0aCBQZXJtaXNzaW9uIGZ1bmN0aW9ucwoKPWhlYWQxIFNZTk9QU0lTCgpBbGwgUGVybWlzc2lvbiBmdW5jdGlvbnMuCgo9aGVhZDEgUFVCTElDIElOVEVSRkFDRQoKPW92ZXIgNAoKPWN1dAoKPWl0ZW0gUGVybWlzc2lvbigpCgpyZXR1cm5zIHdoZXRoZXIgdGhlIHVzZXIgaGFzIHBlcm1pc3Npb25zIG9yIG5vdAoKICAgIG15ICRBY2Nlc3MgPSAkQ29uZmlnSXRlbU9iamVjdC0+UGVybWlzc2lvbigKICAgICAgICBUeXBlICAgICA9PiAncm8nLAogICAgICAgIFNjb3BlICAgID0+ICdDbGFzcycsICMgQ2xhc3MgfHwgSXRlbQogICAgICAgIENsYXNzSUQgID0+IDEyMywgICAgICMgaWYgU2NvcGUgaXMgJ0NsYXNzJwogICAgICAgIEl0ZW1JRCAgID0+IDEyMywgICAgICMgaWYgU2NvcGUgaXMgJ0l0ZW0nCiAgICAgICAgVXNlcklEICAgPT4gMTIzLAogICAgKTsKCm9yIHdpdGhvdXQgbG9nZ2luZywgZm9yIGV4YW1wbGUgZm9yIHRvIGNoZWNrIGlmIGEgbGluay9hY3Rpb24gc2hvdWxkIGJlIHNob3duCgogICAgbXkgJEFjY2VzcyA9ICRDb25maWdJdGVtT2JqZWN0LT5QZXJtaXNzaW9uKAogICAgICAgIFR5cGUgICAgID0+ICdybycsCiAgICAgICAgU2NvcGUgICAgPT4gJ0NsYXNzJywgIyBDbGFzcyB8fCBJdGVtCiAgICAgICAgQ2xhc3NJRCAgPT4gMTIzLCAgICAgIyBpZiBTY29wZSBpcyAnQ2xhc3MnCiAgICAgICAgSXRlbUlEICAgPT4gMTIzLCAgICAgIyBpZiBTY29wZSBpcyAnSXRlbScKICAgICAgICBMb2dObyAgICA9PiAxLAogICAgICAgIFVzZXJJRCAgID0+IDEyMywKICAgICk7Cgo9Y3V0CgpzdWIgUGVybWlzc2lvbiB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJE5lZWRlZCAocXcoVHlwZSBTY29wZSBVc2VySUQpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyROZWVkZWR9ICkgewogICAgICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkTmVlZGVkISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBjaGVjayBmb3IgZXhpc3RlbmNlIG9mIEl0ZW1JRCBvciBDbGFzc0lEIGRlcGVuZGVudAogICAgIyBvbiB0aGUgU2NvcGUKICAgIGlmICgKICAgICAgICAoICRQYXJhbXtTY29wZX0gZXEgJ0NsYXNzJyAmJiAhJFBhcmFte0NsYXNzSUR9ICkKICAgICAgICB8fCAoICRQYXJhbXtTY29wZX0gZXEgJ0l0ZW0nICYmICEkUGFyYW17SXRlbUlEfSApCiAgICAgICAgKQogICAgewogICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCBDbGFzc0lEIGlmIFNjb3BlIGlzICdDbGFzcycgb3IgSXRlbUlEIGlmIFNjb3BlIGlzICdJdGVtJyEiLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgcnVuIGFsbCBJVFNNQ29uZmlnSXRlbSBQZXJtaXNzaW9uIG1vZHVsZXMKICAgIGlmICgKICAgICAgICByZWYgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpDb25maWcnKS0+R2V0KCAnSVRTTUNvbmZpZ0l0ZW06OlBlcm1pc3Npb246OicgLiAkUGFyYW17U2NvcGV9ICkgZXEgJ0hBU0gnCiAgICAgICAgKQogICAgewogICAgICAgIG15ICVNb2R1bGVzID0gJXsKICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpDb25maWcnKS0+R2V0KCAnSVRTTUNvbmZpZ0l0ZW06OlBlcm1pc3Npb246OicgLiAkUGFyYW17U2NvcGV9ICkKICAgICAgICB9OwogICAgICAgIE1PRFVMRToKICAgICAgICBmb3IgbXkgJE1vZHVsZSAoIHNvcnQga2V5cyAlTW9kdWxlcyApIHsKCiAgICAgICAgICAgICMgbG9hZCBtb2R1bGUKICAgICAgICAgICAgbmV4dCBNT0RVTEUKICAgICAgICAgICAgICAgIGlmICEkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TWFpbicpLT5SZXF1aXJlKCAkTW9kdWxlc3skTW9kdWxlfS0+e01vZHVsZX0gKTsKCiAgICAgICAgICAgICMgY3JlYXRlIG9iamVjdAogICAgICAgICAgICBteSAkTW9kdWxlT2JqZWN0ID0gJE1vZHVsZXN7JE1vZHVsZX0tPntNb2R1bGV9LT5uZXcoKTsKCiAgICAgICAgICAgICMgZXhlY3V0ZSBSdW4oKQogICAgICAgICAgICBteSAkQWNjZXNzT2sgPSAkTW9kdWxlT2JqZWN0LT5SdW4oJVBhcmFtKTsKCiAgICAgICAgICAgICMgY2hlY2sgZ3JhbnRlZCBvcHRpb24gKHNob3VsZCBJIHNheSBvaykKICAgICAgICAgICAgaWYgKCAkQWNjZXNzT2sgJiYgJE1vZHVsZXN7JE1vZHVsZX0tPntHcmFudGVkfSApIHsKCiAgICAgICAgICAgICAgICAjIGFjY2VzcyBvawogICAgICAgICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgcmV0dXJuIGJlY2F1c2UgYWNjZXNzIGlzIGZhbHNlIGJ1dCBpdCdzIHJlcXVpcmVkCiAgICAgICAgICAgIGlmICggISRBY2Nlc3NPayAmJiAkTW9kdWxlc3skTW9kdWxlfS0+e1JlcXVpcmVkfSApIHsKICAgICAgICAgICAgICAgIGlmICggISRQYXJhbXtMb2dOb30gKSB7CiAgICAgICAgICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdub3RpY2UnLAogICAgICAgICAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiUGVybWlzc2lvbiBkZW5pZWQgYmVjYXVzZSBtb2R1bGUgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLiAiKCRNb2R1bGVzeyRNb2R1bGV9LT57TW9kdWxlfSkgaXMgcmVxdWlyZWQgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLiAiKFVzZXJJRDogJFBhcmFte1VzZXJJRH0gJyRQYXJhbXtUeXBlfScgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLiAib24gJFBhcmFte1Njb3BlfTogIiAuICRQYXJhbXsgJFBhcmFte1Njb3BlfSAuICdJRCcgfSAuICIpISIsCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAjIGFjY2VzcyBub3Qgb2sKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAjIGRvbid0IGdyYW50IGFjY2VzcwogICAgaWYgKCAhJFBhcmFte0xvZ05vfSApIHsKICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ25vdGljZScsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJQZXJtaXNzaW9uIGRlbmllZCAoVXNlcklEOiAkUGFyYW17VXNlcklEfSAnJFBhcmFte1R5cGV9JyAiCiAgICAgICAgICAgICAgICAuICJvbiAkUGFyYW17U2NvcGV9OiAiIC4gJFBhcmFteyAkUGFyYW17U2NvcGV9IC4gJ0lEJyB9IC4gIikhIiwKICAgICAgICApOwogICAgfQoKICAgIHJldHVybjsKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChodHRwOi8vb3Rycy5vcmcvKS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="Kernel/System/ITSMConfigItem/Version.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMConfigItem/XML.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/ITSMConfigItem/Event/DoHistory.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNvbmZpZ0l0ZW0vRXZlbnQvRG9IaXN0b3J5LnBtIC0gYSBldmVudCBtb2R1bGUgZm9yIGNvbmZpZyBpdGVtcwojIENvcHlyaWdodCAoQykgMjAwMS0yMDE1IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OklUU01Db25maWdJdGVtOjpFdmVudDo6RG9IaXN0b3J5OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoCiAgICAnS2VybmVsOjpTeXN0ZW06OklUU01Db25maWdJdGVtJywKICAgICdLZXJuZWw6OlN5c3RlbTo6TG9nJywKKTsKCj1oZWFkMSBOQU1FCgpLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW06OkV2ZW50OjpEb0hpc3RvcnkgLSBFdmVudCBoYW5kbGVyIHRoYXQgZG9lcyB0aGUgaGlzdG9yeQoKPWhlYWQxIFNZTk9QU0lTCgpBbGwgZXZlbnQgaGFuZGxlciBmdW5jdGlvbnMgZm9yIGhpc3RvcnkuCgo9aGVhZDEgUFVCTElDIElOVEVSRkFDRQoKPW92ZXIgNAoKPWN1dAoKPWl0ZW0gbmV3KCkKCmNyZWF0ZSBhbiBvYmplY3QKCiAgICB1c2UgS2VybmVsOjpTeXN0ZW06Ok9iamVjdE1hbmFnZXI7CiAgICBsb2NhbCAkS2VybmVsOjpPTSA9IEtlcm5lbDo6U3lzdGVtOjpPYmplY3RNYW5hZ2VyLT5uZXcoKTsKICAgIG15ICREb0hpc3RvcnlPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW06OkV2ZW50OjpEb0hpc3RvcnknKTsKCj1jdXQKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBSdW4oKQoKVGhpcyBtZXRob2QgaGFuZGxlcyB0aGUgZXZlbnQuCgogICAgJERvSGlzdG9yeU9iamVjdC0+UnVuKAogICAgICAgIEV2ZW50ID0+ICdDb25maWdJdGVtQ3JlYXRlJywKICAgICAgICBEYXRhICA9PiB7CiAgICAgICAgICAgIENvbW1lbnQgICAgICA9PiAnbmV3IHZhbHVlOiAxJywKICAgICAgICAgICAgQ29uZmlnSXRlbUlEID0+IDEyMywKICAgICAgICB9LAogICAgICAgIFVzZXJJRCA9PiAxLAogICAgKTsKCj1jdXQKCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFzIERlZmluaXRpb25DcmVhdGUgZG9lcyBub3QgYmVsb25nIHRvIGFuIGl0ZW0sIHdlIGRvbid0IGNyZWF0ZQogICAgIyBhIGhpc3RvcnkgZW50cnkKICAgIGlmICggJFBhcmFte0V2ZW50fSAmJiAkUGFyYW17RXZlbnR9IGVxICdEZWZpbml0aW9uQ3JlYXRlJyApIHsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkTmVlZGVkIChxdyhEYXRhIEV2ZW50IFVzZXJJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JE5lZWRlZH0gKSB7CiAgICAgICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICROZWVkZWQhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIGR1ZSB0byBjb25zaXN0ZW5jeSB3aXRoIHRpY2tldCBoaXN0b3J5LCB3ZSBuZWVkIEhpc3RvcnlUeXBlCiAgICAkUGFyYW17SGlzdG9yeVR5cGV9ID0gJFBhcmFte0V2ZW50fTsKCiAgICAjIGRpc3BhdGNoIHRhYmxlIGZvciBhbGwgZXZlbnRzCiAgICBteSAlRGlzcGF0Y2hlciA9ICgKICAgICAgICBDb25maWdJdGVtQ3JlYXRlICAgICAgPT4gXCZfSGlzdG9yeUFkZCwKICAgICAgICBDb25maWdJdGVtRGVsZXRlICAgICAgPT4gXCZfQ29uZmlnSXRlbURlbGV0ZSwKICAgICAgICBMaW5rQWRkICAgICAgICAgICAgICAgPT4gXCZfSGlzdG9yeUFkZCwKICAgICAgICBMaW5rRGVsZXRlICAgICAgICAgICAgPT4gXCZfSGlzdG9yeUFkZCwKICAgICAgICBOYW1lVXBkYXRlICAgICAgICAgICAgPT4gXCZfSGlzdG9yeUFkZCwKICAgICAgICBJbmNpZGVudFN0YXRlVXBkYXRlICAgPT4gXCZfSGlzdG9yeUFkZCwKICAgICAgICBEZXBsb3ltZW50U3RhdGVVcGRhdGUgPT4gXCZfSGlzdG9yeUFkZCwKICAgICAgICBEZWZpbml0aW9uVXBkYXRlICAgICAgPT4gXCZfSGlzdG9yeUFkZCwKICAgICAgICBWZXJzaW9uQ3JlYXRlICAgICAgICAgPT4gXCZfSGlzdG9yeUFkZCwKICAgICAgICBWYWx1ZVVwZGF0ZSAgICAgICAgICAgPT4gXCZfSGlzdG9yeUFkZCwKICAgICAgICBEZWZpbml0aW9uQ3JlYXRlICAgICAgPT4gXCZfSGlzdG9yeUFkZCwKICAgICAgICBWZXJzaW9uRGVsZXRlICAgICAgICAgPT4gXCZfSGlzdG9yeUFkZCwKICAgICAgICBBdHRhY2htZW50QWRkUG9zdCAgICAgPT4gXCZfSGlzdG9yeUFkZCwKICAgICAgICBBdHRhY2htZW50RGVsZXRlUG9zdCAgPT4gXCZfSGlzdG9yeUFkZCwKICAgICk7CgogICAgIyBlcnJvciBoYW5kbGluZwogICAgaWYgKCAhZXhpc3RzICREaXNwYXRjaGVyeyAkUGFyYW17RXZlbnR9IH0gKSB7CiAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdub24gZXhpc3RhbnQgaGlzdG9yeSB0eXBlOiAnIC4gJFBhcmFte0V2ZW50fSwKICAgICAgICApOwoKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyBjYWxsIGNhbGxiYWNrCiAgICBteSAkU3ViID0gJERpc3BhdGNoZXJ7ICRQYXJhbXtFdmVudH0gfTsKICAgICRTZWxmLT4kU3ViKAogICAgICAgICVQYXJhbSwKICAgICAgICAleyAkUGFyYW17RGF0YX0gfSwKICAgICk7CgogICAgcmV0dXJuIDE7Cn0KCj1pdGVtIF9Db25maWdJdGVtRGVsZXRlKCkKCmhpc3RvcnkncyBldmVudCBoYW5kbGVyIGZvciBDb25maWdJdGVtRGVsZXRlCgo9Y3V0CgpzdWIgX0NvbmZpZ0l0ZW1EZWxldGUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGRlbGV0ZSBoaXN0b3J5CiAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW0nKS0+SGlzdG9yeURlbGV0ZSgKICAgICAgICBDb25maWdJdGVtSUQgPT4gJFBhcmFte0NvbmZpZ0l0ZW1JRH0sCiAgICApOwoKICAgIHJldHVybiAxOwp9Cgo9aXRlbSBfSGlzdG9yeUFkZCgpCgpoaXN0b3J5J3MgZGVmYXVsdCBldmVudCBoYW5kbGVyLgoKPWN1dAoKc3ViIF9IaXN0b3J5QWRkIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBhZGQgaGlzdG9yeSBlbnRyeQogICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OklUU01Db25maWdJdGVtJyktPkhpc3RvcnlBZGQoCiAgICAgICAgJVBhcmFtLAogICAgKTsKCiAgICByZXR1cm4gMTsKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChodHRwOi8vb3Rycy5vcmcvKS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="Kernel/System/ITSMConfigItem/Number/AutoIncrement.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNvbmZpZ0l0ZW0vTnVtYmVyL0F1dG9JbmNyZW1lbnQucG0gLSBjb25maWcgaXRlbSBudW1iZXIgYmFja2VuZCBtb2R1bGUKIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxNSBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbTo6TnVtYmVyOjpBdXRvSW5jcmVtZW50OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKb3VyICRPYmplY3RNYW5hZ2VyRGlzYWJsZWQgPSAxOwoKPWhlYWQxIE5BTUUKCktlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbTo6TnVtYmVyOjpBdXRvSW5jcmVtZW50IC0gY29uZmlnIGl0ZW0gbnVtYmVyIGJhY2tlbmQgbW9kdWxlCgo9aGVhZDEgU1lOT1BTSVMKCkFsbCBhdXRvIGluY3JlbWVudCBjb25maWcgaXRlbSBudW1iZXIgZnVuY3Rpb25zCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBfQ29uZmlnSXRlbU51bWJlckNyZWF0ZSgpCgpjcmVhdGUgYSBuZXcgY29uZmlnIGl0ZW0gbnVtYmVyCgogICAgbXkgJE51bWJlciA9ICRCYWNrZW5kT2JqZWN0LT5fQ29uZmlnSXRlbU51bWJlckNyZWF0ZSgKICAgICAgICBDbGFzc0lEID0+IDEyMywKICAgICk7Cgo9Y3V0CgpzdWIgX0NvbmZpZ0l0ZW1OdW1iZXJDcmVhdGUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgaWYgKCAhJFBhcmFte0NsYXNzSUR9ICkgewogICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICBNZXNzYWdlICA9PiAnTmVlZCBDbGFzc0lEIScsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyBnZXQgc3lzdGVtIGlkCiAgICBteSAkU3lzdGVtSUQgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpLT5HZXQoJ1N5c3RlbUlEJyk7CgogICAgIyBnZXQgY3VycmVudCBjb3VudGVyCiAgICBteSAkQ3VycmVudENvdW50ZXIgPSAkU2VsZi0+Q3VycmVudENvdW50ZXJHZXQoCiAgICAgICAgQ2xhc3NJRCA9PiAkUGFyYW17Q2xhc3NJRH0sCiAgICAgICAgVHlwZSAgICA9PiAnQXV0b0luY3JlbWVudCcsCiAgICApIHx8IDA7CgogICAgQ0lQSEVSOgogICAgZm9yIG15ICRDaXBoZXIgKCAxIC4uIDFfMDAwXzAwMF8wMDAgKSB7CgogICAgICAgICMgY3JlYXRlIG5ldyBudW1iZXIKICAgICAgICBteSAkTnVtYmVyID0gJFN5c3RlbUlEIC4gJFBhcmFte0NsYXNzSUR9IC4gc3ByaW50ZiggIiUwNmQiLCAoICRDdXJyZW50Q291bnRlciArICRDaXBoZXIgKSApOwoKICAgICAgICAjIGZpbmQgZXhpc3RpbmcgbnVtYmVyCiAgICAgICAgbXkgJER1cGxpY2F0ZSA9ICRTZWxmLT5Db25maWdJdGVtTnVtYmVyTG9va3VwKAogICAgICAgICAgICBDb25maWdJdGVtTnVtYmVyID0+ICROdW1iZXIsCiAgICAgICAgKTsKCiAgICAgICAgbmV4dCBDSVBIRVIgaWYgJER1cGxpY2F0ZTsKCiAgICAgICAgIyBzZXQgY291bnRlcgogICAgICAgICRTZWxmLT5DdXJyZW50Q291bnRlclNldCgKICAgICAgICAgICAgQ2xhc3NJRCA9PiAkUGFyYW17Q2xhc3NJRH0sCiAgICAgICAgICAgIFR5cGUgICAgPT4gJ0F1dG9JbmNyZW1lbnQnLAogICAgICAgICAgICBDb3VudGVyID0+ICggJEN1cnJlbnRDb3VudGVyICsgJENpcGhlciApLAogICAgICAgICk7CgogICAgICAgIHJldHVybiAkTnVtYmVyOwogICAgfQoKICAgIHJldHVybjsKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChodHRwOi8vb3Rycy5vcmcvKS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="Kernel/System/ITSMConfigItem/Permission/ClassGroupCheck.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNvbmZpZ0l0ZW0vUGVybWlzc2lvbi9DbGFzc0dyb3VwQ2hlY2sucG0gLSBjaGVjayBpZiBhIHVzZXIgYmVsb25ncyB0byBhIGdyb3VwCiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTUgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW06OlBlcm1pc3Npb246OkNsYXNzR3JvdXBDaGVjazsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpHZW5lcmFsQ2F0YWxvZycsCiAgICAnS2VybmVsOjpTeXN0ZW06Okdyb3VwJywKICAgICdLZXJuZWw6OlN5c3RlbTo6TG9nJywKKTsKCj1oZWFkMSBOQU1FCgpLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW06OlBlcm1pc3Npb246OkNsYXNzR3JvdXBDaGVjayAtIGNoZWNrIGlmIGEgdXNlciBiZWxvbmdzIHRvIGEgZ3JvdXAKCj1oZWFkMSBTWU5PUFNJUwoKPWhlYWQxIFBVQkxJQyBJTlRFUkZBQ0UKCj1vdmVyIDQKCj1jdXQKCj1pdGVtIG5ldygpCgpjcmVhdGUgYW4gb2JqZWN0CgogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpPYmplY3RNYW5hZ2VyOwogICAgbG9jYWwgJEtlcm5lbDo6T00gPSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlci0+bmV3KCk7CiAgICBteSAkQ2hlY2tPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW06OlBlcm1pc3Npb246OkNsYXNzR3JvdXBDaGVjaycpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIFJ1bigpCgp0aGlzIG1ldGhvZCBkb2VzIHRoZSBjaGVjayBpZiB0aGUgdXNlIGJlbG9uZ3MgdG8gYSBnaXZlbiBncm91cAoKICAgIG15ICRIYXNBY2Nlc3MgPSAkQ2hlY2tPYmplY3QtPlJ1bigKICAgICAgICBVc2VySUQgID0+IDEyMywKICAgICAgICBUeXBlICAgID0+ICdybycsCiAgICAgICAgQ2xhc3NJRCA9PiAnSVRTTTo6Q29uZmlnSXRlbTo6Q2xhc3M6OkNvbXB1dGVyJywKICAgICk7Cgo9Y3V0CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkTmVlZGVkIChxdyhVc2VySUQgVHlwZSBDbGFzc0lEKSkgewogICAgICAgIGlmICggISRQYXJhbXskTmVlZGVkfSApIHsKICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJE5lZWRlZCEiLAogICAgICAgICAgICApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgICMgZ2V0IENsYXNzIGRhdGEKICAgIG15ICRDbGFzc0l0ZW0gPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6R2VuZXJhbENhdGFsb2cnKS0+SXRlbUdldCgKICAgICAgICBJdGVtSUQgPT4gJFBhcmFte0NsYXNzSUR9LAogICAgKTsKCiAgICAjIGdldCB1c2VyIGdyb3VwcwogICAgbXkgQEdyb3VwSURzID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06Okdyb3VwJyktPkdyb3VwTWVtYmVyTGlzdCgKICAgICAgICBVc2VySUQgPT4gJFBhcmFte1VzZXJJRH0sCiAgICAgICAgVHlwZSAgID0+ICRQYXJhbXtUeXBlfSwKICAgICAgICBSZXN1bHQgPT4gJ0lEJywKICAgICAgICBDYWNoZWQgPT4gMSwKICAgICk7CgogICAgIyBsb29raW5nIGZvciBncm91cCBpZCwgcmV0dXJuIGFjY2VzcyBpZiB1c2VyIGlzIGluIGdyb3VwCiAgICBmb3IgbXkgJEdyb3VwSUQgKEBHcm91cElEcykgewogICAgICAgIHJldHVybiAxIGlmICRDbGFzc0l0ZW0tPntQZXJtaXNzaW9ufSAmJiAkR3JvdXBJRCBlcSAkQ2xhc3NJdGVtLT57UGVybWlzc2lvbn07CiAgICB9CgogICAgIyByZXR1cm4gbm8gYWNjZXNzCiAgICByZXR1cm47Cn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIFNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwOi8vb3Rycy5vcmcvPikuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="Kernel/System/ITSMConfigItem/Permission/ItemClassGroupCheck.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNvbmZpZ0l0ZW0vUGVybWlzc2lvbi9JdGVtQ2xhc3NHcm91cENoZWNrLnBtIC0gY2hlY2sgaWYgYSB1c2VyIGNhbiBhY2Nlc3MgYW4gaXRlbQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE1IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OklUU01Db25maWdJdGVtOjpQZXJtaXNzaW9uOjpJdGVtQ2xhc3NHcm91cENoZWNrOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoCiAgICAnS2VybmVsOjpTeXN0ZW06OkdlbmVyYWxDYXRhbG9nJywKICAgICdLZXJuZWw6OlN5c3RlbTo6R3JvdXAnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbScsCiAgICAnS2VybmVsOjpTeXN0ZW06OkxvZycsCik7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OklUU01Db25maWdJdGVtOjpQZXJtaXNzaW9uOjpJdGVtQ2xhc3NHcm91cENoZWNrIC0gY2hlY2sgaWYgYSB1c2VyIGNhbiBhY2Nlc3MgYW4gaXRlbQoKPWhlYWQxIFNZTk9QU0lTCgpBbGwgY29uZmlnIGl0ZW0gZnVuY3Rpb25zLgoKPWhlYWQxIFBVQkxJQyBJTlRFUkZBQ0UKCj1vdmVyIDQKCj1jdXQKCj1pdGVtIG5ldygpCgpjcmVhdGUgYW4gb2JqZWN0CgogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpPYmplY3RNYW5hZ2VyOwogICAgbG9jYWwgJEtlcm5lbDo6T00gPSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlci0+bmV3KCk7CiAgICBteSAkQ2hlY2tPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW06OlBlcm1pc3Npb246Okl0ZW1DbGFzc0dyb3VwQ2hlY2snKTsKCj1jdXQKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBSdW4oKQoKdGhpcyBtZXRob2QgZG9lcyB0aGUgY2hlY2sgaWYgdGhlIHVzZXIgY2FuIGFjY2VzcyBhbiBpdGVtCgogICAgbXkgJEhhc0FjY2VzcyA9ICRDaGVja09iamVjdC0+UnVuKAogICAgICAgIFVzZXJJRCA9PiAxMjMsCiAgICAgICAgVHlwZSAgID0+ICdybycsCiAgICAgICAgSXRlbUlEID0+IDM0NSwKICAgICk7Cgo9Y3V0CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkTmVlZGVkIChxdyhVc2VySUQgVHlwZSBJdGVtSUQpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyROZWVkZWR9ICkgewogICAgICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkTmVlZGVkISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBnZXQgY29uZmlnIGl0ZW0gZGF0YQogICAgbXkgJENvbmZpZ0l0ZW0gPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW0nKS0+Q29uZmlnSXRlbUdldCgKICAgICAgICBDb25maWdJdGVtSUQgPT4gJFBhcmFte0l0ZW1JRH0sCiAgICApOwoKICAgICMgZ2V0IENsYXNzIGRhdGEKICAgIG15ICRDbGFzc0l0ZW0gPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6R2VuZXJhbENhdGFsb2cnKS0+SXRlbUdldCgKICAgICAgICBJdGVtSUQgPT4gJENvbmZpZ0l0ZW0tPntDbGFzc0lEfQogICAgKTsKCiAgICAjIGdldCB1c2VyIGdyb3VwcwogICAgbXkgQEdyb3VwSURzID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06Okdyb3VwJyktPkdyb3VwTWVtYmVyTGlzdCgKICAgICAgICBVc2VySUQgPT4gJFBhcmFte1VzZXJJRH0sCiAgICAgICAgVHlwZSAgID0+ICRQYXJhbXtUeXBlfSwKICAgICAgICBSZXN1bHQgPT4gJ0lEJywKICAgICAgICBDYWNoZWQgPT4gMSwKICAgICk7CgogICAgIyBsb29raW5nIGZvciBncm91cCBpZCwgcmV0dXJuIGFjY2VzcyBpZiB1c2VyIGlzIGluIGdyb3VwCiAgICBmb3IgbXkgJEdyb3VwSUQgKEBHcm91cElEcykgewogICAgICAgIHJldHVybiAxIGlmICRDbGFzc0l0ZW0tPntQZXJtaXNzaW9ufSAmJiAkR3JvdXBJRCBlcSAkQ2xhc3NJdGVtLT57UGVybWlzc2lvbn07CiAgICB9CgogICAgIyByZXR1cm4gbm8gYWNjZXNzCiAgICByZXR1cm47Cn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIFNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwOi8vb3Rycy5vcmcvPikuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="Kernel/System/ITSMConfigItem/XML/Type/Customer.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNvbmZpZ0l0ZW0vWE1ML1R5cGUvQ3VzdG9tZXIucG0gLSB4bWwgYmFja2VuZCBtb2R1bGUKIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxNSBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbTo6WE1MOjpUeXBlOjpDdXN0b21lcjsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpDdXN0b21lclVzZXInLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpMb2cnLAopOwoKPWhlYWQxIE5BTUUKCktlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbTo6WE1MOjpUeXBlOjpDdXN0b21lciAtIHhtbCBiYWNrZW5kIG1vZHVsZQoKPWhlYWQxIFNZTk9QU0lTCgpBbGwgeG1sIGZ1bmN0aW9ucyBvZiBjdXN0b21lciBvYmplY3RzCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKY3JlYXRlIGFuIG9iamVjdAoKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlcjsKICAgIGxvY2FsICRLZXJuZWw6Ok9NID0gS2VybmVsOjpTeXN0ZW06Ok9iamVjdE1hbmFnZXItPm5ldygpOwogICAgbXkgJFhNTFR5cGVDdXN0b21lckJhY2tlbmRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW06OlhNTDo6VHlwZTo6Q3VzdG9tZXInKTsKCj1jdXQKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBWYWx1ZUxvb2t1cCgpCgpnZXQgdGhlIHhtbCBkYXRhIG9mIGEgdmVyc2lvbgoKICAgIG15ICRWYWx1ZSA9ICRCYWNrZW5kT2JqZWN0LT5WYWx1ZUxvb2t1cCgKICAgICAgICBWYWx1ZSA9PiAxMSwgIyAob3B0aW9uYWwpCiAgICApOwoKPWN1dAoKc3ViIFZhbHVlTG9va3VwIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuICcnIGlmICEkUGFyYW17VmFsdWV9OwoKICAgIG15ICVDdXN0b21lclNlYXJjaExpc3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6Q3VzdG9tZXJVc2VyJyktPkN1c3RvbWVyU2VhcmNoKAogICAgICAgIFNlYXJjaCA9PiAkUGFyYW17VmFsdWV9LAogICAgKTsKCiAgICByZXR1cm4gJEN1c3RvbWVyU2VhcmNoTGlzdHsgJFBhcmFte1ZhbHVlfSB9IHx8ICRQYXJhbXtWYWx1ZX07Cn0KCj1pdGVtIFN0YXRzQXR0cmlidXRlQ3JlYXRlKCkKCmNyZWF0ZSBhIGF0dHJpYnV0ZSBhcnJheSBmb3IgdGhlIHN0YXRzIGZyYW1ld29yawoKICAgIG15ICRBdHRyaWJ1dGUgPSAkQmFja2VuZE9iamVjdC0+U3RhdHNBdHRyaWJ1dGVDcmVhdGUoCiAgICAgICAgS2V5ID0+ICdLZXk6OlN1YmtleScsCiAgICAgICAgTmFtZSA9PiAnTmFtZScsCiAgICAgICAgSXRlbSA9PiAkSXRlbVJlZiwKICAgICk7Cgo9Y3V0CgpzdWIgU3RhdHNBdHRyaWJ1dGVDcmVhdGUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICRBcmd1bWVudCAocXcoS2V5IE5hbWUgSXRlbSkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBjcmVhdGUgYXJydGlidXRlCiAgICBteSAkQXR0cmlidXRlID0gWwogICAgICAgIHsKICAgICAgICAgICAgTmFtZSAgICAgICAgICAgICA9PiAkUGFyYW17TmFtZX0sCiAgICAgICAgICAgIFVzZUFzWHZhbHVlICAgICAgPT4gMCwKICAgICAgICAgICAgVXNlQXNWYWx1ZVNlcmllcyA9PiAwLAogICAgICAgICAgICBVc2VBc1Jlc3RyaWN0aW9uID0+IDEsCiAgICAgICAgICAgIEVsZW1lbnQgICAgICAgICAgPT4gJFBhcmFte0tleX0sCiAgICAgICAgICAgIEJsb2NrICAgICAgICAgICAgPT4gJ0lucHV0RmllbGQnLAogICAgICAgIH0sCiAgICBdOwoKICAgIHJldHVybiAkQXR0cmlidXRlOwp9Cgo9aXRlbSBFeHBvcnRTZWFyY2hWYWx1ZVByZXBhcmUoKQoKcHJlcGFyZSBzZWFyY2ggdmFsdWUgZm9yIGV4cG9ydAoKICAgIG15ICRBcnJheVJlZiA9ICRCYWNrZW5kT2JqZWN0LT5FeHBvcnRTZWFyY2hWYWx1ZVByZXBhcmUoCiAgICAgICAgVmFsdWUgPT4gMTEsICMgKG9wdGlvbmFsKQogICAgKTsKCj1jdXQKCnN1YiBFeHBvcnRTZWFyY2hWYWx1ZVByZXBhcmUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gaWYgIWRlZmluZWQgJFBhcmFte1ZhbHVlfTsKICAgIHJldHVybiAkUGFyYW17VmFsdWV9Owp9Cgo9aXRlbSBFeHBvcnRWYWx1ZVByZXBhcmUoKQoKcHJlcGFyZSB2YWx1ZSBmb3IgZXhwb3J0CgogICAgbXkgJFZhbHVlID0gJEJhY2tlbmRPYmplY3QtPkV4cG9ydFZhbHVlUHJlcGFyZSgKICAgICAgICBWYWx1ZSA9PiAxMSwgIyAob3B0aW9uYWwpCiAgICApOwoKPWN1dAoKc3ViIEV4cG9ydFZhbHVlUHJlcGFyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiBpZiAhZGVmaW5lZCAkUGFyYW17VmFsdWV9OwogICAgcmV0dXJuICRQYXJhbXtWYWx1ZX07Cn0KCj1pdGVtIEltcG9ydFNlYXJjaFZhbHVlUHJlcGFyZSgpCgpwcmVwYXJlIHNlYXJjaCB2YWx1ZSBmb3IgaW1wb3J0CgogICAgbXkgJEFycmF5UmVmID0gJEJhY2tlbmRPYmplY3QtPkltcG9ydFNlYXJjaFZhbHVlUHJlcGFyZSgKICAgICAgICBWYWx1ZSA9PiAxMSwgIyAob3B0aW9uYWwpCiAgICApOwoKPWN1dAoKc3ViIEltcG9ydFNlYXJjaFZhbHVlUHJlcGFyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiBpZiAhZGVmaW5lZCAkUGFyYW17VmFsdWV9OwogICAgcmV0dXJuICRQYXJhbXtWYWx1ZX07Cn0KCj1pdGVtIEltcG9ydFZhbHVlUHJlcGFyZSgpCgpwcmVwYXJlIHZhbHVlIGZvciBpbXBvcnQKCiAgICBteSAkVmFsdWUgPSAkQmFja2VuZE9iamVjdC0+SW1wb3J0VmFsdWVQcmVwYXJlKAogICAgICAgIFZhbHVlID0+IDExLCAjIChvcHRpb25hbCkKICAgICk7Cgo9Y3V0CgpzdWIgSW1wb3J0VmFsdWVQcmVwYXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuIGlmICFkZWZpbmVkICRQYXJhbXtWYWx1ZX07CiAgICByZXR1cm4gJFBhcmFte1ZhbHVlfTsKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChodHRwOi8vb3Rycy5vcmcvKS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="Kernel/System/ITSMConfigItem/XML/Type/CustomerCompany.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNvbmZpZ0l0ZW0vWE1ML1R5cGUvQ3VzdG9tZXJDb21wYW55LnBtIC0geG1sIGJhY2tlbmQgbW9kdWxlCiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTUgT1RSUyBBRywgaHR0cDovL290cnMuY29tLwojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKcGFja2FnZSBLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW06OlhNTDo6VHlwZTo6Q3VzdG9tZXJDb21wYW55OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoCiAgICAnS2VybmVsOjpTeXN0ZW06OkN1c3RvbWVyQ29tcGFueScsCiAgICAnS2VybmVsOjpTeXN0ZW06OkxvZycsCik7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OklUU01Db25maWdJdGVtOjpYTUw6OlR5cGU6OkN1c3RvbWVyQ29tcGFueSAtIHhtbCBiYWNrZW5kIG1vZHVsZQoKPWhlYWQxIFNZTk9QU0lTCgpBbGwgeG1sIGZ1bmN0aW9ucyBvZiBjdXN0b21lciBjb21wYW55IG9iamVjdHMKCj1vdmVyIDQKCj1jdXQKCj1pdGVtIG5ldygpCgpjcmVhdGUgYW4gb2JqZWN0CgogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpPYmplY3RNYW5hZ2VyOwogICAgbG9jYWwgJEtlcm5lbDo6T00gPSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlci0+bmV3KCk7CiAgICBteSAkWE1MVHlwZUN1c3RvbWVyQ29tcGFueUJhY2tlbmRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW06OlhNTDo6VHlwZTo6Q3VzdG9tZXJDb21wYW55Jyk7Cgo9Y3V0CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKPWl0ZW0gVmFsdWVMb29rdXAoKQoKZ2V0IHRoZSB4bWwgZGF0YSBvZiBhIHZlcnNpb24KCiAgICBteSAkVmFsdWUgPSAkQmFja2VuZE9iamVjdC0+VmFsdWVMb29rdXAoCiAgICAgICAgVmFsdWUgPT4gMTEsICMgKG9wdGlvbmFsKQogICAgKTsKCj1jdXQKCnN1YiBWYWx1ZUxvb2t1cCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiAnJyBpZiAhJFBhcmFte1ZhbHVlfTsKCiAgICBteSAlQ3VzdG9tZXJDb21wYW55ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkN1c3RvbWVyQ29tcGFueScpLT5DdXN0b21lckNvbXBhbnlHZXQoCiAgICAgICAgQ3VzdG9tZXJJRCA9PiAkUGFyYW17VmFsdWV9LAogICAgKTsKCiAgICByZXR1cm4gJEN1c3RvbWVyQ29tcGFueXtDdXN0b21lckNvbXBhbnlOYW1lfSB8fCAnJzsKfQoKPWl0ZW0gU3RhdHNBdHRyaWJ1dGVDcmVhdGUoKQoKY3JlYXRlIGEgYXR0cmlidXRlIGFycmF5IGZvciB0aGUgc3RhdHMgZnJhbWV3b3JrCgogICAgbXkgJEF0dHJpYnV0ZSA9ICRCYWNrZW5kT2JqZWN0LT5TdGF0c0F0dHJpYnV0ZUNyZWF0ZSgKICAgICAgICBLZXkgPT4gJ0tleTo6U3Via2V5JywKICAgICAgICBOYW1lID0+ICdOYW1lJywKICAgICAgICBJdGVtID0+ICRJdGVtUmVmLAogICAgKTsKCj1jdXQKCnN1YiBTdGF0c0F0dHJpYnV0ZUNyZWF0ZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJEFyZ3VtZW50IChxdyhLZXkgTmFtZSBJdGVtKSkgewogICAgICAgIGlmICggISRQYXJhbXskQXJndW1lbnR9ICkgewogICAgICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkQXJndW1lbnQhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIGNyZWF0ZSBhdHRyaWJ1dGUKICAgIG15ICRBdHRyaWJ1dGUgPSBbCiAgICAgICAgewogICAgICAgICAgICBOYW1lICAgICAgICAgICAgID0+ICRQYXJhbXtOYW1lfSwKICAgICAgICAgICAgVXNlQXNYdmFsdWUgICAgICA9PiAwLAogICAgICAgICAgICBVc2VBc1ZhbHVlU2VyaWVzID0+IDAsCiAgICAgICAgICAgIFVzZUFzUmVzdHJpY3Rpb24gPT4gMSwKICAgICAgICAgICAgRWxlbWVudCAgICAgICAgICA9PiAkUGFyYW17S2V5fSwKICAgICAgICAgICAgQmxvY2sgICAgICAgICAgICA9PiAnSW5wdXRGaWVsZCcsCiAgICAgICAgfSwKICAgIF07CgogICAgcmV0dXJuICRBdHRyaWJ1dGU7Cn0KCj1pdGVtIEV4cG9ydFNlYXJjaFZhbHVlUHJlcGFyZSgpCgpwcmVwYXJlIHNlYXJjaCB2YWx1ZSBmb3IgZXhwb3J0CgogICAgbXkgJEFycmF5UmVmID0gJEJhY2tlbmRPYmplY3QtPkV4cG9ydFNlYXJjaFZhbHVlUHJlcGFyZSgKICAgICAgICBWYWx1ZSA9PiAxMSwgIyAob3B0aW9uYWwpCiAgICApOwoKPWN1dAoKc3ViIEV4cG9ydFNlYXJjaFZhbHVlUHJlcGFyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiBpZiAhZGVmaW5lZCAkUGFyYW17VmFsdWV9OwogICAgcmV0dXJuICRQYXJhbXtWYWx1ZX07Cn0KCj1pdGVtIEV4cG9ydFZhbHVlUHJlcGFyZSgpCgpwcmVwYXJlIHZhbHVlIGZvciBleHBvcnQKCiAgICBteSAkVmFsdWUgPSAkQmFja2VuZE9iamVjdC0+RXhwb3J0VmFsdWVQcmVwYXJlKAogICAgICAgIFZhbHVlID0+IDExLCAjIChvcHRpb25hbCkKICAgICk7Cgo9Y3V0CgpzdWIgRXhwb3J0VmFsdWVQcmVwYXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuIGlmICFkZWZpbmVkICRQYXJhbXtWYWx1ZX07CiAgICByZXR1cm4gJFBhcmFte1ZhbHVlfTsKfQoKPWl0ZW0gSW1wb3J0U2VhcmNoVmFsdWVQcmVwYXJlKCkKCnByZXBhcmUgc2VhcmNoIHZhbHVlIGZvciBpbXBvcnQKCiAgICBteSAkQXJyYXlSZWYgPSAkQmFja2VuZE9iamVjdC0+SW1wb3J0U2VhcmNoVmFsdWVQcmVwYXJlKAogICAgICAgIFZhbHVlID0+IDExLCAjIChvcHRpb25hbCkKICAgICk7Cgo9Y3V0CgpzdWIgSW1wb3J0U2VhcmNoVmFsdWVQcmVwYXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuIGlmICFkZWZpbmVkICRQYXJhbXtWYWx1ZX07CiAgICByZXR1cm4gJFBhcmFte1ZhbHVlfTsKfQoKPWl0ZW0gSW1wb3J0VmFsdWVQcmVwYXJlKCkKCnByZXBhcmUgdmFsdWUgZm9yIGltcG9ydAoKICAgIG15ICRWYWx1ZSA9ICRCYWNrZW5kT2JqZWN0LT5JbXBvcnRWYWx1ZVByZXBhcmUoCiAgICAgICAgVmFsdWUgPT4gMTEsICMgKG9wdGlvbmFsKQogICAgKTsKCj1jdXQKCnN1YiBJbXBvcnRWYWx1ZVByZXBhcmUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gaWYgIWRlZmluZWQgJFBhcmFte1ZhbHVlfTsKICAgIHJldHVybiAkUGFyYW17VmFsdWV9Owp9CgoxOwoKPWJhY2sKCj1oZWFkMSBURVJNUyBBTkQgQ09ORElUSU9OUwoKVGhpcyBzb2Z0d2FyZSBpcyBwYXJ0IG9mIHRoZSBPVFJTIHByb2plY3QgKGh0dHA6Ly9vdHJzLm9yZy8pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQpkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgTDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQ+LgoKPWN1dAo=</File>
        <File Location="Kernel/System/ITSMConfigItem/XML/Type/Date.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNvbmZpZ0l0ZW0vWE1ML1R5cGUvRGF0ZS5wbSAtIHhtbCBiYWNrZW5kIG1vZHVsZQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE1IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OklUU01Db25maWdJdGVtOjpYTUw6OlR5cGU6OkRhdGU7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgpOwoKPWhlYWQxIE5BTUUKCktlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbTo6WE1MOjpUeXBlOjpEYXRlIC0geG1sIGJhY2tlbmQgbW9kdWxlCgo9aGVhZDEgU1lOT1BTSVMKCkFsbCB4bWwgZnVuY3Rpb25zIG9mIGRhdGUgb2JqZWN0cwoKPW92ZXIgNAoKPWN1dAoKPWl0ZW0gbmV3KCkKCmNyZWF0ZSBhbiBvYmplY3QKCiAgICB1c2UgS2VybmVsOjpTeXN0ZW06Ok9iamVjdE1hbmFnZXI7CiAgICBsb2NhbCAkS2VybmVsOjpPTSA9IEtlcm5lbDo6U3lzdGVtOjpPYmplY3RNYW5hZ2VyLT5uZXcoKTsKICAgIG15ICRYTUxUeXBlRGF0ZUJhY2tlbmRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW06OlhNTDo6VHlwZTo6RGF0ZScpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIFZhbHVlTG9va3VwKCkKCmdldCB0aGUgZGF0ZSBkYXRhIG9mIGEgdmVyc2lvbgoKICAgIG15ICRWYWx1ZSA9ICRCYWNrZW5kT2JqZWN0LT5WYWx1ZUxvb2t1cCgKICAgICAgICBWYWx1ZSA9PiAnMjAwNy0wMy0yNicsICAjIChvcHRpb25hbCkKICAgICk7Cgo9Y3V0CgpzdWIgVmFsdWVMb29rdXAgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gJFBhcmFte1ZhbHVlfSB8fCAnJzsKfQoKPWl0ZW0gU3RhdHNBdHRyaWJ1dGVDcmVhdGUoKQoKY3JlYXRlIGEgYXR0cmlidXRlIGFycmF5IGZvciB0aGUgc3RhdHMgZnJhbWV3b3JrCgogICAgbXkgJEF0dHJpYnV0ZSA9ICRCYWNrZW5kT2JqZWN0LT5TdGF0c0F0dHJpYnV0ZUNyZWF0ZSgpOwoKPWN1dAoKc3ViIFN0YXRzQXR0cmlidXRlQ3JlYXRlIHsKICAgIG15ICRTZWxmID0gc2hpZnQ7CgogICAgcmV0dXJuOwp9Cgo9aXRlbSBFeHBvcnRTZWFyY2hWYWx1ZVByZXBhcmUoKQoKcHJlcGFyZSBzZWFyY2ggdmFsdWUgZm9yIGV4cG9ydAoKICAgIG15ICRBcnJheVJlZiA9ICRCYWNrZW5kT2JqZWN0LT5FeHBvcnRTZWFyY2hWYWx1ZVByZXBhcmUoCiAgICAgICAgVmFsdWUgPT4gMTEsICMgKG9wdGlvbmFsKQogICAgKTsKCj1jdXQKCnN1YiBFeHBvcnRTZWFyY2hWYWx1ZVByZXBhcmUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gaWYgIWRlZmluZWQgJFBhcmFte1ZhbHVlfTsKICAgIHJldHVybiAkUGFyYW17VmFsdWV9Owp9Cgo9aXRlbSBFeHBvcnRWYWx1ZVByZXBhcmUoKQoKcHJlcGFyZSB2YWx1ZSBmb3IgZXhwb3J0CgogICAgbXkgJFZhbHVlID0gJEJhY2tlbmRPYmplY3QtPkV4cG9ydFZhbHVlUHJlcGFyZSgKICAgICAgICBWYWx1ZSA9PiAxMSwgIyAob3B0aW9uYWwpCiAgICApOwoKPWN1dAoKc3ViIEV4cG9ydFZhbHVlUHJlcGFyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiBpZiAhZGVmaW5lZCAkUGFyYW17VmFsdWV9OwogICAgcmV0dXJuICRQYXJhbXtWYWx1ZX07Cn0KCj1pdGVtIEltcG9ydFNlYXJjaFZhbHVlUHJlcGFyZSgpCgpwcmVwYXJlIHNlYXJjaCB2YWx1ZSBmb3IgaW1wb3J0CgogICAgbXkgJEFycmF5UmVmID0gJEJhY2tlbmRPYmplY3QtPkltcG9ydFNlYXJjaFZhbHVlUHJlcGFyZSgKICAgICAgICBWYWx1ZSA9PiAxMSwgIyAob3B0aW9uYWwpCiAgICApOwoKPWN1dAoKc3ViIEltcG9ydFNlYXJjaFZhbHVlUHJlcGFyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiBpZiAhZGVmaW5lZCAkUGFyYW17VmFsdWV9OwogICAgcmV0dXJuICRQYXJhbXtWYWx1ZX07Cn0KCj1pdGVtIEltcG9ydFZhbHVlUHJlcGFyZSgpCgpwcmVwYXJlIHZhbHVlIGZvciBpbXBvcnQKCiAgICBteSAkVmFsdWUgPSAkQmFja2VuZE9iamVjdC0+SW1wb3J0VmFsdWVQcmVwYXJlKAogICAgICAgIFZhbHVlID0+IDExLCAjIChvcHRpb25hbCkKICAgICk7Cgo9Y3V0CgpzdWIgSW1wb3J0VmFsdWVQcmVwYXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuIGlmICFkZWZpbmVkICRQYXJhbXtWYWx1ZX07CiAgICByZXR1cm4gJFBhcmFte1ZhbHVlfTsKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChodHRwOi8vb3Rycy5vcmcvKS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="Kernel/System/ITSMConfigItem/XML/Type/DateTime.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNvbmZpZ0l0ZW0vWE1ML1R5cGUvRGF0ZVRpbWUucG0gLSB4bWwgYmFja2VuZCBtb2R1bGUKIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxNSBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbTo6WE1MOjpUeXBlOjpEYXRlVGltZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKCk7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OklUU01Db25maWdJdGVtOjpYTUw6OlR5cGU6OkRhdGVUaW1lIC0geG1sIGJhY2tlbmQgbW9kdWxlCgo9aGVhZDEgU1lOT1BTSVMKCkFsbCB4bWwgZnVuY3Rpb25zIG9mIGRhdGUgb2JqZWN0cwoKPW92ZXIgNAoKPWN1dAoKPWl0ZW0gbmV3KCkKCmNyZWF0ZSBhbiBvYmplY3QKCiAgICB1c2UgS2VybmVsOjpTeXN0ZW06Ok9iamVjdE1hbmFnZXI7CiAgICBsb2NhbCAkS2VybmVsOjpPTSA9IEtlcm5lbDo6U3lzdGVtOjpPYmplY3RNYW5hZ2VyLT5uZXcoKTsKICAgIG15ICRYTUxUeXBlRGF0ZVRpbWVCYWNrZW5kT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OklUU01Db25maWdJdGVtOjpYTUw6OlR5cGU6OkRhdGVUaW1lJyk7Cgo9Y3V0CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgIHJldHVybiAkU2VsZjsKfQoKPWl0ZW0gVmFsdWVMb29rdXAoKQoKZ2V0IHRoZSBkYXRlIHRpbWUgZGF0YSBvZiBhIHZlcnNpb24KCiAgICBteSAkVmFsdWUgPSAkQmFja2VuZE9iamVjdC0+VmFsdWVMb29rdXAoCiAgICAgICAgVmFsdWUgPT4gJzIwMDctMDMtMjYgMjI6MDEnLCAgIyAob3B0aW9uYWwpCiAgICApOwoKPWN1dAoKc3ViIFZhbHVlTG9va3VwIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuICRQYXJhbXtWYWx1ZX0gfHwgJyc7Cn0KCj1pdGVtIFN0YXRzQXR0cmlidXRlQ3JlYXRlKCkKCmNyZWF0ZSBhIGF0dHJpYnV0ZSBhcnJheSBmb3IgdGhlIHN0YXRzIGZyYW1ld29yawoKICAgIG15ICRBdHRyaWJ1dGUgPSAkQmFja2VuZE9iamVjdC0+U3RhdHNBdHRyaWJ1dGVDcmVhdGUoKTsKCj1jdXQKCnN1YiBTdGF0c0F0dHJpYnV0ZUNyZWF0ZSB7CiAgICBteSAkU2VsZiA9IHNoaWZ0OwoKICAgIHJldHVybjsKfQoKPWl0ZW0gRXhwb3J0U2VhcmNoVmFsdWVQcmVwYXJlKCkKCnByZXBhcmUgc2VhcmNoIHZhbHVlIGZvciBleHBvcnQKCiAgICBteSAkQXJyYXlSZWYgPSAkQmFja2VuZE9iamVjdC0+RXhwb3J0U2VhcmNoVmFsdWVQcmVwYXJlKAogICAgICAgIFZhbHVlID0+IDExLCAjIChvcHRpb25hbCkKICAgICk7Cgo9Y3V0CgpzdWIgRXhwb3J0U2VhcmNoVmFsdWVQcmVwYXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuIGlmICFkZWZpbmVkICRQYXJhbXtWYWx1ZX07CiAgICByZXR1cm4gJFBhcmFte1ZhbHVlfTsKfQoKPWl0ZW0gRXhwb3J0VmFsdWVQcmVwYXJlKCkKCnByZXBhcmUgdmFsdWUgZm9yIGV4cG9ydAoKICAgIG15ICRWYWx1ZSA9ICRCYWNrZW5kT2JqZWN0LT5FeHBvcnRWYWx1ZVByZXBhcmUoCiAgICAgICAgVmFsdWUgPT4gMTEsICMgKG9wdGlvbmFsKQogICAgKTsKCj1jdXQKCnN1YiBFeHBvcnRWYWx1ZVByZXBhcmUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gaWYgIWRlZmluZWQgJFBhcmFte1ZhbHVlfTsKICAgIHJldHVybiAkUGFyYW17VmFsdWV9Owp9Cgo9aXRlbSBJbXBvcnRTZWFyY2hWYWx1ZVByZXBhcmUoKQoKcHJlcGFyZSBzZWFyY2ggdmFsdWUgZm9yIGltcG9ydAoKICAgIG15ICRBcnJheVJlZiA9ICRCYWNrZW5kT2JqZWN0LT5JbXBvcnRTZWFyY2hWYWx1ZVByZXBhcmUoCiAgICAgICAgVmFsdWUgPT4gMTEsICMgKG9wdGlvbmFsKQogICAgKTsKCj1jdXQKCnN1YiBJbXBvcnRTZWFyY2hWYWx1ZVByZXBhcmUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gaWYgIWRlZmluZWQgJFBhcmFte1ZhbHVlfTsKICAgIHJldHVybiAkUGFyYW17VmFsdWV9Owp9Cgo9aXRlbSBJbXBvcnRWYWx1ZVByZXBhcmUoKQoKcHJlcGFyZSB2YWx1ZSBmb3IgaW1wb3J0CgogICAgbXkgJFZhbHVlID0gJEJhY2tlbmRPYmplY3QtPkltcG9ydFZhbHVlUHJlcGFyZSgKICAgICAgICBWYWx1ZSA9PiAxMSwgIyAob3B0aW9uYWwpCiAgICApOwoKPWN1dAoKc3ViIEltcG9ydFZhbHVlUHJlcGFyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiBpZiAhZGVmaW5lZCAkUGFyYW17VmFsdWV9OwogICAgcmV0dXJuICRQYXJhbXtWYWx1ZX07Cn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoaHR0cDovL290cnMub3JnLykuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="Kernel/System/ITSMConfigItem/XML/Type/Dummy.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNvbmZpZ0l0ZW0vWE1ML1R5cGUvRHVtbXkucG0gLSB4bWwgYmFja2VuZCBtb2R1bGUKIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxNSBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbTo6WE1MOjpUeXBlOjpEdW1teTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKCk7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OklUU01Db25maWdJdGVtOjpYTUw6OlR5cGU6OkR1bW15IC0geG1sIGJhY2tlbmQgbW9kdWxlCgo9aGVhZDEgU1lOT1BTSVMKCkFsbCB4bWwgZnVuY3Rpb25zIG9mIGR1bW15IG9iamVjdHMKCj1vdmVyIDQKCj1jdXQKCj1pdGVtIG5ldygpCgpjcmVhdGUgYW4gb2JqZWN0CgogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpPYmplY3RNYW5hZ2VyOwogICAgbG9jYWwgJEtlcm5lbDo6T00gPSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlci0+bmV3KCk7CiAgICBteSAkWE1MVHlwZUR1bW15QmFja2VuZE9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbTo6WE1MOjpUeXBlOjpEdW1teScpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIFZhbHVlTG9va3VwKCkKCmdldCB0aGUgZHVtbXkgZGF0YSBvZiBhIHZlcnNpb24KCiAgICBteSAkVmFsdWUgPSAkQmFja2VuZE9iamVjdC0+VmFsdWVMb29rdXAoKTsKCj1jdXQKCnN1YiBWYWx1ZUxvb2t1cCB7CiAgICBteSAkU2VsZiA9IHNoaWZ0OwoKICAgIHJldHVybiAnJzsKfQoKPWl0ZW0gU3RhdHNBdHRyaWJ1dGVDcmVhdGUoKQoKY3JlYXRlIGEgYXR0cmlidXRlIGFycmF5IGZvciB0aGUgc3RhdHMgZnJhbWV3b3JrCgogICAgbXkgJEF0dHJpYnV0ZSA9ICRCYWNrZW5kT2JqZWN0LT5TdGF0c0F0dHJpYnV0ZUNyZWF0ZSgpOwoKPWN1dAoKc3ViIFN0YXRzQXR0cmlidXRlQ3JlYXRlIHsKICAgIG15ICRTZWxmID0gc2hpZnQ7CgogICAgcmV0dXJuOwp9Cgo9aXRlbSBFeHBvcnRTZWFyY2hWYWx1ZVByZXBhcmUoKQoKcHJlcGFyZSBzZWFyY2ggdmFsdWUgZm9yIGV4cG9ydAoKICAgIG15ICRBcnJheVJlZiA9ICRCYWNrZW5kT2JqZWN0LT5FeHBvcnRTZWFyY2hWYWx1ZVByZXBhcmUoCiAgICAgICAgVmFsdWUgPT4gMTEsICMgKG9wdGlvbmFsKQogICAgKTsKCj1jdXQKCnN1YiBFeHBvcnRTZWFyY2hWYWx1ZVByZXBhcmUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gaWYgIWRlZmluZWQgJFBhcmFte1ZhbHVlfTsKICAgIHJldHVybiAkUGFyYW17VmFsdWV9Owp9Cgo9aXRlbSBFeHBvcnRWYWx1ZVByZXBhcmUoKQoKcHJlcGFyZSB2YWx1ZSBmb3IgZXhwb3J0CgogICAgbXkgJFZhbHVlID0gJEJhY2tlbmRPYmplY3QtPkV4cG9ydFZhbHVlUHJlcGFyZSgKICAgICAgICBWYWx1ZSA9PiAxMSwgIyAob3B0aW9uYWwpCiAgICApOwoKPWN1dAoKc3ViIEV4cG9ydFZhbHVlUHJlcGFyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiBpZiAhZGVmaW5lZCAkUGFyYW17VmFsdWV9OwogICAgcmV0dXJuICRQYXJhbXtWYWx1ZX07Cn0KCj1pdGVtIEltcG9ydFNlYXJjaFZhbHVlUHJlcGFyZSgpCgpwcmVwYXJlIHNlYXJjaCB2YWx1ZSBmb3IgaW1wb3J0CgogICAgbXkgJEFycmF5UmVmID0gJEJhY2tlbmRPYmplY3QtPkltcG9ydFNlYXJjaFZhbHVlUHJlcGFyZSgKICAgICAgICBWYWx1ZSA9PiAxMSwgIyAob3B0aW9uYWwpCiAgICApOwoKPWN1dAoKc3ViIEltcG9ydFNlYXJjaFZhbHVlUHJlcGFyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiBpZiAhZGVmaW5lZCAkUGFyYW17VmFsdWV9OwogICAgcmV0dXJuICRQYXJhbXtWYWx1ZX07Cn0KCj1pdGVtIEltcG9ydFZhbHVlUHJlcGFyZSgpCgpwcmVwYXJlIHZhbHVlIGZvciBpbXBvcnQKCiAgICBteSAkVmFsdWUgPSAkQmFja2VuZE9iamVjdC0+SW1wb3J0VmFsdWVQcmVwYXJlKAogICAgICAgIFZhbHVlID0+IDExLCAjIChvcHRpb25hbCkKICAgICk7Cgo9Y3V0CgpzdWIgSW1wb3J0VmFsdWVQcmVwYXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuIGlmICFkZWZpbmVkICRQYXJhbXtWYWx1ZX07CiAgICByZXR1cm4gJFBhcmFte1ZhbHVlfTsKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChodHRwOi8vb3Rycy5vcmcvKS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="Kernel/System/ITSMConfigItem/XML/Type/GeneralCatalog.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNvbmZpZ0l0ZW0vWE1ML1R5cGUvR2VuZXJhbENhdGFsb2cucG0gLSB4bWwgYmFja2VuZCBtb2R1bGUKIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxNSBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbTo6WE1MOjpUeXBlOjpHZW5lcmFsQ2F0YWxvZzsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpHZW5lcmFsQ2F0YWxvZycsCiAgICAnS2VybmVsOjpTeXN0ZW06OkxvZycsCik7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OklUU01Db25maWdJdGVtOjpYTUw6OlR5cGU6OkdlbmVyYWxDYXRhbG9nIC0geG1sIGJhY2tlbmQgbW9kdWxlCgo9aGVhZDEgU1lOT1BTSVMKCkFsbCB4bWwgZnVuY3Rpb25zIG9mIGdlbmVyYWwgY2F0YWxvZyBvYmplY3RzCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKY3JlYXRlIGFuIG9iamVjdAoKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlcjsKICAgIGxvY2FsICRLZXJuZWw6Ok9NID0gS2VybmVsOjpTeXN0ZW06Ok9iamVjdE1hbmFnZXItPm5ldygpOwogICAgbXkgJFhNTFR5cGVHZW5lcmFsQ2F0YWxvZ0JhY2tlbmRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW06OlhNTDo6VHlwZTo6R2VuZXJhbENhdGFsb2cnKTsKCj1jdXQKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBWYWx1ZUxvb2t1cCgpCgpnZXQgdGhlIHhtbCBkYXRhIG9mIGEgdmVyc2lvbgoKICAgIG15ICRWYWx1ZSA9ICRCYWNrZW5kT2JqZWN0LT5WYWx1ZUxvb2t1cCgKICAgICAgICBJdGVtICA9PiAkSXRlbVJlZiwKICAgICAgICBWYWx1ZSA9PiAxMSwgICAgICAgICMgKG9wdGlvbmFsKQogICAgKTsKCj1jdXQKCnN1YiBWYWx1ZUxvb2t1cCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBpZiAoICEkUGFyYW17SXRlbX0gKSB7CiAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdOZWVkIEl0ZW0hJywKICAgICAgICApOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICByZXR1cm4gaWYgISRQYXJhbXtWYWx1ZX07CgogICAgIyBnZXQgaXRlbSBsaXN0CiAgICBteSAkSXRlbUxpc3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6R2VuZXJhbENhdGFsb2cnKS0+SXRlbUxpc3QoCiAgICAgICAgQ2xhc3MgPT4gJFBhcmFte0l0ZW19LT57SW5wdXR9LT57Q2xhc3N9IHx8ICcnLAogICAgKTsKCiAgICByZXR1cm4gaWYgISRJdGVtTGlzdDsKICAgIHJldHVybiBpZiByZWYgJEl0ZW1MaXN0IG5lICdIQVNIJzsKCiAgICBteSAkVmFsdWUgPSAkSXRlbUxpc3QtPnsgJFBhcmFte1ZhbHVlfSB9OwoKICAgIHJldHVybiAkVmFsdWU7Cn0KCj1pdGVtIFN0YXRzQXR0cmlidXRlQ3JlYXRlKCkKCmNyZWF0ZSBhIGF0dHJpYnV0ZSBhcnJheSBmb3IgdGhlIHN0YXRzIGZyYW1ld29yawoKICAgIG15ICRBdHRyaWJ1dGUgPSAkQmFja2VuZE9iamVjdC0+U3RhdHNBdHRyaWJ1dGVDcmVhdGUoCiAgICAgICAgS2V5ICA9PiAnS2V5OjpTdWJrZXknLAogICAgICAgIE5hbWUgPT4gJ05hbWUnLAogICAgICAgIEl0ZW0gPT4gJEl0ZW1SZWYsCiAgICApOwoKPWN1dAoKc3ViIFN0YXRzQXR0cmlidXRlQ3JlYXRlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkQXJndW1lbnQgKHF3KEtleSBOYW1lIEl0ZW0pKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyRBcmd1bWVudH0gKSB7CiAgICAgICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICRBcmd1bWVudCEiLAogICAgICAgICAgICApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgICMgZ2V0IGl0ZW0gbGlzdAogICAgbXkgJEl0ZW1MaXN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkdlbmVyYWxDYXRhbG9nJyktPkl0ZW1MaXN0KAogICAgICAgIENsYXNzID0+ICRQYXJhbXtJdGVtfS0+e0lucHV0fS0+e0NsYXNzfSB8fCAnJywKICAgICk7CgogICAgIyBjcmVhdGUgYXJydGlidXRlCiAgICBteSAkQXR0cmlidXRlID0gWwogICAgICAgIHsKICAgICAgICAgICAgTmFtZSAgICAgICAgICAgICA9PiAkUGFyYW17TmFtZX0sCiAgICAgICAgICAgIFVzZUFzWHZhbHVlICAgICAgPT4gMSwKICAgICAgICAgICAgVXNlQXNWYWx1ZVNlcmllcyA9PiAxLAogICAgICAgICAgICBVc2VBc1Jlc3RyaWN0aW9uID0+IDEsCiAgICAgICAgICAgIEVsZW1lbnQgICAgICAgICAgPT4gJFBhcmFte0tleX0sCiAgICAgICAgICAgIEJsb2NrICAgICAgICAgICAgPT4gJ011bHRpU2VsZWN0RmllbGQnLAogICAgICAgICAgICBWYWx1ZXMgICAgICAgICAgID0+ICRJdGVtTGlzdCB8fCB7fSwKICAgICAgICB9LAogICAgXTsKCiAgICByZXR1cm4gJEF0dHJpYnV0ZTsKfQoKPWl0ZW0gRXhwb3J0U2VhcmNoVmFsdWVQcmVwYXJlKCkKCnByZXBhcmUgc2VhcmNoIHZhbHVlIGZvciBleHBvcnQKCiAgICBteSAkQXJyYXlSZWYgPSAkQmFja2VuZE9iamVjdC0+RXhwb3J0U2VhcmNoVmFsdWVQcmVwYXJlKAogICAgICAgIFZhbHVlID0+IDExLCAjIChvcHRpb25hbCkKICAgICk7Cgo9Y3V0CgpzdWIgRXhwb3J0U2VhcmNoVmFsdWVQcmVwYXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuIGlmICFkZWZpbmVkICRQYXJhbXtWYWx1ZX07CgogICAgbXkgQFZhbHVlcyA9IHNwbGl0ICcjIyMjIycsICRQYXJhbXtWYWx1ZX07CiAgICBAVmFsdWVzID0gZ3JlcCB7JF99IEBWYWx1ZXM7CgogICAgcmV0dXJuIFxAVmFsdWVzOwp9Cgo9aXRlbSBFeHBvcnRWYWx1ZVByZXBhcmUoKQoKcHJlcGFyZSB2YWx1ZSBmb3IgZXhwb3J0CgogICAgbXkgJFZhbHVlID0gJEJhY2tlbmRPYmplY3QtPkV4cG9ydFZhbHVlUHJlcGFyZSgKICAgICAgICBWYWx1ZSA9PiAxMSwgIyAob3B0aW9uYWwpCiAgICApOwoKPWN1dAoKc3ViIEV4cG9ydFZhbHVlUHJlcGFyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiBpZiAhZGVmaW5lZCAkUGFyYW17VmFsdWV9OwoKICAgICMgZ2V0IGl0ZW0gbGlzdAogICAgbXkgJEl0ZW1MaXN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkdlbmVyYWxDYXRhbG9nJyktPkl0ZW1MaXN0KAogICAgICAgIENsYXNzID0+ICRQYXJhbXtJdGVtfS0+e0lucHV0fS0+e0NsYXNzfSB8fCAnJywKICAgICk7CgogICAgcmV0dXJuICRJdGVtTGlzdC0+eyAkUGFyYW17VmFsdWV9IH0gfHwgJFBhcmFte1ZhbHVlfTsKfQoKPWl0ZW0gSW1wb3J0U2VhcmNoVmFsdWVQcmVwYXJlKCkKCnByZXBhcmUgc2VhcmNoIHZhbHVlIGZvciBpbXBvcnQKCiAgICBteSAkQXJyYXlSZWYgPSAkQmFja2VuZE9iamVjdC0+SW1wb3J0U2VhcmNoVmFsdWVQcmVwYXJlKAogICAgICAgIFZhbHVlID0+IDExLAogICAgKTsKCj1jdXQKCnN1YiBJbXBvcnRTZWFyY2hWYWx1ZVByZXBhcmUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gaWYgIWRlZmluZWQgJFBhcmFte1ZhbHVlfTsKCiAgICAjIGdldCBpdGVtIGxpc3QKICAgIG15ICRJdGVtTGlzdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpHZW5lcmFsQ2F0YWxvZycpLT5JdGVtTGlzdCgKICAgICAgICBDbGFzcyA9PiAkUGFyYW17SXRlbX0tPntJbnB1dH0tPntDbGFzc30gfHwgJycsCiAgICApOwoKICAgICMgcmV2ZXJzZSB0aGUgbGlzdAogICAgbXkgJU5hbWUySUQgPSByZXZlcnNlICV7JEl0ZW1MaXN0fTsKCiAgICBteSAkR2VuZXJhbENhdGFsb2dJRCA9ICROYW1lMklEeyAkUGFyYW17VmFsdWV9IH07CgogICAgaWYgKCAhJEdlbmVyYWxDYXRhbG9nSUQgKSB7CiAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJHZW5lcmFsIGNhdGFsb2cgbG9va3VwIG9mJyRQYXJhbXtWYWx1ZX0nIGZhaWxlZCEiLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIHJldHVybiAkR2VuZXJhbENhdGFsb2dJRDsKCn0KCj1pdGVtIEltcG9ydFZhbHVlUHJlcGFyZSgpCgpwcmVwYXJlIHZhbHVlIGZvciBpbXBvcnQKCiAgICBteSAkVmFsdWUgPSAkQmFja2VuZE9iamVjdC0+SW1wb3J0VmFsdWVQcmVwYXJlKAogICAgICAgIFZhbHVlID0+IDExLAogICAgKTsKCj1jdXQKCnN1YiBJbXBvcnRWYWx1ZVByZXBhcmUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gaWYgIWRlZmluZWQgJFBhcmFte1ZhbHVlfTsKCiAgICAjIGdldCBpdGVtIGxpc3QKICAgIG15ICRJdGVtTGlzdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpHZW5lcmFsQ2F0YWxvZycpLT5JdGVtTGlzdCgKICAgICAgICBDbGFzcyA9PiAkUGFyYW17SXRlbX0tPntJbnB1dH0tPntDbGFzc30gfHwgJycsCiAgICApOwoKICAgICMgcmV2ZXJzZSB0aGUgbGlzdAogICAgbXkgJU5hbWUySUQgPSByZXZlcnNlICV7JEl0ZW1MaXN0fTsKCiAgICBteSAkR2VuZXJhbENhdGFsb2dJRCA9ICROYW1lMklEeyAkUGFyYW17VmFsdWV9IH07CgogICAgaWYgKCAhJEdlbmVyYWxDYXRhbG9nSUQgKSB7CiAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJHZW5lcmFsIGNhdGFsb2cgbG9va3VwIG9mJyRQYXJhbXtWYWx1ZX0nIGZhaWxlZCEiLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIHJldHVybiAkR2VuZXJhbENhdGFsb2dJRDsKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChodHRwOi8vb3Rycy5vcmcvKS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="Kernel/System/ITSMConfigItem/XML/Type/Integer.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNvbmZpZ0l0ZW0vWE1ML1R5cGUvSW50ZWdlci5wbSAtIHhtbCBiYWNrZW5kIG1vZHVsZQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE1IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OklUU01Db25maWdJdGVtOjpYTUw6OlR5cGU6OkludGVnZXI7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgpOwoKPWhlYWQxIE5BTUUKCktlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbTo6WE1MOjpUeXBlOjpJbnRlZ2VyIC0geG1sIGJhY2tlbmQgbW9kdWxlCgo9aGVhZDEgU1lOT1BTSVMKCkFsbCB4bWwgZnVuY3Rpb25zIG9mIGludGVnZXIgb2JqZWN0cwoKPW92ZXIgNAoKPWN1dAoKPWl0ZW0gbmV3KCkKCmNyZWF0ZSBhbiBvYmplY3QKCiAgICB1c2UgS2VybmVsOjpTeXN0ZW06Ok9iamVjdE1hbmFnZXI7CiAgICBsb2NhbCAkS2VybmVsOjpPTSA9IEtlcm5lbDo6U3lzdGVtOjpPYmplY3RNYW5hZ2VyLT5uZXcoKTsKICAgIG15ICRYTUxUeXBlSW50ZWdlckJhY2tlbmRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW06OlhNTDo6VHlwZTo6SW50ZWdlcicpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIFZhbHVlTG9va3VwKCkKCmdldCB0aGUgaW50ZWdlciBkYXRhIG9mIGEgdmVyc2lvbgoKICAgIG15ICRWYWx1ZSA9ICRCYWNrZW5kT2JqZWN0LT5WYWx1ZUxvb2t1cCgKICAgICAgICBWYWx1ZSA9PiAxMSwgICMgKG9wdGlvbmFsKQogICAgKTsKCj1jdXQKCnN1YiBWYWx1ZUxvb2t1cCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiAkUGFyYW17VmFsdWV9Owp9Cgo9aXRlbSBTdGF0c0F0dHJpYnV0ZUNyZWF0ZSgpCgpjcmVhdGUgYSBhdHRyaWJ1dGUgYXJyYXkgZm9yIHRoZSBzdGF0cyBmcmFtZXdvcmsKCiAgICBteSAkQXR0cmlidXRlID0gJEJhY2tlbmRPYmplY3QtPlN0YXRzQXR0cmlidXRlQ3JlYXRlKCk7Cgo9Y3V0CgpzdWIgU3RhdHNBdHRyaWJ1dGVDcmVhdGUgewogICAgbXkgJFNlbGYgPSBzaGlmdDsKCiAgICByZXR1cm47Cn0KCj1pdGVtIEV4cG9ydFNlYXJjaFZhbHVlUHJlcGFyZSgpCgpwcmVwYXJlIHNlYXJjaCB2YWx1ZSBmb3IgZXhwb3J0CgogICAgbXkgJEFycmF5UmVmID0gJEJhY2tlbmRPYmplY3QtPkV4cG9ydFNlYXJjaFZhbHVlUHJlcGFyZSgKICAgICAgICBWYWx1ZSA9PiAxMSwgIyAob3B0aW9uYWwpCiAgICApOwoKPWN1dAoKc3ViIEV4cG9ydFNlYXJjaFZhbHVlUHJlcGFyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiBpZiAhZGVmaW5lZCAkUGFyYW17VmFsdWV9OwogICAgcmV0dXJuICRQYXJhbXtWYWx1ZX07Cn0KCj1pdGVtIEV4cG9ydFZhbHVlUHJlcGFyZSgpCgpwcmVwYXJlIHZhbHVlIGZvciBleHBvcnQKCiAgICBteSAkVmFsdWUgPSAkQmFja2VuZE9iamVjdC0+RXhwb3J0VmFsdWVQcmVwYXJlKAogICAgICAgIFZhbHVlID0+IDExLCAjIChvcHRpb25hbCkKICAgICk7Cgo9Y3V0CgpzdWIgRXhwb3J0VmFsdWVQcmVwYXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuIGlmICFkZWZpbmVkICRQYXJhbXtWYWx1ZX07CiAgICByZXR1cm4gJFBhcmFte1ZhbHVlfTsKfQoKPWl0ZW0gSW1wb3J0U2VhcmNoVmFsdWVQcmVwYXJlKCkKCnByZXBhcmUgc2VhcmNoIHZhbHVlIGZvciBpbXBvcnQKCiAgICBteSAkQXJyYXlSZWYgPSAkQmFja2VuZE9iamVjdC0+SW1wb3J0U2VhcmNoVmFsdWVQcmVwYXJlKAogICAgICAgIFZhbHVlID0+IDExLCAjIChvcHRpb25hbCkKICAgICk7Cgo9Y3V0CgpzdWIgSW1wb3J0U2VhcmNoVmFsdWVQcmVwYXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuIGlmICFkZWZpbmVkICRQYXJhbXtWYWx1ZX07CiAgICByZXR1cm4gJFBhcmFte1ZhbHVlfTsKfQoKPWl0ZW0gSW1wb3J0VmFsdWVQcmVwYXJlKCkKCnByZXBhcmUgdmFsdWUgZm9yIGltcG9ydAoKICAgIG15ICRWYWx1ZSA9ICRCYWNrZW5kT2JqZWN0LT5JbXBvcnRWYWx1ZVByZXBhcmUoCiAgICAgICAgVmFsdWUgPT4gMTEsICMgKG9wdGlvbmFsKQogICAgKTsKCj1jdXQKCnN1YiBJbXBvcnRWYWx1ZVByZXBhcmUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gaWYgIWRlZmluZWQgJFBhcmFte1ZhbHVlfTsKICAgIHJldHVybiAkUGFyYW17VmFsdWV9Owp9CgoxOwoKPWJhY2sKCj1oZWFkMSBURVJNUyBBTkQgQ09ORElUSU9OUwoKVGhpcyBzb2Z0d2FyZSBpcyBwYXJ0IG9mIHRoZSBPVFJTIHByb2plY3QgKGh0dHA6Ly9vdHJzLm9yZy8pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQpkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgTDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQ+LgoKPWN1dAo=</File>
        <File Location="Kernel/System/ITSMConfigItem/XML/Type/Text.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNvbmZpZ0l0ZW0vWE1ML1R5cGUvVGV4dC5wbSAtIHhtbCBiYWNrZW5kIG1vZHVsZQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE1IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OklUU01Db25maWdJdGVtOjpYTUw6OlR5cGU6OlRleHQ7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6OlN5c3RlbTo6TG9nJywKKTsKCj1oZWFkMSBOQU1FCgpLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW06OlhNTDo6VHlwZTo6VGV4dCAtIHhtbCBiYWNrZW5kIG1vZHVsZQoKPWhlYWQxIFNZTk9QU0lTCgpBbGwgeG1sIGZ1bmN0aW9ucyBvZiB0ZXh0IG9iamVjdHMKCj1vdmVyIDQKCj1jdXQKCj1pdGVtIG5ldygpCgpjcmVhdGUgYW4gb2JqZWN0CgogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpPYmplY3RNYW5hZ2VyOwogICAgbG9jYWwgJEtlcm5lbDo6T00gPSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlci0+bmV3KCk7CiAgICBteSAkWE1MVHlwZVRleHRCYWNrZW5kT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OklUU01Db25maWdJdGVtOjpYTUw6OlR5cGU6OlRleHQnKTsKCj1jdXQKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBWYWx1ZUxvb2t1cCgpCgpnZXQgdGhlIHRleHQgZGF0YSBvZiBhIHZlcnNpb24KCiAgICBteSAkVmFsdWUgPSAkQmFja2VuZE9iamVjdC0+VmFsdWVMb29rdXAoCiAgICAgICAgVmFsdWUgPT4gMTEsICAjIChvcHRpb25hbCkKICAgICk7Cgo9Y3V0CgpzdWIgVmFsdWVMb29rdXAgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gJFBhcmFte1ZhbHVlfTsKfQoKPWl0ZW0gU3RhdHNBdHRyaWJ1dGVDcmVhdGUoKQoKY3JlYXRlIGEgYXR0cmlidXRlIGFycmF5IGZvciB0aGUgc3RhdHMgZnJhbWV3b3JrCgogICAgbXkgJEF0dHJpYnV0ZSA9ICRCYWNrZW5kT2JqZWN0LT5TdGF0c0F0dHJpYnV0ZUNyZWF0ZSgKICAgICAgICBLZXkgID0+ICdLZXk6OlN1YmtleScsCiAgICAgICAgTmFtZSA9PiAnTmFtZScsCiAgICAgICAgSXRlbSA9PiAkSXRlbVJlZiwKICAgICk7Cgo9Y3V0CgpzdWIgU3RhdHNBdHRyaWJ1dGVDcmVhdGUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICRBcmd1bWVudCAocXcoS2V5IE5hbWUgSXRlbSkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBjcmVhdGUgYXR0cmlidXRlCiAgICBteSAkQXR0cmlidXRlID0gWwogICAgICAgIHsKICAgICAgICAgICAgTmFtZSAgICAgICAgICAgICA9PiAkUGFyYW17TmFtZX0sCiAgICAgICAgICAgIFVzZUFzWHZhbHVlICAgICAgPT4gMCwKICAgICAgICAgICAgVXNlQXNWYWx1ZVNlcmllcyA9PiAwLAogICAgICAgICAgICBVc2VBc1Jlc3RyaWN0aW9uID0+IDEsCiAgICAgICAgICAgIEVsZW1lbnQgICAgICAgICAgPT4gJFBhcmFte0tleX0sCiAgICAgICAgICAgIEJsb2NrICAgICAgICAgICAgPT4gJ0lucHV0RmllbGQnLAogICAgICAgIH0sCiAgICBdOwoKICAgIHJldHVybiAkQXR0cmlidXRlOwp9Cgo9aXRlbSBFeHBvcnRTZWFyY2hWYWx1ZVByZXBhcmUoKQoKcHJlcGFyZSBzZWFyY2ggdmFsdWUgZm9yIGV4cG9ydAoKICAgIG15ICRBcnJheVJlZiA9ICRCYWNrZW5kT2JqZWN0LT5FeHBvcnRTZWFyY2hWYWx1ZVByZXBhcmUoCiAgICAgICAgVmFsdWUgPT4gMTEsICMgKG9wdGlvbmFsKQogICAgKTsKCj1jdXQKCnN1YiBFeHBvcnRTZWFyY2hWYWx1ZVByZXBhcmUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gaWYgIWRlZmluZWQgJFBhcmFte1ZhbHVlfTsKICAgIHJldHVybiAkUGFyYW17VmFsdWV9Owp9Cgo9aXRlbSBFeHBvcnRWYWx1ZVByZXBhcmUoKQoKcHJlcGFyZSB2YWx1ZSBmb3IgZXhwb3J0CgogICAgbXkgJFZhbHVlID0gJEJhY2tlbmRPYmplY3QtPkV4cG9ydFZhbHVlUHJlcGFyZSgKICAgICAgICBWYWx1ZSA9PiAxMSwgIyAob3B0aW9uYWwpCiAgICApOwoKPWN1dAoKc3ViIEV4cG9ydFZhbHVlUHJlcGFyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiBpZiAhZGVmaW5lZCAkUGFyYW17VmFsdWV9OwogICAgcmV0dXJuICRQYXJhbXtWYWx1ZX07Cn0KCj1pdGVtIEltcG9ydFNlYXJjaFZhbHVlUHJlcGFyZSgpCgpwcmVwYXJlIHNlYXJjaCB2YWx1ZSBmb3IgaW1wb3J0CgogICAgbXkgJEFycmF5UmVmID0gJEJhY2tlbmRPYmplY3QtPkltcG9ydFNlYXJjaFZhbHVlUHJlcGFyZSgKICAgICAgICBWYWx1ZSA9PiAxMSwgIyAob3B0aW9uYWwpCiAgICApOwoKPWN1dAoKc3ViIEltcG9ydFNlYXJjaFZhbHVlUHJlcGFyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiBpZiAhZGVmaW5lZCAkUGFyYW17VmFsdWV9OwogICAgcmV0dXJuICRQYXJhbXtWYWx1ZX07Cn0KCj1pdGVtIEltcG9ydFZhbHVlUHJlcGFyZSgpCgpwcmVwYXJlIHZhbHVlIGZvciBpbXBvcnQKCiAgICBteSAkVmFsdWUgPSAkQmFja2VuZE9iamVjdC0+SW1wb3J0VmFsdWVQcmVwYXJlKAogICAgICAgIFZhbHVlID0+IDExLCAjIChvcHRpb25hbCkKICAgICk7Cgo9Y3V0CgpzdWIgSW1wb3J0VmFsdWVQcmVwYXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuIGlmICFkZWZpbmVkICRQYXJhbXtWYWx1ZX07CiAgICByZXR1cm4gJFBhcmFte1ZhbHVlfTsKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChodHRwOi8vb3Rycy5vcmcvKS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="Kernel/System/ITSMConfigItem/XML/Type/TextArea.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vSVRTTUNvbmZpZ0l0ZW0vWE1ML1R5cGUvVGV4dEFyZWEucG0gLSB4bWwgYmFja2VuZCBtb2R1bGUKIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxNSBPVFJTIEFHLCBodHRwOi8vb3Rycy5jb20vCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbTo6WE1MOjpUeXBlOjpUZXh0QXJlYTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpMb2cnLAopOwoKPWhlYWQxIE5BTUUKCktlcm5lbDo6U3lzdGVtOjpJVFNNQ29uZmlnSXRlbTo6WE1MOjpUeXBlOjpUZXh0QXJlYSAtIHhtbCBiYWNrZW5kIG1vZHVsZQoKPWhlYWQxIFNZTk9QU0lTCgpBbGwgeG1sIGZ1bmN0aW9ucyBvZiB0ZXh0YXJlYSBvYmplY3RzCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKY3JlYXRlIGFuIG9iamVjdAoKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6T2JqZWN0TWFuYWdlcjsKICAgIGxvY2FsICRLZXJuZWw6Ok9NID0gS2VybmVsOjpTeXN0ZW06Ok9iamVjdE1hbmFnZXItPm5ldygpOwogICAgbXkgJFhNTFR5cGVUZXh0QXJlYUJhY2tlbmRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6SVRTTUNvbmZpZ0l0ZW06OlhNTDo6VHlwZTo6VGV4dEFyZWEnKTsKCj1jdXQKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBWYWx1ZUxvb2t1cCgpCgpnZXQgdGhlIHRleHQgZGF0YSBvZiBhIHZlcnNpb24KCiAgICBteSAkVmFsdWUgPSAkQmFja2VuZE9iamVjdC0+VmFsdWVMb29rdXAoCiAgICAgICAgVmFsdWUgPT4gMTEsICAjIChvcHRpb25hbCkKICAgICk7Cgo9Y3V0CgpzdWIgVmFsdWVMb29rdXAgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gJFBhcmFte1ZhbHVlfTsKfQoKPWl0ZW0gU3RhdHNBdHRyaWJ1dGVDcmVhdGUoKQoKY3JlYXRlIGEgYXR0cmlidXRlIGFycmF5IGZvciB0aGUgc3RhdHMgZnJhbWV3b3JrCgogICAgbXkgJEF0dHJpYnV0ZSA9ICRCYWNrZW5kT2JqZWN0LT5TdGF0c0F0dHJpYnV0ZUNyZWF0ZSgKICAgICAgICBLZXkgID0+ICdLZXk6OlN1YmtleScsCiAgICAgICAgTmFtZSA9PiAnTmFtZScsCiAgICAgICAgSXRlbSA9PiAkSXRlbVJlZiwKICAgICk7Cgo9Y3V0CgpzdWIgU3RhdHNBdHRyaWJ1dGVDcmVhdGUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICRBcmd1bWVudCAocXcoS2V5IE5hbWUgSXRlbSkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JEFyZ3VtZW50fSApIHsKICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJEFyZ3VtZW50ISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBjcmVhdGUgYXJydGlidXRlCiAgICBteSAkQXR0cmlidXRlID0gWwogICAgICAgIHsKICAgICAgICAgICAgTmFtZSAgICAgICAgICAgICA9PiAkUGFyYW17TmFtZX0sCiAgICAgICAgICAgIFVzZUFzWHZhbHVlICAgICAgPT4gMCwKICAgICAgICAgICAgVXNlQXNWYWx1ZVNlcmllcyA9PiAwLAogICAgICAgICAgICBVc2VBc1Jlc3RyaWN0aW9uID0+IDEsCiAgICAgICAgICAgIEVsZW1lbnQgICAgICAgICAgPT4gJFBhcmFte0tleX0sCiAgICAgICAgICAgIEJsb2NrICAgICAgICAgICAgPT4gJ0lucHV0RmllbGQnLAogICAgICAgIH0sCiAgICBdOwoKICAgIHJldHVybiAkQXR0cmlidXRlOwp9Cgo9aXRlbSBFeHBvcnRTZWFyY2hWYWx1ZVByZXBhcmUoKQoKcHJlcGFyZSBzZWFyY2ggdmFsdWUgZm9yIGV4cG9ydAoKICAgIG15ICRBcnJheVJlZiA9ICRCYWNrZW5kT2JqZWN0LT5FeHBvcnRTZWFyY2hWYWx1ZVByZXBhcmUoCiAgICAgICAgVmFsdWUgPT4gMTEsICMgKG9wdGlvbmFsKQogICAgKTsKCj1jdXQKCnN1YiBFeHBvcnRTZWFyY2hWYWx1ZVByZXBhcmUgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gaWYgIWRlZmluZWQgJFBhcmFte1ZhbHVlfTsKICAgIHJldHVybiAkUGFyYW17VmFsdWV9Owp9Cgo9aXRlbSBFeHBvcnRWYWx1ZVByZXBhcmUoKQoKcHJlcGFyZSB2YWx1ZSBmb3IgZXhwb3J0CgogICAgbXkgJFZhbHVlID0gJEJhY2tlbmRPYmplY3QtPkV4cG9ydFZhbHVlUHJlcGFyZSgKICAgICAgICBWYWx1ZSA9PiAxMSwgIyAob3B0aW9uYWwpCiAgICApOwoKPWN1dAoKc3ViIEV4cG9ydFZhbHVlUHJlcGFyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiBpZiAhZGVmaW5lZCAkUGFyYW17VmFsdWV9OwogICAgcmV0dXJuICRQYXJhbXtWYWx1ZX07Cn0KCj1pdGVtIEltcG9ydFNlYXJjaFZhbHVlUHJlcGFyZSgpCgpwcmVwYXJlIHNlYXJjaCB2YWx1ZSBmb3IgaW1wb3J0CgogICAgbXkgJEFycmF5UmVmID0gJEJhY2tlbmRPYmplY3QtPkltcG9ydFNlYXJjaFZhbHVlUHJlcGFyZSgKICAgICAgICBWYWx1ZSA9PiAxMSwgIyAob3B0aW9uYWwpCiAgICApOwoKPWN1dAoKc3ViIEltcG9ydFNlYXJjaFZhbHVlUHJlcGFyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiBpZiAhZGVmaW5lZCAkUGFyYW17VmFsdWV9OwogICAgcmV0dXJuICRQYXJhbXtWYWx1ZX07Cn0KCj1pdGVtIEltcG9ydFZhbHVlUHJlcGFyZSgpCgpwcmVwYXJlIHZhbHVlIGZvciBpbXBvcnQKCiAgICBteSAkVmFsdWUgPSAkQmFja2VuZE9iamVjdC0+SW1wb3J0VmFsdWVQcmVwYXJlKAogICAgICAgIFZhbHVlID0+IDExLCAjIChvcHRpb25hbCkKICAgICk7Cgo9Y3V0CgpzdWIgSW1wb3J0VmFsdWVQcmVwYXJlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuIGlmICFkZWZpbmVkICRQYXJhbXtWYWx1ZX07CiAgICByZXR1cm4gJFBhcmFte1ZhbHVlfTsKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChodHRwOi8vb3Rycy5vcmcvKS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="Kernel/System/LinkObject/ITSMConfigItem.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Service/PreferencesDB.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vU2VydmljZS9QcmVmZXJlbmNlc0RCLnBtIC0gc29tZSB1c2VyIGZ1bmN0aW9ucwojIENvcHlyaWdodCAoQykgMjAwMS0yMDE1IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojICRvcmlnaW46IGh0dHBzOi8vZ2l0aHViLmNvbS9PVFJTL290cnMvYmxvYi83ZGUzNDA4OTc5NTFlNWFkYTVlYTM0NGNhMzQwMTUyNWIxNDk0NDEyL0tlcm5lbC9TeXN0ZW0vU2VydmljZS9QcmVmZXJlbmNlc0RCLnBtCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpTZXJ2aWNlOjpQcmVmZXJlbmNlc0RCOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoCiAgICAnS2VybmVsOjpDb25maWcnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpDYWNoZScsCiAgICAnS2VybmVsOjpTeXN0ZW06OkRCJywKICAgICdLZXJuZWw6OlN5c3RlbTo6TG9nJywKKTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgJFNlbGYtPntDYWNoZVR5cGV9ID0gJ1NlcnZpY2VQcmVmZXJlbmNlc0RCJzsKICAgICRTZWxmLT57Q2FjaGVUVEx9ICA9IDYwICogNjAgKiAyNCAqIDIwOwoKICAgICMgcHJlZmVyZW5jZXMgdGFibGUgZGF0YQogICAgJFNlbGYtPntQcmVmZXJlbmNlc1RhYmxlfSAgICAgICAgICA9ICdzZXJ2aWNlX3ByZWZlcmVuY2VzJzsKICAgICRTZWxmLT57UHJlZmVyZW5jZXNUYWJsZUtleX0gICAgICAgPSAncHJlZmVyZW5jZXNfa2V5JzsKICAgICRTZWxmLT57UHJlZmVyZW5jZXNUYWJsZVZhbHVlfSAgICAgPSAncHJlZmVyZW5jZXNfdmFsdWUnOwogICAgJFNlbGYtPntQcmVmZXJlbmNlc1RhYmxlU2VydmljZUlEfSA9ICdzZXJ2aWNlX2lkJzsKCiAgICAjIGNyZWF0ZSBjYWNoZSBwcmVmaXgKICAgICRTZWxmLT57Q2FjaGVQcmVmaXh9ID0gJ1NlcnZpY2VQcmVmZXJlbmNlc0RCJwogICAgICAgIC4gJFNlbGYtPntQcmVmZXJlbmNlc1RhYmxlfQogICAgICAgIC4gJFNlbGYtPntQcmVmZXJlbmNlc1RhYmxlS2V5fQogICAgICAgIC4gJFNlbGYtPntQcmVmZXJlbmNlc1RhYmxlVmFsdWV9CiAgICAgICAgLiAkU2VsZi0+e1ByZWZlcmVuY2VzVGFibGVTZXJ2aWNlSUR9OwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIFNlcnZpY2VQcmVmZXJlbmNlc1NldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgKHF3KFNlcnZpY2VJRCBLZXkgVmFsdWUpKSB7CiAgICAgICAgaWYgKCAhZGVmaW5lZCAkUGFyYW17JF99ICkgewogICAgICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkXyEiCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgbXkgJERCT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkRCJyk7CgogICAgIyBkZWxldGUgb2xkIGRhdGEKICAgIHJldHVybiBpZiAhJERCT2JqZWN0LT5EbygKICAgICAgICBTUUwgPT4gIkRFTEVURSBGUk9NICRTZWxmLT57UHJlZmVyZW5jZXNUYWJsZX0gV0hFUkUgIgogICAgICAgICAgICAuICIkU2VsZi0+e1ByZWZlcmVuY2VzVGFibGVTZXJ2aWNlSUR9ID0gPyBBTkQgJFNlbGYtPntQcmVmZXJlbmNlc1RhYmxlS2V5fSA9ID8iLAogICAgICAgIEJpbmQgPT4gWyBcJFBhcmFte1NlcnZpY2VJRH0sIFwkUGFyYW17S2V5fSBdLAogICAgKTsKCiAgICAjIGluc2VydCBuZXcgZGF0YQogICAgcmV0dXJuIGlmICEkREJPYmplY3QtPkRvKAogICAgICAgIFNRTCA9PiAiSU5TRVJUIElOVE8gJFNlbGYtPntQcmVmZXJlbmNlc1RhYmxlfSAoJFNlbGYtPntQcmVmZXJlbmNlc1RhYmxlU2VydmljZUlEfSwgIgogICAgICAgICAgICAuICIgJFNlbGYtPntQcmVmZXJlbmNlc1RhYmxlS2V5fSwgJFNlbGYtPntQcmVmZXJlbmNlc1RhYmxlVmFsdWV9KSAiCiAgICAgICAgICAgIC4gIiBWQUxVRVMgKD8sID8sID8pIiwKICAgICAgICBCaW5kID0+IFsgXCRQYXJhbXtTZXJ2aWNlSUR9LCBcJFBhcmFte0tleX0sIFwkUGFyYW17VmFsdWV9IF0sCiAgICApOwoKICAgICMgZGVsZXRlIGNhY2hlCiAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6Q2FjaGUnKS0+RGVsZXRlKAogICAgICAgIFR5cGUgPT4gJFNlbGYtPntDYWNoZVR5cGV9LAogICAgICAgIEtleSAgPT4gJFNlbGYtPntDYWNoZVByZWZpeH0gLiAkUGFyYW17U2VydmljZUlEfSwKICAgICk7CgogICAgcmV0dXJuIDE7Cn0KCnN1YiBTZXJ2aWNlUHJlZmVyZW5jZXNHZXQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIChxdyhTZXJ2aWNlSUQpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyRffSApIHsKICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJF8hIgogICAgICAgICAgICApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQojIC0tLQojIElUU00KIyAtLS0KIwojICAgICMgY2hlY2sgaWYgc2VydmljZSBwcmVmZXJlbmNlcyBhcmUgYXZhaWxhYmxlCiMgICAgcmV0dXJuIGlmICEkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpLT5HZXQoJ1NlcnZpY2VQcmVmZXJlbmNlcycpOwojIC0tLQoKICAgICMgcmVhZCBjYWNoZQogICAgbXkgJENhY2hlID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkNhY2hlJyktPkdldCgKICAgICAgICBUeXBlID0+ICRTZWxmLT57Q2FjaGVUeXBlfSwKICAgICAgICBLZXkgID0+ICRTZWxmLT57Q2FjaGVQcmVmaXh9IC4gJFBhcmFte1NlcnZpY2VJRH0sCiAgICApOwogICAgcmV0dXJuICV7JENhY2hlfSBpZiAkQ2FjaGU7CgogICAgbXkgJERCT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkRCJyk7CgogICAgIyBnZXQgcHJlZmVyZW5jZXMKICAgIHJldHVybiBpZiAhJERCT2JqZWN0LT5QcmVwYXJlKAogICAgICAgIFNRTCA9PiAiU0VMRUNUICRTZWxmLT57UHJlZmVyZW5jZXNUYWJsZUtleX0sICRTZWxmLT57UHJlZmVyZW5jZXNUYWJsZVZhbHVlfSAiCiAgICAgICAgICAgIC4gIiBGUk9NICRTZWxmLT57UHJlZmVyZW5jZXNUYWJsZX0gV0hFUkUgJFNlbGYtPntQcmVmZXJlbmNlc1RhYmxlU2VydmljZUlEfSA9ID8iLAogICAgICAgIEJpbmQgPT4gWyBcJFBhcmFte1NlcnZpY2VJRH0gXSwKICAgICk7CgogICAgbXkgJURhdGE7CiAgICB3aGlsZSAoIG15IEBSb3cgPSAkREJPYmplY3QtPkZldGNocm93QXJyYXkoKSApIHsKICAgICAgICAkRGF0YXsgJFJvd1swXSB9ID0gJFJvd1sxXTsKICAgIH0KCiAgICAjIHNldCBjYWNoZQogICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkNhY2hlJyktPlNldCgKICAgICAgICBUeXBlICA9PiAkU2VsZi0+e0NhY2hlVHlwZX0sCiAgICAgICAgVFRMICAgPT4gJFNlbGYtPntDYWNoZVRUTH0sCiAgICAgICAgS2V5ICAgPT4gJFNlbGYtPntDYWNoZVByZWZpeH0gLiAkUGFyYW17U2VydmljZUlEfSwKICAgICAgICBWYWx1ZSA9PiBcJURhdGEsCiAgICApOwoKICAgIHJldHVybiAlRGF0YTsKfQoKMTsK</File>
        <File Location="Kernel/System/Stats/Dynamic/ITSMConfigItem.pm" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/GenericInterface/Operation/ConfigItem/ConfigItemCreate.t" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/GenericInterface/Operation/ConfigItem/ConfigItemGet.t" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/GenericInterface/Operation/ConfigItem/ConfigItemSearch.t" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/GenericInterface/Operation/ConfigItem/ConfigItemUpdate.t" Permission="644" Encode="Base64"></File>
        <File Location="scripts/webservices/GenericConfigItemConnectorSOAP.yml" Permission="644" Encode="Base64">LS0tCkRlYnVnZ2VyOgogIERlYnVnVGhyZXNob2xkOiBkZWJ1ZwogIFRlc3RNb2RlOiAnMCcKRGVzY3JpcHRpb246IElUU00gQ29uZmlndXJhdGlvbiBNYW5hZ2VtZW50IENvbm5lY3RvciBTYW1wbGUKRnJhbWV3b3JrVmVyc2lvbjogNC4wLnggZ2l0ClByb3ZpZGVyOgogIE9wZXJhdGlvbjoKICAgIENvbmZpZ0l0ZW1DcmVhdGU6CiAgICAgIERlc2NyaXB0aW9uOiBDcmVhdGVzIG5ldyBDb25maWd1cmF0aW9uIEl0ZW1zIGZyb20gSVRTTUNvbmZpZ3VyYXRpb25NYW5hZ2VtZW50CiAgICAgIE1hcHBpbmdJbmJvdW5kOiB7fQogICAgICBNYXBwaW5nT3V0Ym91bmQ6IHt9CiAgICAgIFR5cGU6IENvbmZpZ0l0ZW06OkNvbmZpZ0l0ZW1DcmVhdGUKICAgIENvbmZpZ0l0ZW1HZXQ6CiAgICAgIERlc2NyaXB0aW9uOiBHZXQgdGhlIGRldGFpbHMgZm9yIENvbmZpZ3VyYXRpb24gSXRlbXMgZnJvbSBJVFNNQ29uZmlndXJhdGlvbk1hbmFnZW1lbnQKICAgICAgTWFwcGluZ0luYm91bmQ6IHt9CiAgICAgIE1hcHBpbmdPdXRib3VuZDoge30KICAgICAgVHlwZTogQ29uZmlnSXRlbTo6Q29uZmlnSXRlbUdldAogICAgQ29uZmlnSXRlbVNlYXJjaDoKICAgICAgRGVzY3JpcHRpb246IFNlYXJjaCBDb25maWd1cmF0aW9uIEl0ZW1zIGZyb20gSVRTTUNvbmZpZ3VyYXRpb25NYW5hZ2VtZW50CiAgICAgIE1hcHBpbmdJbmJvdW5kOiB7fQogICAgICBNYXBwaW5nT3V0Ym91bmQ6IHt9CiAgICAgIFR5cGU6IENvbmZpZ0l0ZW06OkNvbmZpZ0l0ZW1TZWFyY2gKICAgIENvbmZpZ0l0ZW1VcGRhdGU6CiAgICAgIERlc2NyaXB0aW9uOiBVcGRhdGVzIENvbmZpZ3VyYXRpb24gSXRlbXMgZnJvbSBJVFNNQ29uZmlndXJhdGlvbk1hbmFnZW1lbnQKICAgICAgTWFwcGluZ0luYm91bmQ6IHt9CiAgICAgIE1hcHBpbmdPdXRib3VuZDoge30KICAgICAgVHlwZTogQ29uZmlnSXRlbTo6Q29uZmlnSXRlbVVwZGF0ZQogIFRyYW5zcG9ydDoKICAgIENvbmZpZzoKICAgICAgTWF4TGVuZ3RoOiAnMTAwMDAwJwogICAgICBOYW1lU3BhY2U6IGh0dHA6Ly93d3cub3Rycy5vcmcvQ29uZmlnSXRlbUNvbm5lY3Rvci8KICAgIFR5cGU6IEhUVFA6OlNPQVAKUmVtb3RlU3lzdGVtOiAnJwpSZXF1ZXN0ZXI6CiAgVHJhbnNwb3J0OgogICAgVHlwZTogJycK</File>
        <File Location="scripts/test/ImportExportObjectITSMConfigItem.t" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/ITSMConfigItem.t" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/ITSMConfigItemLinkTest.t" Permission="644" Encode="Base64"></File>
        <File Location="scripts/test/ITSMConfigItemUniqueCIName.t" Permission="644" Encode="Base64"></File>
        <File Location="var/httpd/htdocs/js/ITSM.Agent.ConfigItem.Search.js" Permission="644" Encode="Base64"></File>
        <File Location="var/httpd/htdocs/js/ITSM.UI.ConfigItemActionRow.js" Permission="644" Encode="Base64">Ly8gLS0KLy8gSVRTTS5VSS5Db25maWdJdGVtQWN0aW9uUm93LmpzIC0gcHJvdmlkZXMgYWxsIGZ1bmN0aW9ucyBmb3IgdGhlIENvbmZpZ0l0ZW0gQWN0aW9uIHJvdwovLyBDb3B5cmlnaHQgKEMpIDIwMDMtMjAxMyBPVFJTIEFHLCBodHRwOi8vb3Rycy5vcmcvCi8vIC0tCi8vIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCi8vIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKLy8gZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KLy8gLS0KCiJ1c2Ugc3RyaWN0IjsKCnZhciBJVFNNID0gSVRTTSB8fCB7fTsKSVRTTS5VSSA9IElUU00uVUkgfHwge307CgovKioKICogQG5hbWVzcGFjZQogKiBAZXhwb3J0cyBUYXJnZXROUyBhcyBJVFNNLlVJLkNvbmZpZ0l0ZW1BY3Rpb25Sb3cKICogQGRlc2NyaXB0aW9uCiAqICAgICAgQWN0aW9uIHJvdyBmdW5jdGlvbmFsaXR5CiAqIEByZXF1aXJlcwogKiAgICAgIENvcmUuSlNPTgogKiAgICAgIENvcmUuRGF0YQogKi8KSVRTTS5VSS5Db25maWdJdGVtQWN0aW9uUm93ID0gKGZ1bmN0aW9uIChUYXJnZXROUykgewoKICAgIGlmICghQ29yZS5EZWJ1Zy5DaGVja0RlcGVuZGVuY3koJ0lUU00uVUkuQ29uZmlnSXRlbUFjdGlvblJvdycsICdDb3JlLkpTT04nLCAnSlNPTiBBUEknKSkgewogICAgICAgIHJldHVybjsKICAgIH0KICAgIGlmICghQ29yZS5EZWJ1Zy5DaGVja0RlcGVuZGVuY3koJ0lUU00uVUkuQ29uZmlnSXRlbUFjdGlvblJvdycsICdDb3JlLkRhdGEnLCAnRGF0YSBBUEknKSkgewogICAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIgQ29uZmlnSXRlbUVsZW1lbnRTZWxlY3RvcnMgPSB7CiAgICAgICAgICAgICdTbWFsbCc6ICdkaXYuT3ZlcnZpZXcgdGFibGUgdGQgaW5wdXQ6Y2hlY2tib3hbbmFtZT1Db25maWdJdGVtSURdJywKICAgICAgICAgICAgJ01lZGl1bSc6ICd1bC5PdmVydmlldyBpbnB1dDpjaGVja2JveFtuYW1lPUNvbmZpZ0l0ZW1JRF0nLAogICAgICAgICAgICAnTGFyZ2UnOiAndWwuT3ZlcnZpZXcgaW5wdXQ6Y2hlY2tib3hbbmFtZT1Db25maWdJdGVtSURdJwogICAgICAgIH0sCiAgICAgICAgQ29uZmlnSXRlbVZpZXc7CgogICAgLyoqCiAgICAgKiBAZnVuY3Rpb24KICAgICAqIEBwcml2YXRlCiAgICAgKiBAcGFyYW0ge09iamVjdH0gRGF0YSBUaGUgZGF0YSB0aGF0IHNob3VsZCBiZSBjb252ZXJ0ZWQKICAgICAqIEByZXR1cm4ge3N0cmluZ30gcXVlcnkgc3RyaW5nIG9mIHRoZSBkYXRhCiAgICAgKiBAZGVzY3JpcHRpb24gQ29udmVydHMgYSBnaXZlbiBoYXNoIGludG8gYSBxdWVyeSBzdHJpbmcKICAgICAqLwogICAgZnVuY3Rpb24gU2VyaWFsaXplRGF0YShEYXRhKSB7CiAgICAgICAgdmFyIFF1ZXJ5U3RyaW5nID0gJyc7CiAgICAgICAgJC5lYWNoKERhdGEsIGZ1bmN0aW9uIChLZXksIFZhbHVlKSB7CiAgICAgICAgICAgIFF1ZXJ5U3RyaW5nICs9ICc7JyArIGVuY29kZVVSSUNvbXBvbmVudChLZXkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KFZhbHVlKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gUXVlcnlTdHJpbmc7CiAgICB9CgogICAgLyoqCiAgICAgKiBAZnVuY3Rpb24KICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogICAgICBUaGlzIGZ1bmN0aW9ucyBhZGRzIGluZm9ybWF0aW9uIGFib3V0IHRoZSB2YWxpZCBhY3Rpb24gb2YgYW4gZWxlbWVudCB0byB0aGUgZWxlbWVudC4KICAgICAqICAgICAgVGhlc2UgaW5mb3JtYXRpb24gYXJlIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGFjdGlvbiByb3cgaW5kaXZpZHVhbGx5IGZvciB0aGlzIGVsZW1lbnQuCiAgICAgKiBAcGFyYW0ge2pRdWVyeU9iamVjdH0gJEVsZW1lbnQKICAgICAqICAgICAgVGhlIGVsZW1lbnQgZm9yIHdoaWNoIHRoZSBkYXRhIGlzIHN0b3JlZAogICAgICogQHBhcmFtIHtTdHJpbmd9IEpTT05TdHJpbmcKICAgICAqICAgICAgVGhlIEpTT04gc3RyaW5nIHdoaWNoIGNvbnRhaW5zIHRoZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdmFsaWQgYWN0aW9ucyBvZiB0aGUgZWxlbWVudCAoZ2VuZXJhdGVkIGJ5IFBlcmwgbW9kdWxlKQogICAgICogICAgICBDb3VsZCBhbHNvIGJlIGFuIGphdmFzY3JpcHQgb2JqZWN0IGRpcmVjdGx5CiAgICAgKiBAcmV0dXJuIG5vdGhpbmcKICAgICAqLwogICAgVGFyZ2V0TlMuQWRkQWN0aW9ucyA9IGZ1bmN0aW9uICgkRWxlbWVudCwgSlNPTlN0cmluZykgewogICAgICAgIHZhciBBY3Rpb25zOwogICAgICAgIC8vIFRoZSBlbGVtZW50IG9mIHRoZSBnaXZlbiBJRCBtdXN0IGV4aXN0LCBKU09OU3RyaW5nIG11c3Qgbm90IGJlIGVtcHR5CiAgICAgICAgaWYgKGlzSlF1ZXJ5T2JqZWN0KCRFbGVtZW50KSkgewogICAgICAgICAgICBpZiAodHlwZW9mIEpTT05TdHJpbmcgPT09ICdTdHJpbmcnKSB7CiAgICAgICAgICAgICAgICBBY3Rpb25zID0gQ29yZS5KU09OLlBhcnNlKEpTT05TdHJpbmcpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgQWN0aW9ucyA9IEpTT05TdHJpbmc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIHNhdmUgYWN0aW9uIGRhdGEgdG8gdGhlIGdpdmVuIGVsZW1lbnQKICAgICAgICAgICAgQ29yZS5EYXRhLlNldCgkRWxlbWVudCwgJ0FjdGlvbnMnLCBBY3Rpb25zKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIENvcmUuRGVidWcuTG9nKCdFbGVtZW50IGRvZXMgbm90IGV4aXN0IG9yIG5vIHZhbGlkIGRhdGEgc3RydWN0dXJlIHBhc3NlZC4nKTsKICAgICAgICB9CiAgICB9OwoKICAgIC8qKgogICAgICogQGZ1bmN0aW9uCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqICAgICAgVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgb24gY2xpY2sgb24gdGhlIGNoZWNrYm94IG9mIGFuIENvbmZpZ0l0ZW0gZWxlbWVudCBhbmQgdXBkYXRlcyB0aGUgYWN0aW9uIHJvdyBmb3IgdGhpcyBlbGVtZW50LgogICAgICogQHBhcmFtIHtqUXVlcnlPYmplY3R9ICRDbGlja2VkRWxlbWVudAogICAgICogICAgICBqUXVlcnlPYmplY3Qgb2YgdGhlIGNsaWNrZWQgZWxlbWVudCAobm9ybWFsbHkgJCh0aGlzKSkKICAgICAqIEBwYXJhbSB7alF1ZXJ5T2JqZWN0fSBDaGVja2JveGVzCiAgICAgKiAgICAgIGpRdWVyeU9iamVjdCBvZiB0aGUgY2hlY2tib3hlcyBvZiB0aGUgZGlmZmVyZW50IENvbmZpZ0l0ZW1zCiAgICAgKiBAcGFyYW0ge2pRdWVyeU9iamVjdH0gJEFjdGlvblJvdwogICAgICogICAgICBUaGUgalF1ZXJ5T2JqZWN0IG9mIHRoZSBBY3Rpb25Sb3cgd3JhcHBlciAobm9ybWFsbHkgdGhlIDx1bD4tRWxlbWVudCkKICAgICAqIEByZXR1cm4gbm90aGluZwogICAgICovCiAgICBUYXJnZXROUy5VcGRhdGVBY3Rpb25Sb3cgPSBmdW5jdGlvbiAoJENsaWNrZWRFbGVtZW50LCAkQ2hlY2tib3hlcywgJEFjdGlvblJvdykgewogICAgICAgIHZhciBDb25maWdJdGVtQWN0aW9uRGF0YSwKICAgICAgICAgICAgQWN0aW9uUm93RWxlbWVudDsKCiAgICAgICAgLy8gQ2hlY2ssIGlmIG9uZSBvciBtb3JlIGl0ZW1zIGFyZSBzZWxlY3RlZAogICAgICAgICRDaGVja2JveGVzID0gJENoZWNrYm94ZXMuZmlsdGVyKCc6Y2hlY2tlZCcpOwogICAgICAgIC8vIE5vIGNoZWNrYm94IGlzIHNlbGVjdGVkCiAgICAgICAgaWYgKCEkQ2hlY2tib3hlcy5sZW5ndGgpIHsKICAgICAgICAgICAgLy8gUmVtb3ZlIGFjdGlvbnMgYW5kIGRlYWN0aXZhdGUgYnVsayBhY3Rpb24KICAgICAgICAgICAgJEFjdGlvblJvdwogICAgICAgICAgICAgICAgLmZpbmQoJ2xpJykuZmlsdGVyKCc6bm90KC5CdWxrKScpLnJlbW92ZSgpCiAgICAgICAgICAgICAgICAuZW5kKCkuZW5kKCkKICAgICAgICAgICAgICAgIC5maW5kKCcjQ29uZmlnSXRlbUJ1bGtBY3Rpb24nKS5hZGRDbGFzcygnSW5hY3RpdmUnKQogICAgICAgICAgICAgICAgLmVuZCgpCiAgICAgICAgICAgICAgICAuZmluZCgnbGkuTGFzdCcpLnJlbW92ZUNsYXNzKCdMYXN0JykKICAgICAgICAgICAgICAgIC5lbmQoKQogICAgICAgICAgICAgICAgLmZpbmQoJ2xpOmxhc3QnKS5hZGRDbGFzcygnTGFzdCcpOwogICAgICAgIH0KICAgICAgICAvLyBFeGFjdGx5IG9uZSBjaGVja2JveCBpcyBzZWxlY3RlZAogICAgICAgIGVsc2UgaWYgKCRDaGVja2JveGVzLmxlbmd0aCA9PT0gMSAmJiAhJCgnI1NlbGVjdEFsbENvbmZpZ0l0ZW1zJykuaXMoJzpjaGVja2VkJykgKSB7CiAgICAgICAgICAgIC8vIFVwZGF0ZSBhY3Rpb25zIGFuZCBhY3RpdmF0ZSBidWxrIGFjdGlvbgogICAgICAgICAgICAkQWN0aW9uUm93LmZpbmQoJyNDb25maWdJdGVtQnVsa0FjdGlvbicpLnJlbW92ZUNsYXNzKCdJbmFjdGl2ZScpOwoKICAgICAgICAgICAgLy8gRmluZCB0aGUgZWxlbWVudCB3aGljaCBpcyBhY3RpdmUgKGl0IG11c3Qgbm90IGJlIHRoZSBjbGlja2VkIGVsZW1lbnQhKQogICAgICAgICAgICAvLyBhbmQgZ2V0IHRoZSBkYXRhCiAgICAgICAgICAgIENvbmZpZ0l0ZW1BY3Rpb25EYXRhID0gQ29yZS5EYXRhLkdldCgkQ2hlY2tib3hlcy5jbG9zZXN0KCdsaSwgdHInKSwgJ0FjdGlvbnMnKTsKICAgICAgICAgICAgaWYgKHR5cGVvZiBDb25maWdJdGVtQWN0aW9uRGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgICQuZWFjaChDb25maWdJdGVtQWN0aW9uRGF0YSwgZnVuY3Rpb24gKEluZGV4LCBWYWx1ZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChWYWx1ZS5IVE1MKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoVmFsdWUuSFRNTCkuYXR0cignaWQnLCBWYWx1ZS5JRCkuYXBwZW5kVG8oJEFjdGlvblJvdyk7CiAgICAgICAgICAgICAgICAgICAgICAgIEFjdGlvblJvd0VsZW1lbnQgPSAkQWN0aW9uUm93LmZpbmQoJyMnICsgVmFsdWUuSUQpLmZpbmQoJ2EnKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBWYWx1ZS5UYXJnZXQgPT09ICd1bmRlZmluZWQnIHx8IFZhbHVlLlRhcmdldCA9PT0gIiIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjdGlvblJvd0VsZW1lbnQuYXR0cignaHJlZicsIFZhbHVlLkxpbmspOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChWYWx1ZS5Qb3B1cFR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjdGlvblJvd0VsZW1lbnQuYmluZCgnY2xpY2suUG9wdXAnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29yZS5VSS5Qb3B1cC5PcGVuUG9wdXAoVmFsdWUuTGluaywgVmFsdWUuUG9wdXBUeXBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBBcHBseSB0aGUgTGFzdCBjbGFzcyB0byB0aGUgcmlnaHQgZWxlbWVudAogICAgICAgICAgICAkQWN0aW9uUm93CiAgICAgICAgICAgICAgICAuZmluZCgnbGkuTGFzdCcpLnJlbW92ZUNsYXNzKCdMYXN0JykKICAgICAgICAgICAgICAgIC5lbmQoKQogICAgICAgICAgICAgICAgLmZpbmQoJ2xpOmxhc3QnKS5hZGRDbGFzcygnTGFzdCcpOwogICAgICAgIH0KICAgICAgICAvLyBUd28gb3JlIG1vcmUgY2hlY2tib3hlcyBzZWxlY3RlZAogICAgICAgIGVsc2UgewogICAgICAgICAgICAvLyBSZW1vdmUgYWN0aW9ucyBhbmQgYWN0aXZhdGUgYnVsayBhY3Rpb24KICAgICAgICAgICAgJEFjdGlvblJvdwogICAgICAgICAgICAgICAgLmZpbmQoJ2xpJykuZmlsdGVyKCc6bm90KC5CdWxrKScpLnJlbW92ZSgpCiAgICAgICAgICAgICAgICAuZW5kKCkuZW5kKCkKICAgICAgICAgICAgICAgIC5maW5kKCcjQ29uZmlnSXRlbUJ1bGtBY3Rpb24nKS5yZW1vdmVDbGFzcygnSW5hY3RpdmUnKQogICAgICAgICAgICAgICAgLmVuZCgpCiAgICAgICAgICAgICAgICAuZmluZCgnbGkuTGFzdCcpLnJlbW92ZUNsYXNzKCdMYXN0JykKICAgICAgICAgICAgICAgIC5lbmQoKQogICAgICAgICAgICAgICAgLmZpbmQoJ2xpOmxhc3QnKS5hZGRDbGFzcygnTGFzdCcpOwogICAgICAgIH0KICAgIH07CgogICAgLyoqCiAgICAgKiBAZnVuY3Rpb24KICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogICAgICBUaGlzIGZ1bmN0aW9uIGluaXRpYWxpemVzIHRoZSBjb21wbGV0ZSBBY3Rpb25Sb3cgZnVuY3Rpb25hbGl0eSBhbmQgYmluZHMgYWxsIGNsaWNrIGV2ZW50cy4KICAgICAqIEByZXR1cm4gbm90aGluZwogICAgICovCiAgICBUYXJnZXROUy5Jbml0ID0gZnVuY3Rpb24gKCkgewogICAgICAgIC8vIEdldCB1c2VkIENvbmZpZ0l0ZW0gdmlldyBtb2RlCiAgICAgICAgaWYgKCQoJyNDb25maWdJdGVtT3ZlcnZpZXdNZWRpdW0nKS5sZW5ndGgpIHsKICAgICAgICAgICAgQ29uZmlnSXRlbVZpZXcgPSAnTWVkaXVtJzsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoJCgnI0NvbmZpZ0l0ZW1PdmVydmlld0xhcmdlJykubGVuZ3RoKSB7CiAgICAgICAgICAgIENvbmZpZ0l0ZW1WaWV3ID0gJ0xhcmdlJzsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIENvbmZpZ0l0ZW1WaWV3ID0gJ1NtYWxsJzsKICAgICAgICB9CgogICAgICAgICQoJyNTZWxlY3RBbGxDb25maWdJdGVtcycpLmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgU3RhdHVzID0gJCh0aGlzKS5wcm9wKCdjaGVja2VkJyk7CiAgICAgICAgICAgICQoQ29uZmlnSXRlbUVsZW1lbnRTZWxlY3RvcnNbQ29uZmlnSXRlbVZpZXddKS5wcm9wKCdjaGVja2VkJywgU3RhdHVzKS50cmlnZ2VySGFuZGxlcignY2xpY2snKTsKICAgICAgICB9KTsKCiAgICAgICAgJChDb25maWdJdGVtRWxlbWVudFNlbGVjdG9yc1tDb25maWdJdGVtVmlld10pLmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24gKEV2ZW50KSB7CiAgICAgICAgICAgIEV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICBJVFNNLlVJLkNvbmZpZ0l0ZW1BY3Rpb25Sb3cuVXBkYXRlQWN0aW9uUm93KCQodGhpcyksICQoQ29uZmlnSXRlbUVsZW1lbnRTZWxlY3RvcnNbQ29uZmlnSXRlbVZpZXddKSwgJCgnZGl2Lk92ZXJ2aWV3QWN0aW9ucyB1bC5BY3Rpb25zJykpOwogICAgICAgIH0pOwoKICAgICAgICAkKCcjQ29uZmlnSXRlbUJ1bGtBY3Rpb24gYScpLmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgJEVsZW1lbnQgPSAkKHRoaXMpLAogICAgICAgICAgICAgICAgJFNlbGVjdGVkQ29uZmlnSXRlbXMsCiAgICAgICAgICAgICAgICBDb25maWdJdGVtSURQYXJhbWV0ZXIgPSAiQ29uZmlnSXRlbUlEPSIsCiAgICAgICAgICAgICAgICBDb25maWdJdGVtSURzID0gIiIsCiAgICAgICAgICAgICAgICBVUkw7CiAgICAgICAgICAgIGlmICgkRWxlbWVudC5wYXJlbnQoJ2xpJykuaGFzQ2xhc3MoJ0luYWN0aXZlJykpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRTZWxlY3RlZENvbmZpZ0l0ZW1zID0gJChDb25maWdJdGVtRWxlbWVudFNlbGVjdG9yc1tDb25maWdJdGVtVmlld10gKyAnOmNoZWNrZWQnKTsKICAgICAgICAgICAgICAgICRTZWxlY3RlZENvbmZpZ0l0ZW1zLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIENvbmZpZ0l0ZW1JRHMgKz0gQ29uZmlnSXRlbUlEUGFyYW1ldGVyICsgJCh0aGlzKS52YWwoKSArICI7IjsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgVVJMID0gQ29yZS5Db25maWcuR2V0KCdCYXNlbGluaycpICsgIkFjdGlvbj1BZ2VudElUU01Db25maWdJdGVtQnVsazsiICsgQ29uZmlnSXRlbUlEczsKICAgICAgICAgICAgICAgIFVSTCArPSBTZXJpYWxpemVEYXRhKENvcmUuQXBwLkdldFNlc3Npb25JbmZvcm1hdGlvbigpKTsKICAgICAgICAgICAgICAgIENvcmUuVUkuUG9wdXAuT3BlblBvcHVwKFVSTCwgJ0NvbmZpZ0l0ZW1BY3Rpb24nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIHJldHVybiBUYXJnZXROUzsKfShJVFNNLlVJLkNvbmZpZ0l0ZW1BY3Rpb25Sb3cgfHwge30pKTsK</File>
        <File Location="var/packagesetup/ITSMConfigurationManagement.pm" Permission="644" Encode="Base64"></File>
    </Filelist>
    <DatabaseInstall Type="post">
        <TableCreate Type="post" Name="configitem">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="configitem_number" Required="true" Size="100" Type="VARCHAR"></Column>
            <Column Name="class_id" Required="true" Type="INTEGER"></Column>
            <Column Name="last_version_id" Required="false" Type="BIGINT"></Column>
            <Column Name="cur_depl_state_id" Required="false" Type="INTEGER"></Column>
            <Column Name="cur_inci_state_id" Required="false" Type="INTEGER"></Column>
            <Column Name="create_time" Required="true" Type="DATE"></Column>
            <Column Name="create_by" Required="true" Type="INTEGER"></Column>
            <Column Name="change_time" Required="true" Type="DATE"></Column>
            <Column Name="change_by" Required="true" Type="INTEGER"></Column>
            <Unique>
                                <UniqueColumn Name="configitem_number"></UniqueColumn>
</Unique>
            <Index Name="configitem_class_id">
                <IndexColumn Name="class_id">
                </IndexColumn>
            </Index>
            <Index Name="configitem_last_version_id">
                <IndexColumn Name="last_version_id">
                </IndexColumn>
            </Index>
            <Index Name="configitem_cur_depl_state_id">
                <IndexColumn Name="cur_depl_state_id">
                </IndexColumn>
            </Index>
            <Index Name="configitem_cur_inci_state_id">
                <IndexColumn Name="cur_inci_state_id">
                </IndexColumn>
            </Index>
            <ForeignKey ForeignTable="general_catalog">
                <Reference Foreign="id" Local="class_id">
                </Reference>
                <Reference Foreign="id" Local="cur_depl_state_id">
                </Reference>
                <Reference Foreign="id" Local="cur_inci_state_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
                <Reference Foreign="id" Local="change_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="configitem_definition">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="INTEGER"></Column>
            <Column Name="class_id" Required="true" Type="INTEGER"></Column>
            <Column Name="configitem_definition" Required="true" Type="LONGBLOB"></Column>
            <Column Name="version" Required="true" Type="INTEGER"></Column>
            <Column Name="create_time" Required="true" Type="DATE"></Column>
            <Column Name="create_by" Required="true" Type="INTEGER"></Column>
            <ForeignKey ForeignTable="general_catalog">
                <Reference Foreign="id" Local="class_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="configitem_version">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="configitem_id" Required="true" Type="BIGINT"></Column>
            <Column Name="name" Required="true" Size="250" Type="VARCHAR"></Column>
            <Column Name="definition_id" Required="true" Type="INTEGER"></Column>
            <Column Name="depl_state_id" Required="true" Type="INTEGER"></Column>
            <Column Name="inci_state_id" Required="false" Type="INTEGER"></Column>
            <Column Name="create_time" Required="true" Type="DATE"></Column>
            <Column Name="create_by" Required="true" Type="INTEGER"></Column>
            <Index Name="configitem_version_configitem_id">
                <IndexColumn Name="configitem_id">
                </IndexColumn>
            </Index>
            <Index Name="configitem_version_depl_state_id">
                <IndexColumn Name="depl_state_id">
                </IndexColumn>
            </Index>
            <Index Name="configitem_version_inci_state_id">
                <IndexColumn Name="inci_state_id">
                </IndexColumn>
            </Index>
            <ForeignKey ForeignTable="configitem">
                <Reference Foreign="id" Local="configitem_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="configitem_definition">
                <Reference Foreign="id" Local="definition_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="general_catalog">
                <Reference Foreign="id" Local="depl_state_id">
                </Reference>
                <Reference Foreign="id" Local="inci_state_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="configitem_counter">
            <Column Name="class_id" PrimaryKey="true" Required="true" Type="INTEGER"></Column>
            <Column Name="counter_type" Required="true" Size="50" Type="VARCHAR"></Column>
            <Column Name="counter" Required="true" Size="50" Type="VARCHAR"></Column>
            <ForeignKey ForeignTable="general_catalog">
                <Reference Foreign="id" Local="class_id">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="configitem_history_type">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="INTEGER"></Column>
            <Column Name="name" Required="true" Size="255" Type="VARCHAR"></Column>
            <Column Name="comments" Size="255" Type="VARCHAR"></Column>
            <Column Name="valid_id" Required="true" Type="SMALLINT"></Column>
            <Column Name="create_time" Required="true" Type="DATE"></Column>
            <Column Name="create_by" Required="true" Type="INTEGER"></Column>
            <Column Name="change_time" Type="DATE"></Column>
            <Column Name="change_by" Type="INTEGER"></Column>
            <Unique Name="configitem_history_type_name">
                                <UniqueColumn Name="name"></UniqueColumn>
</Unique>
            <ForeignKey ForeignTable="valid">
                <Reference Foreign="id" Local="valid_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
                <Reference Foreign="id" Local="change_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="configitem_history">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="configitem_id" Required="true" Type="BIGINT"></Column>
            <Column Name="type_id" Required="true" Type="INTEGER"></Column>
            <Column Name="content" Required="true" Size="255" Type="VARCHAR"></Column>
            <Column Name="create_time" Required="true" Type="DATE"></Column>
            <Column Name="create_by" Required="true" Type="INTEGER"></Column>
            <ForeignKey ForeignTable="configitem">
                <Reference Foreign="id" Local="configitem_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="configitem_history_type">
                <Reference Foreign="id" Local="type_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Class</Data>
            <Data Key="name" Type="Quote">Computer</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Class</Data>
            <Data Key="name" Type="Quote">Hardware</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Class</Data>
            <Data Key="name" Type="Quote">Location</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Class</Data>
            <Data Key="name" Type="Quote">Network</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Class</Data>
            <Data Key="name" Type="Quote">Software</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::DeploymentState</Data>
            <Data Key="name" Type="Quote">Expired</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::DeploymentState</Data>
            <Data Key="name" Type="Quote">Inactive</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::DeploymentState</Data>
            <Data Key="name" Type="Quote">Maintenance</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::DeploymentState</Data>
            <Data Key="name" Type="Quote">Pilot</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::DeploymentState</Data>
            <Data Key="name" Type="Quote">Planned</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::DeploymentState</Data>
            <Data Key="name" Type="Quote">Production</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::DeploymentState</Data>
            <Data Key="name" Type="Quote">Repair</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::DeploymentState</Data>
            <Data Key="name" Type="Quote">Retired</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::DeploymentState</Data>
            <Data Key="name" Type="Quote">Review</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::DeploymentState</Data>
            <Data Key="name" Type="Quote">Test/QA</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::YesNo</Data>
            <Data Key="name" Type="Quote">Yes</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::YesNo</Data>
            <Data Key="name" Type="Quote">No</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Computer::Type</Data>
            <Data Key="name" Type="Quote">Laptop</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Computer::Type</Data>
            <Data Key="name" Type="Quote">Desktop</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Computer::Type</Data>
            <Data Key="name" Type="Quote">Phone</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Computer::Type</Data>
            <Data Key="name" Type="Quote">PDA</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Computer::Type</Data>
            <Data Key="name" Type="Quote">Server</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Computer::Type</Data>
            <Data Key="name" Type="Quote">Other</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Hardware::Type</Data>
            <Data Key="name" Type="Quote">Monitor</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Hardware::Type</Data>
            <Data Key="name" Type="Quote">Printer</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Hardware::Type</Data>
            <Data Key="name" Type="Quote">Switch</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Hardware::Type</Data>
            <Data Key="name" Type="Quote">Router</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Hardware::Type</Data>
            <Data Key="name" Type="Quote">WLAN Access Point</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Hardware::Type</Data>
            <Data Key="name" Type="Quote">Security Device</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Hardware::Type</Data>
            <Data Key="name" Type="Quote">Backup Device</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Hardware::Type</Data>
            <Data Key="name" Type="Quote">Mouse</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Hardware::Type</Data>
            <Data Key="name" Type="Quote">Keyboard</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Hardware::Type</Data>
            <Data Key="name" Type="Quote">Camera</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Hardware::Type</Data>
            <Data Key="name" Type="Quote">Beamer</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Hardware::Type</Data>
            <Data Key="name" Type="Quote">Modem</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Hardware::Type</Data>
            <Data Key="name" Type="Quote">PCMCIA Card</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Hardware::Type</Data>
            <Data Key="name" Type="Quote">USB Device</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Hardware::Type</Data>
            <Data Key="name" Type="Quote">Docking Station</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Hardware::Type</Data>
            <Data Key="name" Type="Quote">Scanner</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Hardware::Type</Data>
            <Data Key="name" Type="Quote">Other</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Location::Type</Data>
            <Data Key="name" Type="Quote">Building</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Location::Type</Data>
            <Data Key="name" Type="Quote">Office</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Location::Type</Data>
            <Data Key="name" Type="Quote">Floor</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Location::Type</Data>
            <Data Key="name" Type="Quote">Room</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Location::Type</Data>
            <Data Key="name" Type="Quote">Rack</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Location::Type</Data>
            <Data Key="name" Type="Quote">Workplace</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Location::Type</Data>
            <Data Key="name" Type="Quote">Outlet</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Location::Type</Data>
            <Data Key="name" Type="Quote">IT Facility</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Location::Type</Data>
            <Data Key="name" Type="Quote">Other</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Network::Type</Data>
            <Data Key="name" Type="Quote">LAN</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Network::Type</Data>
            <Data Key="name" Type="Quote">WLAN</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Network::Type</Data>
            <Data Key="name" Type="Quote">Telco</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Network::Type</Data>
            <Data Key="name" Type="Quote">GSM</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Network::Type</Data>
            <Data Key="name" Type="Quote">Other</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::Type</Data>
            <Data Key="name" Type="Quote">Client Application</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::Type</Data>
            <Data Key="name" Type="Quote">Middleware</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::Type</Data>
            <Data Key="name" Type="Quote">Server Application</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::Type</Data>
            <Data Key="name" Type="Quote">Client OS</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::Type</Data>
            <Data Key="name" Type="Quote">Server OS</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::Type</Data>
            <Data Key="name" Type="Quote">Admin Tool</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::Type</Data>
            <Data Key="name" Type="Quote">User Tool</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::Type</Data>
            <Data Key="name" Type="Quote">Embedded</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::Type</Data>
            <Data Key="name" Type="Quote">Other</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::LicenceType</Data>
            <Data Key="name" Type="Quote">Single Licence</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::LicenceType</Data>
            <Data Key="name" Type="Quote">Per User</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::LicenceType</Data>
            <Data Key="name" Type="Quote">Concurrent Users</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::LicenceType</Data>
            <Data Key="name" Type="Quote">Per Processor</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::LicenceType</Data>
            <Data Key="name" Type="Quote">Per Server</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::LicenceType</Data>
            <Data Key="name" Type="Quote">Per Node</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::LicenceType</Data>
            <Data Key="name" Type="Quote">Volume Licence</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::LicenceType</Data>
            <Data Key="name" Type="Quote">Enterprise Licence</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::LicenceType</Data>
            <Data Key="name" Type="Quote">Developer Licence</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::LicenceType</Data>
            <Data Key="name" Type="Quote">Demo</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::LicenceType</Data>
            <Data Key="name" Type="Quote">Time Restricted</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::LicenceType</Data>
            <Data Key="name" Type="Quote">Freeware</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::LicenceType</Data>
            <Data Key="name" Type="Quote">Open Source</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="general_catalog">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Software::LicenceType</Data>
            <Data Key="name" Type="Quote">Unlimited</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type">
            <Data Key="name" Type="Quote">ConfigItemCreate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type">
            <Data Key="name" Type="Quote">ConfigItemDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type">
            <Data Key="name" Type="Quote">LinkAdd</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type">
            <Data Key="name" Type="Quote">LinkDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type">
            <Data Key="name" Type="Quote">NameUpdate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type">
            <Data Key="name" Type="Quote">VersionCreate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type">
            <Data Key="name" Type="Quote">ValueUpdate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type">
            <Data Key="name" Type="Quote">DefinitionUpdate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type">
            <Data Key="name" Type="Quote">IncidentStateUpdate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type">
            <Data Key="name" Type="Quote">DeploymentStateUpdate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type">
            <Data Key="name" Type="Quote">VersionDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type">
            <Data Key="name" Type="Quote">AttachmentAdd</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type">
            <Data Key="name" Type="Quote">AttachmentDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
    </DatabaseInstall>
    <DatabaseUpgrade Type="post">
        <TableCreate Type="post" Name="configitem_history_type" Version="1.3.71">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="INTEGER"></Column>
            <Column Name="name" Required="true" Size="255" Type="VARCHAR"></Column>
            <Column Name="comments" Size="255" Type="VARCHAR"></Column>
            <Column Name="valid_id" Required="true" Type="SMALLINT"></Column>
            <Column Name="create_time" Required="true" Type="DATE"></Column>
            <Column Name="create_by" Required="true" Type="INTEGER"></Column>
            <Column Name="change_time" Type="DATE"></Column>
            <Column Name="change_by" Type="INTEGER"></Column>
            <Unique Name="configitem_history_type_name">
                                <UniqueColumn Name="name"></UniqueColumn>
</Unique>
            <ForeignKey ForeignTable="valid">
                <Reference Foreign="id" Local="valid_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="users">
                <Reference Foreign="id" Local="create_by">
                </Reference>
                <Reference Foreign="id" Local="change_by">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <TableCreate Type="post" Name="configitem_history" Version="1.3.71">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Type="BIGINT"></Column>
            <Column Name="configitem_id" Required="true" Type="BIGINT"></Column>
            <Column Name="type_id" Required="true" Type="INTEGER"></Column>
            <Column Name="content" Required="true" Size="255" Type="VARCHAR"></Column>
            <Column Name="create_time" Required="true" Type="DATE"></Column>
            <Column Name="create_by" Required="true" Type="INTEGER"></Column>
            <ForeignKey ForeignTable="configitem">
                <Reference Foreign="id" Local="configitem_id">
                </Reference>
            </ForeignKey>
            <ForeignKey ForeignTable="configitem_history_type">
                <Reference Foreign="id" Local="type_id">
                </Reference>
            </ForeignKey>
        </TableCreate>
        <Insert Type="post" Table="general_catalog" Version="1.1.90">
            <Data Key="general_catalog_class" Type="Quote">ITSM::ConfigItem::Class</Data>
            <Data Key="name" Type="Quote">Location</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type" Version="1.3.71">
            <Data Key="name" Type="Quote">ConfigItemCreate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type" Version="1.3.71">
            <Data Key="name" Type="Quote">ConfigItemDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type" Version="1.3.71">
            <Data Key="name" Type="Quote">LinkAdd</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type" Version="1.3.71">
            <Data Key="name" Type="Quote">LinkDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type" Version="1.3.71">
            <Data Key="name" Type="Quote">NameUpdate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type" Version="1.3.71">
            <Data Key="name" Type="Quote">VersionCreate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type" Version="1.3.71">
            <Data Key="name" Type="Quote">ValueUpdate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type" Version="1.3.71">
            <Data Key="name" Type="Quote">DefinitionUpdate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type" Version="1.3.71">
            <Data Key="name" Type="Quote">IncidentStateUpdate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type" Version="1.3.71">
            <Data Key="name" Type="Quote">DeploymentStateUpdate</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type" Version="1.3.71">
            <Data Key="name" Type="Quote">VersionDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type" Version="3.1.92">
            <Data Key="name" Type="Quote">AttachmentAdd</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
        <Insert Type="post" Table="configitem_history_type" Version="3.1.92">
            <Data Key="name" Type="Quote">AttachmentDelete</Data>
            <Data Key="valid_id">1</Data>
            <Data Key="create_time">current_timestamp</Data>
            <Data Key="create_by">1</Data>
            <Data Key="change_time">current_timestamp</Data>
            <Data Key="change_by">1</Data>
        </Insert>
    </DatabaseUpgrade>
    <DatabaseUninstall Type="pre">
        <TableDrop Type="pre" Name="configitem_counter">
        </TableDrop>
        <TableDrop Type="pre" Name="configitem_version">
        </TableDrop>
        <TableDrop Type="pre" Name="configitem_definition">
        </TableDrop>
        <TableDrop Type="pre" Name="configitem_history">
        </TableDrop>
        <TableDrop Type="pre" Name="configitem_history_type">
        </TableDrop>
        <TableDrop Type="pre" Name="configitem">
        </TableDrop>
    </DatabaseUninstall>
</otrs_package>